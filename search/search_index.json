{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u9996\u9875 \u00b6 \u8fd9\u662f\u4e00\u4efd\u5168\u6808\u5de5\u7a0b\u5e08\u4ece\u5165\u95e8\u5230\u722c\u5751\u624b\u518c\uff0c\u6b22\u8fce\u5927\u5bb6\u4e00\u8d77\u6765\u586b\u5751 \u4e3b\u8981\u5185\u5bb9\u6765\u6e90\u4e8e\u5404\u5927\u6280\u672f\u5e73\u53f0\u5b98\u65b9\u6587\u6863\uff0c\u5e76\u5c06\u91cd\u8981\u77e5\u8bc6\u70b9\u8fdb\u884c\u603b\u7ed3\u5f52\u7c7b \u5927\u5bb6\u53ef\u6839\u636e\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u9009\u62e9\u4e0d\u540c\u7684\u6280\u672f\u6808\u4f5c\u4e3a\u5165\u53e3\u8fdb\u884c\u5b66\u4e60 \u672c\u6587\u6863\u91c7\u7528Git\u8fdb\u884c\u7248\u672c\u7ba1\u7406,\u53ef\u4ee5\u5f53\u4f5c\u516c\u53f8\u6280\u672f\u56e2\u961f\u7684\u77e5\u8bc6\u5e93 \u652f\u6301\u968f\u65f6\u968f\u5730\u67e5\u9605\uff0c\u4e0d\u9650\u5730\u57df\uff0c\u81ea\u9002\u5e94\u7ec8\u7aef\uff0c\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u5feb\u901f\u5339\u914d\u5173\u952e\u5b57","title":"Index"},{"location":"index.html#_1","text":"\u8fd9\u662f\u4e00\u4efd\u5168\u6808\u5de5\u7a0b\u5e08\u4ece\u5165\u95e8\u5230\u722c\u5751\u624b\u518c\uff0c\u6b22\u8fce\u5927\u5bb6\u4e00\u8d77\u6765\u586b\u5751 \u4e3b\u8981\u5185\u5bb9\u6765\u6e90\u4e8e\u5404\u5927\u6280\u672f\u5e73\u53f0\u5b98\u65b9\u6587\u6863\uff0c\u5e76\u5c06\u91cd\u8981\u77e5\u8bc6\u70b9\u8fdb\u884c\u603b\u7ed3\u5f52\u7c7b \u5927\u5bb6\u53ef\u6839\u636e\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u9009\u62e9\u4e0d\u540c\u7684\u6280\u672f\u6808\u4f5c\u4e3a\u5165\u53e3\u8fdb\u884c\u5b66\u4e60 \u672c\u6587\u6863\u91c7\u7528Git\u8fdb\u884c\u7248\u672c\u7ba1\u7406,\u53ef\u4ee5\u5f53\u4f5c\u516c\u53f8\u6280\u672f\u56e2\u961f\u7684\u77e5\u8bc6\u5e93 \u652f\u6301\u968f\u65f6\u968f\u5730\u67e5\u9605\uff0c\u4e0d\u9650\u5730\u57df\uff0c\u81ea\u9002\u5e94\u7ec8\u7aef\uff0c\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u5feb\u901f\u5339\u914d\u5173\u952e\u5b57","title":"\u9996\u9875"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html","text":"MAVEN\u73af\u5883\u5b89\u88c5\u53caIDEA\u9879\u76ee\u914d\u7f6e \u00b6 \u914d\u7f6eMAVEN\u73af\u5883 \u00b6 \u4e0b\u8f7d\u3001\u89e3\u538bmaven\u5305 \u00b6 windows\u7cfb\u7edf\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u538b\u7f29\u5305\uff1a Maven\u6700\u65b0\u7248\u4e0b\u5730\u5730\u5740 \u3001 3.6\u7248\u4e0b\u8f7d\u5730\u5740 \u5c06\u4e0b\u8f7d\u538b\u7f29\u5305\u4fdd\u5b58\u5230IDEA\u7684\u5b89\u88c5\u76ee\u5f55(\u975e\u5fc5\u987b\uff0c\u6839\u636e\u81ea\u5df1\u7684\u4e60\u60ef\u6765\u9009\u62e9\u76ee\u5f55),\u6253\u5f00\u538b\u7f29\u5305\uff0c\u9009\u62e9\u91cc\u9762\u7684\u6839\u8def\u5f84\u8fdb\u884c\u89e3\u538b\u3002 \u89e3\u538b\u4e4b\u540e\u7684\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a \u914d\u7f6emaven\u955c\u50cf\u5730\u5740\u548c\u672c\u5730\u4ed3\u5e93\u8def\u5f84 : <mirror> <id> nexus-aliyun </id> <mirrorOf> * </mirrorOf> <name> Nexus aliyun </name> <url> http://maven.aliyun.com/nexus/content/groups/public </url> </mirror> \u914d\u7f6e\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u00b6 \u914d\u7f6eMAVEN_HOME \u5b89\u88c5\u76ee\u5f55\u5047\u8bbe\u4e3a\uff1aD:\\maven\\apache-maven-3.5.2\uff0c\u6dfb\u52a0maven\u7684\u73af\u5883\u53d8\u91cf\uff0c\u53d8\u91cf\u540d\u4e3a\uff1aMAVEN_HOM\uff1b\u503c\u4e3a\uff1a D:\\maven\\apache-maven-3.5.2\uff1b \u914d\u7f6epath\u53d8\u91cf\uff0c\u52a0\u4e0a\u5982\u4e0b\u503c\uff1a ;%MAVEN_HOM%\\bin; \u6253\u5f00cmd\u8f93\u5165mvn -v\u547d\u4ee4\uff0c\u67e5\u770bmaven\u73af\u5883\u53d8\u91cf\u662f\u5426\u751f\u6548 Linux\u4e0b\u901a\u8fc7YUM\u5b89\u88c5Maven 3.5 yum install -y yum-utils yum-config-manager --add-repo http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo yum-config-manager --enable epel-apache-maven yum install -y apache-maven Maven\u67e5\u770b\u914d\u7f6e\u53d8\u91cf\u547d\u4ee4\uff1amvn help:system \u00b6 mvn help:system \u8be5\u547d\u4ee4\u4f1a\u6253\u5370\u51fa\u6240\u6709\u7684Java\u7cfb\u7edf\u5c5e\u6027\u548c\u73af\u5883\u53d8\u91cf,\u5e76\u4e0b\u8f7d\u76f8\u5173jar\u5305; IDEA\u5168\u5c40\u914d\u7f6e \u00b6 \u914d\u7f6e Maven\u4e3b\u76ee\u5f55 \u00b6 \u542f\u52a8IDEA,\u6253\u5f00\u754c\u9762\u53f3\u4e0b\u89d2Configure\u83dc\u5355\u7b2c1\u9879Settings. \u641c\u7d22Mavens\u914d\u7f6e\uff0c\u9009\u62e9Build\u76ee\u5f55\u4e0b\u7684Maven,\u66f4\u6539Maven\u4e3b\u76ee\u5f55\u8def\u5f84\uff0c\u9009\u62e9\u4e4b\u524d\u89e3\u538b\u7684\u8def\u5f84\uff0c\u4ee5\u53ca\u914d\u7f6e\u8def\u5f84\uff0c\u672c\u5730\u4ed3\u5e93\u8def\u5f84\u4f1a\u81ea\u52a8\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d \u914d\u7f6e\u9879\u76eeJDK \u00b6 \u542f\u52a8IDEA,\u6253\u5f00\u754c\u9762\u53f3\u4e0b\u89d2Configure\u83dc\u5355\u7b2c3\u9879Structure for new Projects. \u8fdb\u5165\u5e73\u53f0\u914d\u7f6e\u9009\u62e9SDKs,\u6dfb\u52a01.8\u7248\u672cjdk\uff0c\u9009\u62e9\u5b89\u88c5\u4e3b\u8def\u5f84\u5373\u53ef \u518d\u9009\u62e9Project\u914d\u7f6e\uff0c\u9009\u62e9\u521a\u6dfb\u52a0\u76841.8\u7248\u672cjdk \u9879\u76ee\u542f\u52a8\uff08Spring Boot) \u00b6 \u5bfc\u5165\u3001\u6784\u5efa\u9879\u76ee \u00b6 \u542f\u52a8IDEA,\u9009\u62e9Open or Import \u83dc\u5355\u5bfc\u5165\u9879\u76ee(\u63d0\u524d\u5c06\u9879\u76ee\u514b\u9686\u5230\u672c\u5730https://gitee.com/jldev/jianghan_university.git) \u901a\u8fc7maven\u5b89\u88c5\u9879\u76ee\u4f9d\u8d56\u5305,\u8fdb\u5165IDEA,\u6253\u5f00\u53f3\u4fa7maven\u5de5\u5177\u7a97\u53e3\uff0c\u70b9\u51fbLifecycle--install\uff0c\u901a\u8fc7\u8f93\u51fa\u65e5\u5fd7\u53ef\u4ee5\u770b\u5230\u4e0b\u8f7d\u5730\u5740\u5df2\u7ecf\u662f\u4e4b\u524d\u914d\u7f6e\u7684\u963f\u91cc\u4ed3\u5e93\u5730\u5740\uff1b\u4f9d\u8d56\u5168\u90e8\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u63d0\u793aBuild SUCCESS\u4ee3\u8868\u901a\u8fc7Maven\u6784\u5efa\u6210\u529f\uff0c\u4f9d\u6b21\u5c06\u5176\u5b83\u6a21\u5757\u8fdb\u884c\u6784\u5efa(web\u6a21\u5757). \u914d\u7f6eweb\u670d\u52a1\u7aef\u53e3\uff0cRedis\u5730\u5740\uff0cMysql\u5730\u5740\u8d26\u53f7 \u00b6 \u542f\u52a8IDEA Tomcat \u00b6 \u914d\u7f6e\u5b8c\u6210\u4e4b\u540e,\u70b9\u51fb\u53f3\u4e0a\u5de5\u5177\u6837\u542f\u52a8\u6309\u94ae\uff0c\u8fd0\u884c\u9879\u76ee\u3002 \u7b49\u5f85\u4e00\u4f1a\uff0c\u67e5\u770b\u8f93\u51fa\u8bb0\u5f55 [INFO] - Tomcat started on port(s): 3001 (http)\uff0c\u4ee3\u8868\u9879\u76ee\u6210\u529f\u542f\u52a8 \u6253\u5f00\u6d4f\u89c8\u5668\u8f93\u5165http://localhost:3001,\u9875\u9762\u6b63\u5e38\u6253\u5f00\u3002","title":"MAVEN\u73af\u5883\u5b89\u88c5\u53caIDEA\u9879\u76ee\u914d\u7f6e"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#mavenidea","text":"","title":"MAVEN\u73af\u5883\u5b89\u88c5\u53caIDEA\u9879\u76ee\u914d\u7f6e"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#maven","text":"","title":"\u914d\u7f6eMAVEN\u73af\u5883"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#maven_1","text":"windows\u7cfb\u7edf\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u538b\u7f29\u5305\uff1a Maven\u6700\u65b0\u7248\u4e0b\u5730\u5730\u5740 \u3001 3.6\u7248\u4e0b\u8f7d\u5730\u5740 \u5c06\u4e0b\u8f7d\u538b\u7f29\u5305\u4fdd\u5b58\u5230IDEA\u7684\u5b89\u88c5\u76ee\u5f55(\u975e\u5fc5\u987b\uff0c\u6839\u636e\u81ea\u5df1\u7684\u4e60\u60ef\u6765\u9009\u62e9\u76ee\u5f55),\u6253\u5f00\u538b\u7f29\u5305\uff0c\u9009\u62e9\u91cc\u9762\u7684\u6839\u8def\u5f84\u8fdb\u884c\u89e3\u538b\u3002 \u89e3\u538b\u4e4b\u540e\u7684\u6587\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a \u914d\u7f6emaven\u955c\u50cf\u5730\u5740\u548c\u672c\u5730\u4ed3\u5e93\u8def\u5f84 : <mirror> <id> nexus-aliyun </id> <mirrorOf> * </mirrorOf> <name> Nexus aliyun </name> <url> http://maven.aliyun.com/nexus/content/groups/public </url> </mirror>","title":"\u4e0b\u8f7d\u3001\u89e3\u538bmaven\u5305"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#_1","text":"\u914d\u7f6eMAVEN_HOME \u5b89\u88c5\u76ee\u5f55\u5047\u8bbe\u4e3a\uff1aD:\\maven\\apache-maven-3.5.2\uff0c\u6dfb\u52a0maven\u7684\u73af\u5883\u53d8\u91cf\uff0c\u53d8\u91cf\u540d\u4e3a\uff1aMAVEN_HOM\uff1b\u503c\u4e3a\uff1a D:\\maven\\apache-maven-3.5.2\uff1b \u914d\u7f6epath\u53d8\u91cf\uff0c\u52a0\u4e0a\u5982\u4e0b\u503c\uff1a ;%MAVEN_HOM%\\bin; \u6253\u5f00cmd\u8f93\u5165mvn -v\u547d\u4ee4\uff0c\u67e5\u770bmaven\u73af\u5883\u53d8\u91cf\u662f\u5426\u751f\u6548 Linux\u4e0b\u901a\u8fc7YUM\u5b89\u88c5Maven 3.5 yum install -y yum-utils yum-config-manager --add-repo http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo yum-config-manager --enable epel-apache-maven yum install -y apache-maven","title":"\u914d\u7f6e\u7cfb\u7edf\u73af\u5883\u53d8\u91cf"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#mavenmvn-helpsystem","text":"mvn help:system \u8be5\u547d\u4ee4\u4f1a\u6253\u5370\u51fa\u6240\u6709\u7684Java\u7cfb\u7edf\u5c5e\u6027\u548c\u73af\u5883\u53d8\u91cf,\u5e76\u4e0b\u8f7d\u76f8\u5173jar\u5305;","title":"Maven\u67e5\u770b\u914d\u7f6e\u53d8\u91cf\u547d\u4ee4\uff1amvn help:system"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#idea","text":"","title":"IDEA\u5168\u5c40\u914d\u7f6e"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#maven_2","text":"\u542f\u52a8IDEA,\u6253\u5f00\u754c\u9762\u53f3\u4e0b\u89d2Configure\u83dc\u5355\u7b2c1\u9879Settings. \u641c\u7d22Mavens\u914d\u7f6e\uff0c\u9009\u62e9Build\u76ee\u5f55\u4e0b\u7684Maven,\u66f4\u6539Maven\u4e3b\u76ee\u5f55\u8def\u5f84\uff0c\u9009\u62e9\u4e4b\u524d\u89e3\u538b\u7684\u8def\u5f84\uff0c\u4ee5\u53ca\u914d\u7f6e\u8def\u5f84\uff0c\u672c\u5730\u4ed3\u5e93\u8def\u5f84\u4f1a\u81ea\u52a8\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d","title":"\u914d\u7f6e Maven\u4e3b\u76ee\u5f55"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#jdk","text":"\u542f\u52a8IDEA,\u6253\u5f00\u754c\u9762\u53f3\u4e0b\u89d2Configure\u83dc\u5355\u7b2c3\u9879Structure for new Projects. \u8fdb\u5165\u5e73\u53f0\u914d\u7f6e\u9009\u62e9SDKs,\u6dfb\u52a01.8\u7248\u672cjdk\uff0c\u9009\u62e9\u5b89\u88c5\u4e3b\u8def\u5f84\u5373\u53ef \u518d\u9009\u62e9Project\u914d\u7f6e\uff0c\u9009\u62e9\u521a\u6dfb\u52a0\u76841.8\u7248\u672cjdk","title":"\u914d\u7f6e\u9879\u76eeJDK"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#spring-boot","text":"","title":"\u9879\u76ee\u542f\u52a8\uff08Spring Boot)"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#_2","text":"\u542f\u52a8IDEA,\u9009\u62e9Open or Import \u83dc\u5355\u5bfc\u5165\u9879\u76ee(\u63d0\u524d\u5c06\u9879\u76ee\u514b\u9686\u5230\u672c\u5730https://gitee.com/jldev/jianghan_university.git) \u901a\u8fc7maven\u5b89\u88c5\u9879\u76ee\u4f9d\u8d56\u5305,\u8fdb\u5165IDEA,\u6253\u5f00\u53f3\u4fa7maven\u5de5\u5177\u7a97\u53e3\uff0c\u70b9\u51fbLifecycle--install\uff0c\u901a\u8fc7\u8f93\u51fa\u65e5\u5fd7\u53ef\u4ee5\u770b\u5230\u4e0b\u8f7d\u5730\u5740\u5df2\u7ecf\u662f\u4e4b\u524d\u914d\u7f6e\u7684\u963f\u91cc\u4ed3\u5e93\u5730\u5740\uff1b\u4f9d\u8d56\u5168\u90e8\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u63d0\u793aBuild SUCCESS\u4ee3\u8868\u901a\u8fc7Maven\u6784\u5efa\u6210\u529f\uff0c\u4f9d\u6b21\u5c06\u5176\u5b83\u6a21\u5757\u8fdb\u884c\u6784\u5efa(web\u6a21\u5757).","title":"\u5bfc\u5165\u3001\u6784\u5efa\u9879\u76ee"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#webredismysql","text":"","title":"\u914d\u7f6eweb\u670d\u52a1\u7aef\u53e3\uff0cRedis\u5730\u5740\uff0cMysql\u5730\u5740\u8d26\u53f7"},{"location":"1.Java/01MAVEN%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.html#idea-tomcat","text":"\u914d\u7f6e\u5b8c\u6210\u4e4b\u540e,\u70b9\u51fb\u53f3\u4e0a\u5de5\u5177\u6837\u542f\u52a8\u6309\u94ae\uff0c\u8fd0\u884c\u9879\u76ee\u3002 \u7b49\u5f85\u4e00\u4f1a\uff0c\u67e5\u770b\u8f93\u51fa\u8bb0\u5f55 [INFO] - Tomcat started on port(s): 3001 (http)\uff0c\u4ee3\u8868\u9879\u76ee\u6210\u529f\u542f\u52a8 \u6253\u5f00\u6d4f\u89c8\u5668\u8f93\u5165http://localhost:3001,\u9875\u9762\u6b63\u5e38\u6253\u5f00\u3002","title":"\u542f\u52a8IDEA Tomcat"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html","text":"JavaWeb\u9879\u76ee\u90e8\u7f72\u5230tomcat \u00b6 \u4e00\u3001\u73af\u5883\u914d\u7f6e \u00b6 \u5f00\u53d1IDE:\u5b89\u88c5IntelliJ IDEA 2020.1\u6700\u7ec8\u7248 JDK\u7248\u672c:1.8 Maven\u7248\u672c:3.6+ \u73af\u5883\u914d\u7f6e\u8981\u6c42: \u914d\u7f6eJava\u548cMvn\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u914d\u7f6eMaven\u955c\u50cf\u548c\u4ed3\u5e93\u76ee\u5f55 IDEA\u9879\u76ee\u5bfc\u5165\u5168\u5c40\u914d\u7f6e\u53caSDK\u7248\u672c\u914d\u7f6e \u4e8c\u3001\u521b\u5efa\u539f\u578b\u793a\u4f8b\u9879\u76ee. \u00b6 1.\u76f8\u5173\u914d\u7f6e\u5b8c\u6210\u4e4b\u540e,\u6253\u5f00IDEA,\u6309\u64cd\u4f5c\u987a\u5e8f\u521b\u5efa\u65b0\u7684webapp\u9879\u76ee,\u65b0\u9879\u76ee\u91c7\u7528IDEA\u81ea\u5e26\u7684\u539f\u578b\u793a\u4f8b: maven-archetype-webapp ,\u70b9\u51fb\u4e0b\u4e00\u6b65, 2.\u586b\u5199\u9879\u76ee\u540d\u79f0\u548c\u9879\u76ee\u5b58\u653e\u5730\u5740\uff0c\u914d\u7f6e\u9879\u76eeGroupId\u3001ArticfactId\u4ee5\u53ca\u7248\u672cVersion,\u70b9\u51fb\u4e0b\u4e00\u6b65 3.\u914d\u7f6eMaven\u76ee\u5f55\u53ca\u76f8\u5173\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4f1a\u7ee7\u627f\u5168\u5c40\u914d\u7f6e\uff0c\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\uff0c\u70b9\u51fb\u5b8c\u6210 4.\u9879\u76ee\u521b\u5efa\u4e4b\u540e\uff0c\u6253\u5f00\u5de5\u5177\u680fProject Stucture\u6309\u94ae,\u6253\u5f00Project Settings---->Modules\u5e76\u914d\u7f6e\u9879\u76ee\u76ee\u5f55\u5c5e\u6027 \u65b0\u5efajava\u548cresources\u6587\u4ef6\u5939 \u628ajava\u6587\u4ef6\u5939\u8bbe\u7f6e\u4e3aSources\uff0c\u7528\u4e8e\u4fdd\u5b58java\u4ee3\u7801\uff0cMark as\u8bbe\u7f6e\u5b8c\u6210\u540e\u6587\u4ef6\u5939\u4f1a\u53d8\u6210\u84dd\u8272 recources\u6587\u4ef6\u5939\uff1a\u4e00\u822c\u7528\u6765\u5b58\u653e\u4e00\u4e9b\u8d44\u6e90\u6587\u4ef6,Mark\u4e4b\u540e\u6587\u4ef6\u5939\u53d8\u6210\u7d2b\u8272 webapp\u6587\u4ef6\u5939\uff1a\u7528\u6765\u5b58\u653eweb\u914d\u7f6e\u6587\u4ef6\u4ee5\u53cajsp\u9875\u9762\u7b49 \u6ce8\uff1atarget\u76ee\u5f55\u662f\u5728maven\u6253\u5305\u7684\u65f6\u5019\u624d\u4f1a\u751f\u6210\u7684\uff0c\u4e00\u5f00\u59cb\u662f\u6ca1\u6709\u8fd9\u4e2a\u76ee\u5f55\u7684\uff0c\u5c5e\u4e8eexcluded\u76ee\u5f55 5.\u76ee\u5f55\u914d\u7f6e\u5b8c\u6210\u540e\u7684\u9879\u76ee\u7ed3\u6784\u5982\u56fe\u6240\u793a: \u4e09\u3001IDEA\u914d\u7f6eTomcat\u670d\u52a1\u5668 \u00b6 1.\u521b\u5efa\u5b8c\u9879\u76ee\u4e4b\u540e\uff0c\u70b9\u51fb\u5de5\u5177\u680fEdit Configurations\uff0c\u914d\u7f6eTomcat,\u9ed8\u8ba4\u65e0\u4efb\u4f55\u914d\u7f6e 2.\u70b9\u51fb\u52a0\u53f7\uff0c\u6dfb\u52a0\u65b0\u914d\u7f6e\uff1aTomcat Server\u2192Local 3.\u914d\u7f6eTomcat\u670d\u52a1\u5668(\u63d0\u524d\u4ece\u5b98\u7f51\u4e0b\u8f7dTomcat \u7248\u672c8.5+\u5230\u672c\u5730\u76ee\u5f55),\u9009\u62e9\u6839\u76ee\u5f55\u5373\u53ef 4.Tomcat\u670d\u52a1\u5668\u6dfb\u52a0\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u914d\u7f6ejava\u7248\u672c\u53caweb\u670d\u52a1\u8bbf\u95ee\u7aef\u53e3(\u4e0e\u672c\u673a\u4e0d\u51b2\u7a81\u5373\u53ef\uff0c\u672c\u793a\u4f8b\u75288124\u7aef\u53e3) \u914d\u7f6etomcat \u542f\u52a8\u9879\u76ee\u7684Artifact,\u91c7\u7528war\u5305\u7684\u65b9\u5f0f\u8fdb\u884c\u90e8\u7f72 \u56db\u3001Maven\u6253\u5305\u6784\u5efa\u9879\u76ee \u00b6 1.\u6253\u5f00\u53f3\u4fa7Maven\u7a97\u53e3\uff0c\u70b9\u51fbLifecycle--->verify---\u53cc\u51fb\u6216\u8fd0\u884cRun Maven build 2.\u9a8c\u8bc1\u9879\u76ee\u5305\u662f\u5426\u80fd\u6b63\u5e38\u7f16\u8bd1\u548c\u6784\u5efa 3.\u63a7\u5236\u53f0\u8f93\u51fa\u65e5\u5fd7\u663e\u793a\u6210\u529f\u6784\u5efawar\u5305\u7684\u8def\u5f84 4.\u9879\u76ee\u7684target\u76ee\u5f55\u4f1a\u663e\u793a\u6784\u5efa\u597d\u7684\u76f8\u5173\u6587\u4ef6 \u4e94\u3001\u542f\u52a8web\u9879\u76ee \u00b6 1.\u5c06\u751f\u6210\u597d\u7684war\u6587\u4ef6\u590d\u5236\u5230tomcat\u4e0b\u7684webaps\u76ee\u5f55\u4e0b 2.\u70b9\u51fb\u5de5\u5177\u680f\u4e09\u89d2\u5f62\u542f\u52a8Tomcat \u670d\u52a1\u5668\uff0c\u4f1a\u81ea\u52a8\u542f\u52a8\u4e4b\u524d\u914d\u7f6e\u597d\u7684\u6d4f\u89c8\u5668\uff0c\u5e76\u6253\u5f00\u8bbf\u95ee\u5730\u5740,\u6210\u529f\u663e\u793aweb\u9875\u9762. \u516d\u3001\u65e5\u5fd7\u4e71\u7801\u89e3\u51b3 \u00b6 1.\u4e71\u7801\u7684\u5730\u65b9 2.\u89e3\u51b3\u65b9\u6cd5 \u6253\u5f00Tomcat\u5b89\u88c5\u8def\u5f84\u7684tomcat/conf/\u76ee\u5f55\u4e0b\u7684\u4fee\u6539logging.properties Output\u4e71\u7801\u89e3\u51b3 \u627e\u5230java.util.logging.ConsoleHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #java.util.logging.ConsoleHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK java.util.logging.ConsoleHandler.encoding = GBK Tomcat Localhost Log \u4e71\u7801\u89e3\u51b3 \u627e\u5230localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK localhost.org.apache.juli.AsyncFileHandler.encoding = GBK Tomcat Catania Log \u4e71\u7801\u89e3\u51b3 \u627e\u5230catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK catalina.org.apache.juli.AsyncFileHandler.encoding = GBK","title":"JavaWeb\u9879\u76ee\u90e8\u7f72\u5230tomcat"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#javawebtomcat","text":"","title":"JavaWeb\u9879\u76ee\u90e8\u7f72\u5230tomcat"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#_1","text":"\u5f00\u53d1IDE:\u5b89\u88c5IntelliJ IDEA 2020.1\u6700\u7ec8\u7248 JDK\u7248\u672c:1.8 Maven\u7248\u672c:3.6+ \u73af\u5883\u914d\u7f6e\u8981\u6c42: \u914d\u7f6eJava\u548cMvn\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u914d\u7f6eMaven\u955c\u50cf\u548c\u4ed3\u5e93\u76ee\u5f55 IDEA\u9879\u76ee\u5bfc\u5165\u5168\u5c40\u914d\u7f6e\u53caSDK\u7248\u672c\u914d\u7f6e","title":"\u4e00\u3001\u73af\u5883\u914d\u7f6e"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#_2","text":"1.\u76f8\u5173\u914d\u7f6e\u5b8c\u6210\u4e4b\u540e,\u6253\u5f00IDEA,\u6309\u64cd\u4f5c\u987a\u5e8f\u521b\u5efa\u65b0\u7684webapp\u9879\u76ee,\u65b0\u9879\u76ee\u91c7\u7528IDEA\u81ea\u5e26\u7684\u539f\u578b\u793a\u4f8b: maven-archetype-webapp ,\u70b9\u51fb\u4e0b\u4e00\u6b65, 2.\u586b\u5199\u9879\u76ee\u540d\u79f0\u548c\u9879\u76ee\u5b58\u653e\u5730\u5740\uff0c\u914d\u7f6e\u9879\u76eeGroupId\u3001ArticfactId\u4ee5\u53ca\u7248\u672cVersion,\u70b9\u51fb\u4e0b\u4e00\u6b65 3.\u914d\u7f6eMaven\u76ee\u5f55\u53ca\u76f8\u5173\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4f1a\u7ee7\u627f\u5168\u5c40\u914d\u7f6e\uff0c\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\uff0c\u70b9\u51fb\u5b8c\u6210 4.\u9879\u76ee\u521b\u5efa\u4e4b\u540e\uff0c\u6253\u5f00\u5de5\u5177\u680fProject Stucture\u6309\u94ae,\u6253\u5f00Project Settings---->Modules\u5e76\u914d\u7f6e\u9879\u76ee\u76ee\u5f55\u5c5e\u6027 \u65b0\u5efajava\u548cresources\u6587\u4ef6\u5939 \u628ajava\u6587\u4ef6\u5939\u8bbe\u7f6e\u4e3aSources\uff0c\u7528\u4e8e\u4fdd\u5b58java\u4ee3\u7801\uff0cMark as\u8bbe\u7f6e\u5b8c\u6210\u540e\u6587\u4ef6\u5939\u4f1a\u53d8\u6210\u84dd\u8272 recources\u6587\u4ef6\u5939\uff1a\u4e00\u822c\u7528\u6765\u5b58\u653e\u4e00\u4e9b\u8d44\u6e90\u6587\u4ef6,Mark\u4e4b\u540e\u6587\u4ef6\u5939\u53d8\u6210\u7d2b\u8272 webapp\u6587\u4ef6\u5939\uff1a\u7528\u6765\u5b58\u653eweb\u914d\u7f6e\u6587\u4ef6\u4ee5\u53cajsp\u9875\u9762\u7b49 \u6ce8\uff1atarget\u76ee\u5f55\u662f\u5728maven\u6253\u5305\u7684\u65f6\u5019\u624d\u4f1a\u751f\u6210\u7684\uff0c\u4e00\u5f00\u59cb\u662f\u6ca1\u6709\u8fd9\u4e2a\u76ee\u5f55\u7684\uff0c\u5c5e\u4e8eexcluded\u76ee\u5f55 5.\u76ee\u5f55\u914d\u7f6e\u5b8c\u6210\u540e\u7684\u9879\u76ee\u7ed3\u6784\u5982\u56fe\u6240\u793a:","title":"\u4e8c\u3001\u521b\u5efa\u539f\u578b\u793a\u4f8b\u9879\u76ee."},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#ideatomcat","text":"1.\u521b\u5efa\u5b8c\u9879\u76ee\u4e4b\u540e\uff0c\u70b9\u51fb\u5de5\u5177\u680fEdit Configurations\uff0c\u914d\u7f6eTomcat,\u9ed8\u8ba4\u65e0\u4efb\u4f55\u914d\u7f6e 2.\u70b9\u51fb\u52a0\u53f7\uff0c\u6dfb\u52a0\u65b0\u914d\u7f6e\uff1aTomcat Server\u2192Local 3.\u914d\u7f6eTomcat\u670d\u52a1\u5668(\u63d0\u524d\u4ece\u5b98\u7f51\u4e0b\u8f7dTomcat \u7248\u672c8.5+\u5230\u672c\u5730\u76ee\u5f55),\u9009\u62e9\u6839\u76ee\u5f55\u5373\u53ef 4.Tomcat\u670d\u52a1\u5668\u6dfb\u52a0\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u914d\u7f6ejava\u7248\u672c\u53caweb\u670d\u52a1\u8bbf\u95ee\u7aef\u53e3(\u4e0e\u672c\u673a\u4e0d\u51b2\u7a81\u5373\u53ef\uff0c\u672c\u793a\u4f8b\u75288124\u7aef\u53e3) \u914d\u7f6etomcat \u542f\u52a8\u9879\u76ee\u7684Artifact,\u91c7\u7528war\u5305\u7684\u65b9\u5f0f\u8fdb\u884c\u90e8\u7f72","title":"\u4e09\u3001IDEA\u914d\u7f6eTomcat\u670d\u52a1\u5668"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#maven","text":"1.\u6253\u5f00\u53f3\u4fa7Maven\u7a97\u53e3\uff0c\u70b9\u51fbLifecycle--->verify---\u53cc\u51fb\u6216\u8fd0\u884cRun Maven build 2.\u9a8c\u8bc1\u9879\u76ee\u5305\u662f\u5426\u80fd\u6b63\u5e38\u7f16\u8bd1\u548c\u6784\u5efa 3.\u63a7\u5236\u53f0\u8f93\u51fa\u65e5\u5fd7\u663e\u793a\u6210\u529f\u6784\u5efawar\u5305\u7684\u8def\u5f84 4.\u9879\u76ee\u7684target\u76ee\u5f55\u4f1a\u663e\u793a\u6784\u5efa\u597d\u7684\u76f8\u5173\u6587\u4ef6","title":"\u56db\u3001Maven\u6253\u5305\u6784\u5efa\u9879\u76ee"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#web","text":"1.\u5c06\u751f\u6210\u597d\u7684war\u6587\u4ef6\u590d\u5236\u5230tomcat\u4e0b\u7684webaps\u76ee\u5f55\u4e0b 2.\u70b9\u51fb\u5de5\u5177\u680f\u4e09\u89d2\u5f62\u542f\u52a8Tomcat \u670d\u52a1\u5668\uff0c\u4f1a\u81ea\u52a8\u542f\u52a8\u4e4b\u524d\u914d\u7f6e\u597d\u7684\u6d4f\u89c8\u5668\uff0c\u5e76\u6253\u5f00\u8bbf\u95ee\u5730\u5740,\u6210\u529f\u663e\u793aweb\u9875\u9762.","title":"\u4e94\u3001\u542f\u52a8web\u9879\u76ee"},{"location":"1.Java/02JavaWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat.html#_3","text":"1.\u4e71\u7801\u7684\u5730\u65b9 2.\u89e3\u51b3\u65b9\u6cd5 \u6253\u5f00Tomcat\u5b89\u88c5\u8def\u5f84\u7684tomcat/conf/\u76ee\u5f55\u4e0b\u7684\u4fee\u6539logging.properties Output\u4e71\u7801\u89e3\u51b3 \u627e\u5230java.util.logging.ConsoleHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #java.util.logging.ConsoleHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK java.util.logging.ConsoleHandler.encoding = GBK Tomcat Localhost Log \u4e71\u7801\u89e3\u51b3 \u627e\u5230localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK localhost.org.apache.juli.AsyncFileHandler.encoding = GBK Tomcat Catania Log \u4e71\u7801\u89e3\u51b3 \u627e\u5230catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u5c06\u5176 \u6ce8\u91ca\u6389 #catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8 \u6216\u8005\u5c06 UTF-8\u6539\u4e3aGBK catalina.org.apache.juli.AsyncFileHandler.encoding = GBK","title":"\u516d\u3001\u65e5\u5fd7\u4e71\u7801\u89e3\u51b3"},{"location":"1.Java/Deploy.html","text":"Spring Boot\u6253\u5305\u90e8\u7f72\u7bc7 \u00b6 Jar\u5305\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u4f9d\u8d56\u5305\u5206\u5f00\u6253\u5305 \u00b6 \u7531\u4e8e\u6bcf\u6b21\u4ee5jar\u5305\u65b9\u5f0f\u90e8\u7f72\u4f1a\u6709\u4e0a\u9762\u8bf4\u7684\u7f3a\u70b9\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06jar\u5305\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u4f9d\u8d56\u5305\u5206\u5f00\u6253\u5305\u3002\u5206\u5f00\u6253\u5305\u540e\uff0c\u6709\u5982\u4e0b\u597d\u5904\uff1a 1\u3001\u53ef\u4ee5\u5b9e\u73b0\u5f53\u4f9d\u8d56\u5305\u6709\u53d8\u5316\u65f6\uff0c\u624d\u91cd\u65b0\u6253\u5305\u4f9d\u8d56\u5305 2\u3001\u914d\u7f6e\u6587\u4ef6\u4e5f\u53ef\u4ee5\u4fee\u6539 3\u3001\u7531\u4e8e\u4f9d\u8d56\u5305\u548cjar\u5305\u5206\u79bb\uff0c\u53ef\u4ee5\u51cf\u5c11jar\u6587\u4ef6\u5927\u5c0f\u3002jar\u6587\u4ef6\u51cf\u5c11\uff0c\u53ef\u4ee5\u7f29\u77ed\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u7684\u65f6\u95f4 \u7b2c\u4e00\u6b65\uff1apom\u6587\u4ef6\u4fee\u6539\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.jltechcn </groupId> <artifactId> jhdxccip </artifactId> <packaging> pom </packaging> <version> 1.0-SNAPSHOT </version> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <jdk.version> 1.8 </jdk.version> <maven.test.skip> true </maven.test.skip> </properties> <dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 1.5.10.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <modules> <module> web </module> </modules> <!-- \u6784\u5efa\u53d1\u5e03\u5305\uff0c\u5c06tar,lib,resource,properties\u914d\u7f6e\u5206\u79bb\u6784\u5efa --> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <source> ${jdk.version} </source> <target> ${jdk.version} </target> <compilerVersion> ${jdk.version} </compilerVersion> <encoding> UTF-8 </encoding> </configuration> </plugin> <!-- \u6784\u5efajar\u5305--> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> 3.2.0 </version> <configuration> <excludes> <exclude> *.properties </exclude> <exclude> *.yml </exclude> </excludes> <archive> <manifest> <!-- \u4e3a\u4f9d\u8d56\u5305\u6dfb\u52a0\u8def\u5f84, \u8fd9\u4e9b\u8def\u5f84\u4f1a\u5199\u5728MANIFEST\u6587\u4ef6\u7684Class-Path\u4e0b --> <mainClass> com.jltechcn.core.SpringApplications </mainClass> <addClasspath> true </addClasspath> <classpathPrefix> lib/ </classpathPrefix> <!-- \u6253\u5305\u65f6 MANIFEST.MF\u6587\u4ef6\u4e0d\u8bb0\u5f55\u7684\u65f6\u95f4\u6233\u7248\u672c --> <useUniqueVersions> false </useUniqueVersions> </manifest> <manifestEntries> <!-- \u5728Class-Path\u4e0b\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84 --> <Class-Path> resources/ </Class-Path> </manifestEntries> </archive> </configuration> </plugin> <!-- \u6784\u5efaresources\u6587\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-resources-plugin </artifactId> <version> 3.2.0 </version> <executions> <execution> <id> copy-properties </id> <phase> process-sources </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${basedir}/target/resources </outputDirectory> <resources> <resource> <directory> ${basedir}/src/main/resources </directory> </resource> </resources> </configuration> </execution> </executions> </plugin> <!-- \u6784\u5efa\u4f9d\u8d56\u5305\u6587\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> copy </id> <phase> package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> target/lib/ </outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> \u7b2c\u4e8c\u6b65\uff1a\u5728idea\u4e2dTerminal\u63a7\u5236\u53f0\u6267\u884cmaven\u6253\u5305\u547d\u4ee4 mvn clean package -Dmaven.test.skip = true \u547d\u4ee4\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5728target\u76ee\u5f55\u4e0b\u751f\u6210\u4e86jar\u5305\u3001config\u3001lib\u4e09\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\uff1a \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528xftp\u5c06jar\u5305\u4e0a\u4f20\u5230\u670d\u52a1\u5668/usr/local/springboot-helloworld/deploy\u76ee\u5f55\u4e0b \u7b2c\u56db\u6b65\uff1a\u8fd0\u884cjar\u5305 \u5148\u5207\u6362\u5230jar\u5305\u6240\u5728\u76ee\u5f55\uff1a cd /usr/local/springboot-helloworld/deploy/ springboot\u9ed8\u8ba4\u542f\u52a8\u7aef\u53e3\u4e3a8080\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u5206\u5f00\u6253\u5305\u540e\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u5728application.properties\u6587\u4ef6\u4e2d\u4fee\u6539\u542f\u52a8\u7aef\u53e3\u4e3a3003 \u8fd0\u884cjar: java -jar springboot-helloworld-0.0.1-SNAPSHOT.jar \u5728\u63a7\u5236\u53f0\u53ef\u4ee5\u770b\u5230\u542f\u52a8\u7aef\u53e3\u53d8\u6210\u4e863003\uff0c\u5982\u4e0b\u56feTomcat started on port(s):3003\uff1a \u7b2c\u4e94\u6b65\uff1a\u521b\u5efa\u6570\u636e\u5e93\u5bf9\u5e94\u7684\u5e94\u7528\u8d26\u53f7 \u66f4\u6539\u6743\u9650 \u00b6 \u4f7f\u7528grant all privileges on\u6765\u66f4\u6539\u7528\u6237\u5bf9\u5e94\u67d0\u4e9b\u5e93\u7684\u8fdc\u7a0b\u6743\u9650 \u8bed\u6cd5\u6a21\u677f \u00b6 grant all privileges on \u5e93\u540d.\u8868\u540d to '\u7528\u6237\u540d'@'IP\u5730\u5740' identified by '\u5bc6\u7801' with grant option; flush privileges; \u6ce8\uff1a \u00b6 \u5e93\u540d:\u8981\u8fdc\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u540d\u79f0,\u6240\u6709\u7684\u6570\u636e\u5e93\u4f7f\u7528\u201c \u201d \u8868\u540d:\u8981\u8fdc\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u4e0b\u7684\u8868\u7684\u540d\u79f0\uff0c\u6240\u6709\u7684\u8868\u4f7f\u7528\u201c \u201d \u7528\u6237\u540d:\u8981\u8d4b\u7ed9\u8fdc\u7a0b\u8bbf\u95ee\u6743\u9650\u7684\u7528\u6237\u540d\u79f0 IP\u5730\u5740:\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u7684\u7535\u8111\u7684IP\u5730\u5740\uff0c\u6240\u6709\u7684\u5730\u5740\u4f7f\u7528\u201c%\u201d \u5bc6\u7801:\u8981\u8d4b\u7ed9\u8fdc\u7a0b\u8bbf\u95ee\u6743\u9650\u7684\u7528\u6237\u5bf9\u5e94\u4f7f\u7528\u7684\u5bc6\u7801 mysql > create user 'springuser' @ '%' identified by 'password123' ; -- Creates the user mysql > grant all on db_example . * to 'springuser' @ '%' ; -- Gives all privileges to the new user on the newly created database mysql > revoke all on db_example . * from 'springuser' @ '%' ; mysql > grant select , insert , delete , update , alter on db_example . * to 'springuser' @ '%' ; \u7ed9springuser \u6570\u636e\u5e93db_example\u6240\u6709\u6743\u9650 mysql > grant all on db_example . * to 'springuser' @ '%' ; \u7ed9root\u6240\u6709\u7684\u6743\u9650 mysql > grant all privileges on * . * to root @ \"%\" identified by \".\" ; Query OK , 0 rows affected ( 0 . 00 sec ) \u5907\u6ce8\uff1amysql5.7 \u5ba2\u6237\u7aef\u7528IP\u8bbf\u95ee\uff0c\u9700\u8981\u5355\u72ec\u518d\u7ed9root\u8bbe\u7f6e\u4e00\u4e2a\u4e0e\u672c\u5730localhost\u4e0d\u4e00\u6837\u7684\u767b\u9646\u5bc6\u7801 mysql> GRANT ALL ON *.* TO root@'%' IDENTIFIED BY '123456' mysql> flush privileges; \u4fee\u6539\u6e90\u4ee3\u7801User\u5b9e\u4f53\u7c7b\uff0c\u6dfb\u52a0tel\u5b57\u6bb5\uff0c\u91cd\u65b0\u6784\u5efa\u53d1\u5e03\u5305\uff0c\u5e76\u53ea\u4e0a\u4f20jar\u5305\u5230\u670d\u52a1\u5668\uff0c\u505c\u6b62\u4e4b\u524d\u7684\u8fdb\u7a0b\uff0c\u518d\u6b21\u8fd0\u884c\u4e4b\u540e\u53d1\u73b0\uff0c\u6570\u636e\u5b57\u6bb5\u5df2\u66f4\u65b0; \u914d\u7f6e\u6587\u4ef6\u7684\u4f18\u5148\u7ea7 application.properties\u548capplication.yml\u6587\u4ef6\u53ef\u4ee5\u653e\u5728\u4e00\u4e0b\u56db\u4e2a\u4f4d\u7f6e\uff1a \u5916\u7f6e\uff0c\u5728\u76f8\u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u76ee\u5f55\u7684/congfig\u5b50\u76ee\u5f55\u91cc\u3002 \u5916\u7f6e\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u76ee\u5f55\u91cc \u5185\u7f6e\uff0c\u5728config\u5305\u5185 \u5185\u7f6e\uff0c\u5728Classpath\u6839\u76ee\u5f55 \u540c\u6837\uff0c\u8fd9\u4e2a\u5217\u8868\u6309\u7167\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0csrc/main/resources/config\u4e0bapplication.properties\u8986\u76d6src/main/resources\u4e0bapplication.properties\u4e2d\u76f8\u540c\u7684\u5c5e\u6027\uff0c\u5982\u56fe\uff1a \u6b64\u5916\uff0c\u5982\u679c\u4f60\u5728\u76f8\u540c\u4f18\u5148\u7ea7\u4f4d\u7f6e\u540c\u65f6\u6709application.properties\u548capplication.yml\uff0c\u90a3\u4e48application.yml\u91cc\u9762\u7684\u5c5e\u6027\u5c31\u4f1a\u8986\u76d6application.properties\u91cc\u7684\u5c5e\u6027\u3002 Profile-\u591a\u73af\u5883\u914d\u7f6e \u00b6 \u5f53\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u90e8\u7f72\u5230\u4e0d\u540c\u8fd0\u884c\u73af\u5883\u65f6\uff0c\u4e00\u4e9b\u914d\u7f6e\u7ec6\u8282\u901a\u5e38\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6700\u7b80\u5355\u7684\u6bd4\u5982\u65e5\u5fd7\uff0c\u751f\u4ea7\u65e5\u5fd7\u4f1a\u5c06\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3aWARN\u6216\u66f4\u9ad8\u7ea7\u522b\uff0c\u5e76\u5c06\u65e5\u5fd7\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\uff0c\u800c\u5f00\u53d1\u7684\u65f6\u5019\u9700\u8981\u65e5\u5fd7\u7ea7\u522b\u4e3aDEBUG\uff0c\u65e5\u5fd7\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u5373\u53ef\u3002 \u5982\u679c\u6309\u7167\u4ee5\u524d\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u6bcf\u6b21\u53d1\u5e03\u7684\u65f6\u5019\u66ff\u6362\u6389\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u6837\u592a\u9ebb\u70e6\u4e86\uff0cSpring Boot\u7684Profile\u5c31\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u547d\u4ee4\u5e26\u4e0a\u53c2\u6570\u5c31\u641e\u5b9a\u3002 \u8fd9\u91cc\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\uff0c\u53ea\u662f\u7b80\u5355\u7684\u4fee\u6539\u7aef\u53e3\u6765\u6d4b\u8bd5 \u5728Spring Boot\u4e2d\u591a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u540d\u9700\u8981\u6ee1\u8db3 application-{profile}.properties \u7684\u683c\u5f0f\uff0c\u5176\u4e2d {profile} \u5bf9\u5e94\u4f60\u7684\u73af\u5883\u6807\u8bc6\uff0c\u6bd4\u5982\uff1a application-dev.properties\uff1a\u5f00\u53d1\u73af\u5883 application-prod.properties\uff1a\u751f\u4ea7\u73af\u5883 \u60f3\u8981\u4f7f\u7528\u5bf9\u5e94\u7684\u73af\u5883\uff0c\u53ea\u9700\u8981\u5728application.properties\u4e2d\u4f7f\u7528spring.profiles.active\u5c5e\u6027\u6765\u8bbe\u7f6e\uff0c\u503c\u5bf9\u5e94\u4e0a\u9762\u63d0\u5230\u7684{profile}\uff0c\u8fd9\u91cc\u5c31\u662f\u6307dev\u3001prod\u8fd92\u4e2a\u3002 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u547d\u4ee4\u884c\u542f\u52a8\u7684\u65f6\u5019\u5e26\u4e0a\u53c2\u6570\uff1a java -jar xxx.jar --spring.profiles.active=dev \u9664\u4e86spring.profiles.active\u6765\u6fc0\u6d3b\u4e00\u4e2a\u6216\u8005\u591a\u4e2aprofile\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528spring.profiles.include\u6765\u53e0\u52a0profile spring.profiles.active: testdb spring.profiles.include: proddb,prodmq \u524d\u53f0\u6216\u540e\u53f0\u8fd0\u884c #\u524d\u53f0\u8fd0\u884c\uff0c\u5173\u95ed\u7a97\u53e3\u540e\u9000\u51fa java -jar /jar\u5305\u8def\u5f84 #\u540e\u53f0\u8fd0\u884c nohup java -jar /jar\u5305\u8def\u5f84 #\u540e\u53f0\u8fd0\u884c\uff0c\u6307\u5b9a\u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6 nohup java -jar /jar\u5305\u8def\u5f84 > /\u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 nohup java -jar jhdxweb-1.0-SNAPSHOT.jar > ./logs/run.log 2>&1 & \u67e5\u770b\u5e94\u7528\u662f\u5426\u542f\u52a8 \u00b6 netstat -nltp jps -l \u4e00\u952e\u542f\u52a8\u811a\u672c \u00b6 \u65b0\u5efarun_jar.sh\u6587\u4ef6,\u5185\u5bb9\u5982\u4e0b #!/bin/bash #-------------------------------------------- # Springboot\u9879\u76eejar\u5305\u542f\u52a8\u811a\u672c # author\uff1ayichaoo # date:2020/9/18 # description: # \u811a\u672c\u6838\u5fc3\u547d\u4ee4 # \u540e\u53f0\u542f\u52a8\u8fdb\u7a0b:nohup java -jar jhdxweb-1.0-SNAPSHOT.jar > /logs/run.log 2>&1 & #------------------------------------------- ##### \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u548c\u51fd\u6570 \u5f00\u59cb ##### #\u5b9a\u4e49\u5168\u5c40\u53d8\u91cfjar\u5305\u8def\u5f84\u548c\u9879\u76ee\u540d\u79f0(\u4e0d\u5e26\u7248\u672c\u53f7) #\u6839\u636e\u5b9e\u9645\u9879\u76ee\u540d\u79f0\u548c\u8def\u5f84\u8fdb\u884c\u66f4\u6539 PROJECT_NAME = jhdxweb JAR_HOME = /www/java_app/jhdx-web RUN_LOG = logs/run.log #\u5b9a\u4e49\u51fd\u6570\u53d8\u91cf #\u83b7\u53d6\u5f53\u524d\u9879\u76eejar\u5305\u8fdb\u7a0bid funGetJarPID (){ pid = ` jps -l | grep ${ PROJECT_NAME } | awk -F \" \" '{ print $1 }' ` } ##### \u5168\u5c40\u53d8\u91cf\u914d\u7f6e\u533a \u7ed3\u675f ##### echo \"================begin=====================\" echo \"starting.....\" funGetJarPID echo \"[INFO] \u627e\u5230\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305\u8fdb\u7a0b ${ pid } \" while [ ${ pid } ] do echo \"[INFO] \u6b63\u5728\u7ed3\u675f\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305\u8fdb\u7a0bID: ${ pid } .....\" if [ ${ pid } ] then kill -2 ${ pid } fi funGetJarPID done echo \"[INFO] \u8fdb\u7a0b\u5df2\u7ed3\u675f\" echo \"[INFO] \u5f00\u59cb\u91cd\u65b0\u8fd0\u884c ${ JAR_HOME } \u76ee\u5f55\u4e0b ${ PROJECT_NAME } *.jar\u5305\" nohup java -jar ${ JAR_HOME } / ${ PROJECT_NAME } *.jar > ${ JAR_HOME } / ${ RUN_LOG } 2 > & 1 & #\u5982\u679c\u547d\u4ee4\u6267\u884c\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c0 if [ $? == 0 ] then until [ ${ pid } ] do funGetJarPID echo \"[INFO] jar\u5305\u8fdb\u7a0b\u521b\u5efa\u4e2d....\" done echo \"[INFO] \u8fdb\u7a0b\u5df2\u521b\u5efaPID\uff1a ${ pid } \" echo \"[INFO] \u6b63\u5728\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f....\" until [ -n \" $tomcat_running_port \" ] do tail_info = ` tail -2 ${ JAR_HOME } / ${ RUN_LOG } | awk -F \" - \" '{print $2}' ` tomcat_running_port = ` cat ${ JAR_HOME } / ${ RUN_LOG } | grep 'Tomcat started' | awk -F \" - \" '{print $2}' ` echo \"[INFO] ${ tail_info } ...\" sleep 2s done echo \"[INFO] \u6210\u529f\u8fd0\u884c\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305: ${ tomcat_running_port } \" echo \"All success!\" else echo \"[ERROR] \u8fdb\u7a0b\u521b\u5efa\u5931\u8d25!\" fi echo \"================end=====================\"","title":"Spring Boot\u6253\u5305\u90e8\u7f72\u7bc7"},{"location":"1.Java/Deploy.html#spring-boot","text":"","title":"Spring Boot\u6253\u5305\u90e8\u7f72\u7bc7"},{"location":"1.Java/Deploy.html#jar","text":"\u7531\u4e8e\u6bcf\u6b21\u4ee5jar\u5305\u65b9\u5f0f\u90e8\u7f72\u4f1a\u6709\u4e0a\u9762\u8bf4\u7684\u7f3a\u70b9\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06jar\u5305\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u4f9d\u8d56\u5305\u5206\u5f00\u6253\u5305\u3002\u5206\u5f00\u6253\u5305\u540e\uff0c\u6709\u5982\u4e0b\u597d\u5904\uff1a 1\u3001\u53ef\u4ee5\u5b9e\u73b0\u5f53\u4f9d\u8d56\u5305\u6709\u53d8\u5316\u65f6\uff0c\u624d\u91cd\u65b0\u6253\u5305\u4f9d\u8d56\u5305 2\u3001\u914d\u7f6e\u6587\u4ef6\u4e5f\u53ef\u4ee5\u4fee\u6539 3\u3001\u7531\u4e8e\u4f9d\u8d56\u5305\u548cjar\u5305\u5206\u79bb\uff0c\u53ef\u4ee5\u51cf\u5c11jar\u6587\u4ef6\u5927\u5c0f\u3002jar\u6587\u4ef6\u51cf\u5c11\uff0c\u53ef\u4ee5\u7f29\u77ed\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u7684\u65f6\u95f4 \u7b2c\u4e00\u6b65\uff1apom\u6587\u4ef6\u4fee\u6539\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.jltechcn </groupId> <artifactId> jhdxccip </artifactId> <packaging> pom </packaging> <version> 1.0-SNAPSHOT </version> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <jdk.version> 1.8 </jdk.version> <maven.test.skip> true </maven.test.skip> </properties> <dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 1.5.10.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <modules> <module> web </module> </modules> <!-- \u6784\u5efa\u53d1\u5e03\u5305\uff0c\u5c06tar,lib,resource,properties\u914d\u7f6e\u5206\u79bb\u6784\u5efa --> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <source> ${jdk.version} </source> <target> ${jdk.version} </target> <compilerVersion> ${jdk.version} </compilerVersion> <encoding> UTF-8 </encoding> </configuration> </plugin> <!-- \u6784\u5efajar\u5305--> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> 3.2.0 </version> <configuration> <excludes> <exclude> *.properties </exclude> <exclude> *.yml </exclude> </excludes> <archive> <manifest> <!-- \u4e3a\u4f9d\u8d56\u5305\u6dfb\u52a0\u8def\u5f84, \u8fd9\u4e9b\u8def\u5f84\u4f1a\u5199\u5728MANIFEST\u6587\u4ef6\u7684Class-Path\u4e0b --> <mainClass> com.jltechcn.core.SpringApplications </mainClass> <addClasspath> true </addClasspath> <classpathPrefix> lib/ </classpathPrefix> <!-- \u6253\u5305\u65f6 MANIFEST.MF\u6587\u4ef6\u4e0d\u8bb0\u5f55\u7684\u65f6\u95f4\u6233\u7248\u672c --> <useUniqueVersions> false </useUniqueVersions> </manifest> <manifestEntries> <!-- \u5728Class-Path\u4e0b\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84 --> <Class-Path> resources/ </Class-Path> </manifestEntries> </archive> </configuration> </plugin> <!-- \u6784\u5efaresources\u6587\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-resources-plugin </artifactId> <version> 3.2.0 </version> <executions> <execution> <id> copy-properties </id> <phase> process-sources </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${basedir}/target/resources </outputDirectory> <resources> <resource> <directory> ${basedir}/src/main/resources </directory> </resource> </resources> </configuration> </execution> </executions> </plugin> <!-- \u6784\u5efa\u4f9d\u8d56\u5305\u6587\u4ef6 --> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> copy </id> <phase> package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> target/lib/ </outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> \u7b2c\u4e8c\u6b65\uff1a\u5728idea\u4e2dTerminal\u63a7\u5236\u53f0\u6267\u884cmaven\u6253\u5305\u547d\u4ee4 mvn clean package -Dmaven.test.skip = true \u547d\u4ee4\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5728target\u76ee\u5f55\u4e0b\u751f\u6210\u4e86jar\u5305\u3001config\u3001lib\u4e09\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\uff1a \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528xftp\u5c06jar\u5305\u4e0a\u4f20\u5230\u670d\u52a1\u5668/usr/local/springboot-helloworld/deploy\u76ee\u5f55\u4e0b \u7b2c\u56db\u6b65\uff1a\u8fd0\u884cjar\u5305 \u5148\u5207\u6362\u5230jar\u5305\u6240\u5728\u76ee\u5f55\uff1a cd /usr/local/springboot-helloworld/deploy/ springboot\u9ed8\u8ba4\u542f\u52a8\u7aef\u53e3\u4e3a8080\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u5206\u5f00\u6253\u5305\u540e\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u5728application.properties\u6587\u4ef6\u4e2d\u4fee\u6539\u542f\u52a8\u7aef\u53e3\u4e3a3003 \u8fd0\u884cjar: java -jar springboot-helloworld-0.0.1-SNAPSHOT.jar \u5728\u63a7\u5236\u53f0\u53ef\u4ee5\u770b\u5230\u542f\u52a8\u7aef\u53e3\u53d8\u6210\u4e863003\uff0c\u5982\u4e0b\u56feTomcat started on port(s):3003\uff1a \u7b2c\u4e94\u6b65\uff1a\u521b\u5efa\u6570\u636e\u5e93\u5bf9\u5e94\u7684\u5e94\u7528\u8d26\u53f7","title":"Jar\u5305\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u4f9d\u8d56\u5305\u5206\u5f00\u6253\u5305"},{"location":"1.Java/Deploy.html#_1","text":"\u4f7f\u7528grant all privileges on\u6765\u66f4\u6539\u7528\u6237\u5bf9\u5e94\u67d0\u4e9b\u5e93\u7684\u8fdc\u7a0b\u6743\u9650","title":"\u66f4\u6539\u6743\u9650"},{"location":"1.Java/Deploy.html#_2","text":"grant all privileges on \u5e93\u540d.\u8868\u540d to '\u7528\u6237\u540d'@'IP\u5730\u5740' identified by '\u5bc6\u7801' with grant option; flush privileges;","title":"\u8bed\u6cd5\u6a21\u677f"},{"location":"1.Java/Deploy.html#_3","text":"\u5e93\u540d:\u8981\u8fdc\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u540d\u79f0,\u6240\u6709\u7684\u6570\u636e\u5e93\u4f7f\u7528\u201c \u201d \u8868\u540d:\u8981\u8fdc\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u4e0b\u7684\u8868\u7684\u540d\u79f0\uff0c\u6240\u6709\u7684\u8868\u4f7f\u7528\u201c \u201d \u7528\u6237\u540d:\u8981\u8d4b\u7ed9\u8fdc\u7a0b\u8bbf\u95ee\u6743\u9650\u7684\u7528\u6237\u540d\u79f0 IP\u5730\u5740:\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u7684\u7535\u8111\u7684IP\u5730\u5740\uff0c\u6240\u6709\u7684\u5730\u5740\u4f7f\u7528\u201c%\u201d \u5bc6\u7801:\u8981\u8d4b\u7ed9\u8fdc\u7a0b\u8bbf\u95ee\u6743\u9650\u7684\u7528\u6237\u5bf9\u5e94\u4f7f\u7528\u7684\u5bc6\u7801 mysql > create user 'springuser' @ '%' identified by 'password123' ; -- Creates the user mysql > grant all on db_example . * to 'springuser' @ '%' ; -- Gives all privileges to the new user on the newly created database mysql > revoke all on db_example . * from 'springuser' @ '%' ; mysql > grant select , insert , delete , update , alter on db_example . * to 'springuser' @ '%' ; \u7ed9springuser \u6570\u636e\u5e93db_example\u6240\u6709\u6743\u9650 mysql > grant all on db_example . * to 'springuser' @ '%' ; \u7ed9root\u6240\u6709\u7684\u6743\u9650 mysql > grant all privileges on * . * to root @ \"%\" identified by \".\" ; Query OK , 0 rows affected ( 0 . 00 sec ) \u5907\u6ce8\uff1amysql5.7 \u5ba2\u6237\u7aef\u7528IP\u8bbf\u95ee\uff0c\u9700\u8981\u5355\u72ec\u518d\u7ed9root\u8bbe\u7f6e\u4e00\u4e2a\u4e0e\u672c\u5730localhost\u4e0d\u4e00\u6837\u7684\u767b\u9646\u5bc6\u7801 mysql> GRANT ALL ON *.* TO root@'%' IDENTIFIED BY '123456' mysql> flush privileges; \u4fee\u6539\u6e90\u4ee3\u7801User\u5b9e\u4f53\u7c7b\uff0c\u6dfb\u52a0tel\u5b57\u6bb5\uff0c\u91cd\u65b0\u6784\u5efa\u53d1\u5e03\u5305\uff0c\u5e76\u53ea\u4e0a\u4f20jar\u5305\u5230\u670d\u52a1\u5668\uff0c\u505c\u6b62\u4e4b\u524d\u7684\u8fdb\u7a0b\uff0c\u518d\u6b21\u8fd0\u884c\u4e4b\u540e\u53d1\u73b0\uff0c\u6570\u636e\u5b57\u6bb5\u5df2\u66f4\u65b0; \u914d\u7f6e\u6587\u4ef6\u7684\u4f18\u5148\u7ea7 application.properties\u548capplication.yml\u6587\u4ef6\u53ef\u4ee5\u653e\u5728\u4e00\u4e0b\u56db\u4e2a\u4f4d\u7f6e\uff1a \u5916\u7f6e\uff0c\u5728\u76f8\u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u76ee\u5f55\u7684/congfig\u5b50\u76ee\u5f55\u91cc\u3002 \u5916\u7f6e\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u7684\u76ee\u5f55\u91cc \u5185\u7f6e\uff0c\u5728config\u5305\u5185 \u5185\u7f6e\uff0c\u5728Classpath\u6839\u76ee\u5f55 \u540c\u6837\uff0c\u8fd9\u4e2a\u5217\u8868\u6309\u7167\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0csrc/main/resources/config\u4e0bapplication.properties\u8986\u76d6src/main/resources\u4e0bapplication.properties\u4e2d\u76f8\u540c\u7684\u5c5e\u6027\uff0c\u5982\u56fe\uff1a \u6b64\u5916\uff0c\u5982\u679c\u4f60\u5728\u76f8\u540c\u4f18\u5148\u7ea7\u4f4d\u7f6e\u540c\u65f6\u6709application.properties\u548capplication.yml\uff0c\u90a3\u4e48application.yml\u91cc\u9762\u7684\u5c5e\u6027\u5c31\u4f1a\u8986\u76d6application.properties\u91cc\u7684\u5c5e\u6027\u3002","title":"\u6ce8\uff1a"},{"location":"1.Java/Deploy.html#profile-","text":"\u5f53\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u90e8\u7f72\u5230\u4e0d\u540c\u8fd0\u884c\u73af\u5883\u65f6\uff0c\u4e00\u4e9b\u914d\u7f6e\u7ec6\u8282\u901a\u5e38\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6700\u7b80\u5355\u7684\u6bd4\u5982\u65e5\u5fd7\uff0c\u751f\u4ea7\u65e5\u5fd7\u4f1a\u5c06\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3aWARN\u6216\u66f4\u9ad8\u7ea7\u522b\uff0c\u5e76\u5c06\u65e5\u5fd7\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\uff0c\u800c\u5f00\u53d1\u7684\u65f6\u5019\u9700\u8981\u65e5\u5fd7\u7ea7\u522b\u4e3aDEBUG\uff0c\u65e5\u5fd7\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u5373\u53ef\u3002 \u5982\u679c\u6309\u7167\u4ee5\u524d\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u6bcf\u6b21\u53d1\u5e03\u7684\u65f6\u5019\u66ff\u6362\u6389\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u6837\u592a\u9ebb\u70e6\u4e86\uff0cSpring Boot\u7684Profile\u5c31\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u547d\u4ee4\u5e26\u4e0a\u53c2\u6570\u5c31\u641e\u5b9a\u3002 \u8fd9\u91cc\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\uff0c\u53ea\u662f\u7b80\u5355\u7684\u4fee\u6539\u7aef\u53e3\u6765\u6d4b\u8bd5 \u5728Spring Boot\u4e2d\u591a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u540d\u9700\u8981\u6ee1\u8db3 application-{profile}.properties \u7684\u683c\u5f0f\uff0c\u5176\u4e2d {profile} \u5bf9\u5e94\u4f60\u7684\u73af\u5883\u6807\u8bc6\uff0c\u6bd4\u5982\uff1a application-dev.properties\uff1a\u5f00\u53d1\u73af\u5883 application-prod.properties\uff1a\u751f\u4ea7\u73af\u5883 \u60f3\u8981\u4f7f\u7528\u5bf9\u5e94\u7684\u73af\u5883\uff0c\u53ea\u9700\u8981\u5728application.properties\u4e2d\u4f7f\u7528spring.profiles.active\u5c5e\u6027\u6765\u8bbe\u7f6e\uff0c\u503c\u5bf9\u5e94\u4e0a\u9762\u63d0\u5230\u7684{profile}\uff0c\u8fd9\u91cc\u5c31\u662f\u6307dev\u3001prod\u8fd92\u4e2a\u3002 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u547d\u4ee4\u884c\u542f\u52a8\u7684\u65f6\u5019\u5e26\u4e0a\u53c2\u6570\uff1a java -jar xxx.jar --spring.profiles.active=dev \u9664\u4e86spring.profiles.active\u6765\u6fc0\u6d3b\u4e00\u4e2a\u6216\u8005\u591a\u4e2aprofile\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528spring.profiles.include\u6765\u53e0\u52a0profile spring.profiles.active: testdb spring.profiles.include: proddb,prodmq \u524d\u53f0\u6216\u540e\u53f0\u8fd0\u884c #\u524d\u53f0\u8fd0\u884c\uff0c\u5173\u95ed\u7a97\u53e3\u540e\u9000\u51fa java -jar /jar\u5305\u8def\u5f84 #\u540e\u53f0\u8fd0\u884c nohup java -jar /jar\u5305\u8def\u5f84 #\u540e\u53f0\u8fd0\u884c\uff0c\u6307\u5b9a\u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u6587\u4ef6 nohup java -jar /jar\u5305\u8def\u5f84 > /\u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 nohup java -jar jhdxweb-1.0-SNAPSHOT.jar > ./logs/run.log 2>&1 &","title":"Profile-\u591a\u73af\u5883\u914d\u7f6e"},{"location":"1.Java/Deploy.html#_4","text":"netstat -nltp jps -l","title":"\u67e5\u770b\u5e94\u7528\u662f\u5426\u542f\u52a8"},{"location":"1.Java/Deploy.html#_5","text":"\u65b0\u5efarun_jar.sh\u6587\u4ef6,\u5185\u5bb9\u5982\u4e0b #!/bin/bash #-------------------------------------------- # Springboot\u9879\u76eejar\u5305\u542f\u52a8\u811a\u672c # author\uff1ayichaoo # date:2020/9/18 # description: # \u811a\u672c\u6838\u5fc3\u547d\u4ee4 # \u540e\u53f0\u542f\u52a8\u8fdb\u7a0b:nohup java -jar jhdxweb-1.0-SNAPSHOT.jar > /logs/run.log 2>&1 & #------------------------------------------- ##### \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u548c\u51fd\u6570 \u5f00\u59cb ##### #\u5b9a\u4e49\u5168\u5c40\u53d8\u91cfjar\u5305\u8def\u5f84\u548c\u9879\u76ee\u540d\u79f0(\u4e0d\u5e26\u7248\u672c\u53f7) #\u6839\u636e\u5b9e\u9645\u9879\u76ee\u540d\u79f0\u548c\u8def\u5f84\u8fdb\u884c\u66f4\u6539 PROJECT_NAME = jhdxweb JAR_HOME = /www/java_app/jhdx-web RUN_LOG = logs/run.log #\u5b9a\u4e49\u51fd\u6570\u53d8\u91cf #\u83b7\u53d6\u5f53\u524d\u9879\u76eejar\u5305\u8fdb\u7a0bid funGetJarPID (){ pid = ` jps -l | grep ${ PROJECT_NAME } | awk -F \" \" '{ print $1 }' ` } ##### \u5168\u5c40\u53d8\u91cf\u914d\u7f6e\u533a \u7ed3\u675f ##### echo \"================begin=====================\" echo \"starting.....\" funGetJarPID echo \"[INFO] \u627e\u5230\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305\u8fdb\u7a0b ${ pid } \" while [ ${ pid } ] do echo \"[INFO] \u6b63\u5728\u7ed3\u675f\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305\u8fdb\u7a0bID: ${ pid } .....\" if [ ${ pid } ] then kill -2 ${ pid } fi funGetJarPID done echo \"[INFO] \u8fdb\u7a0b\u5df2\u7ed3\u675f\" echo \"[INFO] \u5f00\u59cb\u91cd\u65b0\u8fd0\u884c ${ JAR_HOME } \u76ee\u5f55\u4e0b ${ PROJECT_NAME } *.jar\u5305\" nohup java -jar ${ JAR_HOME } / ${ PROJECT_NAME } *.jar > ${ JAR_HOME } / ${ RUN_LOG } 2 > & 1 & #\u5982\u679c\u547d\u4ee4\u6267\u884c\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c0 if [ $? == 0 ] then until [ ${ pid } ] do funGetJarPID echo \"[INFO] jar\u5305\u8fdb\u7a0b\u521b\u5efa\u4e2d....\" done echo \"[INFO] \u8fdb\u7a0b\u5df2\u521b\u5efaPID\uff1a ${ pid } \" echo \"[INFO] \u6b63\u5728\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f....\" until [ -n \" $tomcat_running_port \" ] do tail_info = ` tail -2 ${ JAR_HOME } / ${ RUN_LOG } | awk -F \" - \" '{print $2}' ` tomcat_running_port = ` cat ${ JAR_HOME } / ${ RUN_LOG } | grep 'Tomcat started' | awk -F \" - \" '{print $2}' ` echo \"[INFO] ${ tail_info } ...\" sleep 2s done echo \"[INFO] \u6210\u529f\u8fd0\u884c\u9879\u76ee ${ PROJECT_NAME } \u7684jar\u5305: ${ tomcat_running_port } \" echo \"All success!\" else echo \"[ERROR] \u8fdb\u7a0b\u521b\u5efa\u5931\u8d25!\" fi echo \"================end=====================\"","title":"\u4e00\u952e\u542f\u52a8\u811a\u672c"},{"location":"1.Java/Maven.html","text":"Welcome to Apache Maven \u00b6 Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information. If you think that Maven could help your project, you can find out more information in the \"About Maven\" section of the navigation. This includes an in-depth description of what Maven is and a list of some of its main features . \u76ee\u5f55 \u00b6 What Maven is ? Document Index Maven in 5 Minutes Maven Users Centre \u00b6 This documentation centre is for those that have decided to use Maven to build their project, and would like to get started quickly, or are already using Maven and would like to add new functionality or fix a problem in their build. Download Maven - Download the latest version of Maven The 5 minute test - Learn how to use Maven in 5 minutes Getting Started Tutorial - An in depth tutorial once you've learned the basics Getting Help - How to get help with Maven Getting Started with Maven \u00b6 Getting Started in 5 Minutes Getting Started in 30 Minutes","title":"Welcome to Apache Maven"},{"location":"1.Java/Maven.html#welcome-to-apache-maven","text":"Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information. If you think that Maven could help your project, you can find out more information in the \"About Maven\" section of the navigation. This includes an in-depth description of what Maven is and a list of some of its main features .","title":"Welcome to Apache Maven"},{"location":"1.Java/Maven.html#_1","text":"What Maven is ? Document Index Maven in 5 Minutes","title":"\u76ee\u5f55"},{"location":"1.Java/Maven.html#maven-users-centre","text":"This documentation centre is for those that have decided to use Maven to build their project, and would like to get started quickly, or are already using Maven and would like to add new functionality or fix a problem in their build. Download Maven - Download the latest version of Maven The 5 minute test - Learn how to use Maven in 5 minutes Getting Started Tutorial - An in depth tutorial once you've learned the basics Getting Help - How to get help with Maven","title":"Maven Users Centre"},{"location":"1.Java/Maven.html#getting-started-with-maven","text":"Getting Started in 5 Minutes Getting Started in 30 Minutes","title":"Getting Started with Maven"},{"location":"1.Linux/1.linux-demo.html","text":"Linux \u57fa\u672c\u547d\u4ee4\u624b\u518c \u00b6 \u7cfb\u7edf\u5de5\u4f5c\u547d\u4ee4 \u00b6 echo\u3001date\u3001reboot\u3001poweroff\u3001wget\u3001ps\u3001 top\u3001pidof\u3001kill\u3001killall\u3001bg\u3001fg 1. echo \u547d\u4ee4\u7528\u4e8e\u5728\u7ec8\u7aef\u663e\u793a\u5b57\u7b26\u4e32\u6216\u53d8\u91cf\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cecho [\u5b57\u7b26\u4e32 | \u53d8\u91cf]\u201d \u5c06echo\u547d\u4ee4\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u7ec8\u7aef\uff1a [liuyichao@localhost Desktop]$ echo welcomelinux welcomelinux \u7528echo\u547d\u4ee4\u67e5\u770bSHELL\u53d8\u91cf\u7684\u503c\uff08\u524d\u9762\u6709$\u7b26\u53f7\uff09\uff1a [liuyichao@localhost Desktop]$ echo $SHELL /bin/========bash======== \u67e5\u770b\u672c\u673a\u4e3b\u673a\u540d\uff1a [liuyichao@localhost Desktop]$ echo $HOSTNAME localhost.localdomain date \u547d\u4ee4\u7528\u4e8e\u663e\u793a/\u8bbe\u7f6e\u7cfb\u7edf\u7684\u65f6\u95f4\u6216\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a\uff1a\"date [\u9009\u9879] [+\u6307\u5b9a\u7684\u683c\u5f0f]\"\u3002 \u5f3a\u5927\u7684date\u547d\u4ee4\u80fd\u591f\u6309\u7167\u6307\u5b9a\u683c\u5f0f\u663e\u793a\u7cfb\u7edf\u7684\u65f6\u95f4\u6216\u65e5\u671f\uff0c\u53ea\u9700\u952e\u5165\"+\"\u53f7\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u6307\u5b9a\u5176\u683c\u5f0f\uff0c\u8be6\u7ec6\u683c\u5f0f\u5982\u4e0b\uff1a \u53c2\u6570 \u4f5c\u7528 %t \u8df3\u683c[TAB\u952e] %H \u5c0f\u65f6(00-23) %I \u5c0f\u65f6(01-12) %M \u5206\u949f(00-59) %S \u79d2\uff0800-60\uff09 %X \u76f8\u5f53\u4e8e%H:%M:%S %Z \u663e\u793a\u65f6\u533a %p \u663e\u793a\u672c\u5730AM\u6216PM %A \u661f\u671f\u51e0 (Sunday-Saturday) %a \u661f\u671f\u51e0 (Sun-Sat) %B \u5b8c\u6574\u6708\u4efd (January-December) %b \u7f29\u5199\u6708\u4efd (Jan-Dec) %d \u65e5(01-31) %j \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929(001-366) %m \u6708\u4efd(01-12) %Y \u5b8c\u6574\u7684\u5e74\u4efd \u67e5\u770b\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff1a [liuyichao@localhost Desktop]$ date Thu Jul 14 15:53:49 CST 2016 \u6309\u7167\"\u5e74-\u6708-\u65e5 \u5c0f\u65f6:\u5206\u949f:\u79d2\"\u7684\u683c\u5f0f\uff1a [liuyichao@localhost Desktop]$ date \"+%Y-%m-%d %H:%M:%S\" 2016-07-14 15:56:19 \u8bbe\u7f6e\u7cfb\u7edf\u65f6\u95f4\u4e3a2015\u5e749\u67081\u65e58\u70b9\u534a\uff1a [liuyichao@localhost ~]# date -s \"20150901 8:30:00\" Tue Sep 1 08:30:00 CST 2015 reboot \u547d\u4ee4\u7528\u4e8e\u91cd\u542f\u7cfb\u7edf(\u4ec5root\u7528\u6237\u53ef\u4ee5\u4f7f\u7528)\uff0c\u683c\u5f0f\u4e3a\uff1a\"reboot\"\u3002 poweroff \u547d\u4ee4\u7528\u4e8e\u5173\u95ed\u7cfb\u7edf(\u4ec5root\u7528\u6237\u53ef\u4ee5\u4f7f\u7528)\uff0c\u683c\u5f0f\u4e3a\uff1a\"poweroff\"\u3002 wget \u547d\u4ee4\u7528\u4e8e\u4f7f\u7528\u547d\u4ee4\u884c\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cwget [\u53c2\u6570] \u4e0b\u8f7d\u5730\u5740\u201d\u3002 curl \u547d\u4ee4\u7528\u4e8e\u4f7f\u7528\u547d\u4ee4\u884c\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cwget [\u53c2\u6570] \u4e0b\u8f7d\u5730\u5740\u201d\u3002 \u53c2\u6570 \u4f5c\u7528 -b \u540e\u53f0\u4e0b\u8f7d\u6a21\u5f0f\u3002 -O \u4e0b\u8f7d\u5230\u6307\u5b9a\u76ee\u5f55\u3002 -t \u6700\u5927\u5c1d\u8bd5\u6b21\u6570\u3002 -c \u65ad\u70b9\u7eed\u4f20 -p \u4e0b\u8f7d\u9875\u9762\u5185\u6240\u6709\u8d44\u6e90,\u5305\u62ec\u56fe\u7247\u3001\u89c6\u9891\u7b49\u3002 -r \u9012\u5f52\u4e0b\u8f7d ps (report a snapshot of the current processes)\u547d\u4ee4\u7528\u4e8e\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u72b6\u6001\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cps [\u53c2\u6570] top \u547d\u4ee4\u7528\u4e8e\u76d1\u89c6\u8fdb\u7a0b\u7684\u6d3b\u52a8\u4e0e\u7cfb\u7edf\u8d1f\u8f7d\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ctop\u201d\u3002 pidof \u547d\u4ee4\u7528\u4e8e\u67e5\u8be2\u67d0\u4e2a\u7279\u5b9a\u7a0b\u5e8f\u7684\u8fdb\u7a0bPID\u503c\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cpidof [\u53c2\u6570] [\u7a0b\u5e8f\u540d\u79f0]\u201d kill \u547d\u4ee4\u7528\u4e8e\u7ec8\u6b62\u67d0\u4e2a\u7279\u5b9aPID\u53f7\u7801\u7684\u8fdb\u7a0b\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ckill [\u53c2\u6570] [\u8fdb\u7a0bPID\u53f7]\u201d\u3002 killall \u547d\u4ee4\u7528\u4e8e\u7ec8\u6b62\u67d0\u4e2a\u7279\u5b9a\u540d\u79f0\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ckillall [\u53c2\u6570] [\u8fdb\u7a0b\u540d\u79f0]\u201d \"Ctrl+c\" \u8fdb\u7a0b\u7acb\u5373\u505c\u6b62, \"Ctrl+z\" \uff0c\u5b83\u662f\u5c06\u547d\u4ee4\u7684\u8fdb\u7a0b\u6682\u505c\uff08\u4e5f\u53eb\u6302\u8f7d\u5230\u540e\u53f0\u6216\u6254\u5230\u540e\u53f0\uff09 jobs\u3001bg\u548cfg\u547d\u4ee4 ,==jobs==\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5230\u6240\u6709\u5728\u540e\u53f0\u8fd0\u884c\u7740\u7684\u8fdb\u7a0b,==bg==\u547d\u4ee4\u8ba9\u540e\u53f0\u7684\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c,==fg==\u547d\u4ee4\u5c06\u540e\u53f0\u7684\u8fdb\u7a0b\u518d\u8c03\u56de\u524d\u53f0 mv\u547d\u4ee4 \u00b6 mv\u547d\u4ee4\u662f\u201cmove\u201d\u5355\u8bcd\u7684\u7f29\u5199\uff0c\u5176\u529f\u80fd\u5927\u81f4\u548c\u82f1\u6587\u542b\u4e49\u4e00\u6837\uff0c\u53ef\u4ee5\u79fb\u52a8\u6587\u4ef6\u6216\u5bf9\u5176\u6539\u540d\u3002 \u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528\u9891\u7387\u8d85\u9ad8\u7684\u6587\u4ef6\u7ba1\u7406\u547d\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u7279\u522b\u7559\u610f\u5b83\u4e0e\u590d\u5236\u7684\u533a\u522b\uff1amv\u4e0ecp\u7684\u7ed3\u679c\u4e0d\u540c\u3002mv\u547d\u4ee4\u597d\u50cf\u6587\u4ef6\u201c\u642c\u5bb6\u201d\uff0c\u6587\u4ef6\u540d\u79f0\u53d1\u751f\u6539\u53d8\uff0c\u4f46\u4e2a\u6570\u5e76\u672a\u589e\u52a0\u3002\u800ccp\u547d\u4ee4\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\uff0c\u6587\u4ef6\u4e2a\u6570\u662f\u6709\u589e\u52a0\u7684\u3002 \u8bed\u6cd5\u683c\u5f0f\uff1amv [\u53c2\u6570] \u5e38\u7528\u53c2\u6570\uff1a -i \u82e5\u5b58\u5728\u540c\u540d\u6587\u4ef6\uff0c\u5219\u5411\u7528\u6237\u8be2\u95ee\u662f\u5426\u8986\u76d6 -f \u8986\u76d6\u5df2\u6709\u6587\u4ef6\u65f6\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u63d0\u793a -b \u5f53\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u8986\u76d6\u524d\u4e3a\u5176\u521b\u5efa\u4e00\u4e2a\u5907\u4efd -u \u5f53\u6e90\u6587\u4ef6\u6bd4\u76ee\u6807\u6587\u4ef6\u65b0\uff0c\u6216\u8005\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u624d\u6267\u884c\u79fb\u52a8\u6b64\u64cd\u4f5c \u53c2\u8003\u5b9e\u4f8b \u5c06\u6587\u4ef6file_1\u91cd\u547d\u540d\u4e3afile_2\uff1a [ root@linuxcool ~ ] # mv file_1 file_2 \u5c06\u6587\u4ef6file\u79fb\u52a8\u5230\u76ee\u5f55dir\u4e2d \uff1a [ root@linuxcool ~ ] # mv file /dir \u5c06\u76ee\u5f55dir1\u79fb\u52a8\u76ee\u5f55dir2\u4e2d\uff08\u524d\u63d0\u662f\u76ee\u5f55dir2\u5df2\u5b58\u5728\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u6539\u540d)\uff1a [ root@linuxcool ~ ] # mv /dir1 /dir2 \u5c06\u76ee\u5f55dir1\u4e0b\u7684\u6587\u4ef6\u79fb\u52a8\u5230\u5f53\u524d\u76ee\u5f55\u4e0b\uff1a [ root@linuxcool ~ ] # mv /dir1/* . cp\u547d\u4ee4 \u2013 \u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55 \u00b6 cp\u547d\u4ee4\u53ef\u4ee5\u7406\u89e3\u4e3a\u82f1\u6587\u5355\u8bcdcopy\u7684\u7f29\u5199\uff0c\u5176\u529f\u80fd\u4e3a\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002 cp\u547d\u4ee4\u53ef\u4ee5\u5c06\u591a\u4e2a\u6587\u4ef6\u590d\u5236\u5230\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u540d\u6216\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u76ee\u5f55\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u590d\u5236\u591a\u4e2a\u6587\u4ef6\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u76ee\u5f55\u4e2d\u3002 \u8bed\u6cd5\u683c\u5f0f\uff1a cp [\u53c2\u6570] [\u6587\u4ef6] \u5e38\u7528\u53c2\u6570\uff1a -f \u82e5\u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u76f4\u63a5\u8986\u76d6\u539f\u6587\u4ef6 -i \u82e5\u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u8be2\u95ee\u662f\u5426\u8986\u76d6 -p \u4fdd\u7559\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6240\u6709\u5c5e\u6027 -r \u9012\u5f52\u590d\u5236\u6587\u4ef6\u548c\u76ee\u5f55 -d \u5f53\u590d\u5236\u7b26\u53f7\u8fde\u63a5\u65f6\uff0c\u628a\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u4e5f\u5efa\u7acb\u4e3a\u7b26\u53f7\u8fde\u63a5\uff0c\u5e76\u6307\u5411\u4e0e\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u8fde\u63a5\u7684\u539f\u59cb\u6587\u4ef6\u6216\u76ee\u5f55 -l \u5bf9\u6e90\u6587\u4ef6\u5efa\u7acb\u786c\u8fde\u63a5\uff0c\u800c\u975e\u590d\u5236\u6587\u4ef6 -s \u5bf9\u6e90\u6587\u4ef6\u5efa\u7acb\u7b26\u53f7\u8fde\u63a5\uff0c\u800c\u975e\u590d\u5236\u6587\u4ef6 -b \u8986\u76d6\u5df2\u5b58\u5728\u7684\u6587\u4ef6\u76ee\u6807\u524d\u5c06\u76ee\u6807\u6587\u4ef6\u5907\u4efd -v \u8be6\u7ec6\u663e\u793acp\u547d\u4ee4\u6267\u884c\u7684\u64cd\u4f5c\u8fc7\u7a0b -a \u7b49\u4ef7\u4e8e\u201cdpr\u201d\u9009\u9879 \u53c2\u8003\u5b9e\u4f8b \u590d\u5236\u76ee\u5f55\uff1a [root@linuxcool ~]# cp -R dir1 dir2/ \u5c06\u6587\u4ef6test1\u6539\u540d\u4e3atest2\uff1a [root@linuxcool ~]# cp -f test1 test2 \u590d\u5236\u591a\u4e2a\u6587\u4ef6\uff1a [root@linuxcool ~]# cp -r file1 file2 file3 dir \u4ea4\u4e92\u5f0f\u5730\u5c06\u76ee\u5f55 /usr/linuxcool \u4e2d\u7684\u6240\u6709.c\u6587\u4ef6\u590d\u5236\u5230\u76ee\u5f55 dir \u4e2d\uff1a [root@linuxcool ~]# cp -r /usr/linuxcool/*.c dir","title":"Linux \u57fa\u672c\u547d\u4ee4\u624b\u518c"},{"location":"1.Linux/1.linux-demo.html#linux","text":"","title":"Linux \u57fa\u672c\u547d\u4ee4\u624b\u518c"},{"location":"1.Linux/1.linux-demo.html#_1","text":"echo\u3001date\u3001reboot\u3001poweroff\u3001wget\u3001ps\u3001 top\u3001pidof\u3001kill\u3001killall\u3001bg\u3001fg 1. echo \u547d\u4ee4\u7528\u4e8e\u5728\u7ec8\u7aef\u663e\u793a\u5b57\u7b26\u4e32\u6216\u53d8\u91cf\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cecho [\u5b57\u7b26\u4e32 | \u53d8\u91cf]\u201d \u5c06echo\u547d\u4ee4\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u7ec8\u7aef\uff1a [liuyichao@localhost Desktop]$ echo welcomelinux welcomelinux \u7528echo\u547d\u4ee4\u67e5\u770bSHELL\u53d8\u91cf\u7684\u503c\uff08\u524d\u9762\u6709$\u7b26\u53f7\uff09\uff1a [liuyichao@localhost Desktop]$ echo $SHELL /bin/========bash======== \u67e5\u770b\u672c\u673a\u4e3b\u673a\u540d\uff1a [liuyichao@localhost Desktop]$ echo $HOSTNAME localhost.localdomain date \u547d\u4ee4\u7528\u4e8e\u663e\u793a/\u8bbe\u7f6e\u7cfb\u7edf\u7684\u65f6\u95f4\u6216\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a\uff1a\"date [\u9009\u9879] [+\u6307\u5b9a\u7684\u683c\u5f0f]\"\u3002 \u5f3a\u5927\u7684date\u547d\u4ee4\u80fd\u591f\u6309\u7167\u6307\u5b9a\u683c\u5f0f\u663e\u793a\u7cfb\u7edf\u7684\u65f6\u95f4\u6216\u65e5\u671f\uff0c\u53ea\u9700\u952e\u5165\"+\"\u53f7\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u6307\u5b9a\u5176\u683c\u5f0f\uff0c\u8be6\u7ec6\u683c\u5f0f\u5982\u4e0b\uff1a \u53c2\u6570 \u4f5c\u7528 %t \u8df3\u683c[TAB\u952e] %H \u5c0f\u65f6(00-23) %I \u5c0f\u65f6(01-12) %M \u5206\u949f(00-59) %S \u79d2\uff0800-60\uff09 %X \u76f8\u5f53\u4e8e%H:%M:%S %Z \u663e\u793a\u65f6\u533a %p \u663e\u793a\u672c\u5730AM\u6216PM %A \u661f\u671f\u51e0 (Sunday-Saturday) %a \u661f\u671f\u51e0 (Sun-Sat) %B \u5b8c\u6574\u6708\u4efd (January-December) %b \u7f29\u5199\u6708\u4efd (Jan-Dec) %d \u65e5(01-31) %j \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929(001-366) %m \u6708\u4efd(01-12) %Y \u5b8c\u6574\u7684\u5e74\u4efd \u67e5\u770b\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff1a [liuyichao@localhost Desktop]$ date Thu Jul 14 15:53:49 CST 2016 \u6309\u7167\"\u5e74-\u6708-\u65e5 \u5c0f\u65f6:\u5206\u949f:\u79d2\"\u7684\u683c\u5f0f\uff1a [liuyichao@localhost Desktop]$ date \"+%Y-%m-%d %H:%M:%S\" 2016-07-14 15:56:19 \u8bbe\u7f6e\u7cfb\u7edf\u65f6\u95f4\u4e3a2015\u5e749\u67081\u65e58\u70b9\u534a\uff1a [liuyichao@localhost ~]# date -s \"20150901 8:30:00\" Tue Sep 1 08:30:00 CST 2015 reboot \u547d\u4ee4\u7528\u4e8e\u91cd\u542f\u7cfb\u7edf(\u4ec5root\u7528\u6237\u53ef\u4ee5\u4f7f\u7528)\uff0c\u683c\u5f0f\u4e3a\uff1a\"reboot\"\u3002 poweroff \u547d\u4ee4\u7528\u4e8e\u5173\u95ed\u7cfb\u7edf(\u4ec5root\u7528\u6237\u53ef\u4ee5\u4f7f\u7528)\uff0c\u683c\u5f0f\u4e3a\uff1a\"poweroff\"\u3002 wget \u547d\u4ee4\u7528\u4e8e\u4f7f\u7528\u547d\u4ee4\u884c\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cwget [\u53c2\u6570] \u4e0b\u8f7d\u5730\u5740\u201d\u3002 curl \u547d\u4ee4\u7528\u4e8e\u4f7f\u7528\u547d\u4ee4\u884c\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cwget [\u53c2\u6570] \u4e0b\u8f7d\u5730\u5740\u201d\u3002 \u53c2\u6570 \u4f5c\u7528 -b \u540e\u53f0\u4e0b\u8f7d\u6a21\u5f0f\u3002 -O \u4e0b\u8f7d\u5230\u6307\u5b9a\u76ee\u5f55\u3002 -t \u6700\u5927\u5c1d\u8bd5\u6b21\u6570\u3002 -c \u65ad\u70b9\u7eed\u4f20 -p \u4e0b\u8f7d\u9875\u9762\u5185\u6240\u6709\u8d44\u6e90,\u5305\u62ec\u56fe\u7247\u3001\u89c6\u9891\u7b49\u3002 -r \u9012\u5f52\u4e0b\u8f7d ps (report a snapshot of the current processes)\u547d\u4ee4\u7528\u4e8e\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b\u72b6\u6001\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cps [\u53c2\u6570] top \u547d\u4ee4\u7528\u4e8e\u76d1\u89c6\u8fdb\u7a0b\u7684\u6d3b\u52a8\u4e0e\u7cfb\u7edf\u8d1f\u8f7d\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ctop\u201d\u3002 pidof \u547d\u4ee4\u7528\u4e8e\u67e5\u8be2\u67d0\u4e2a\u7279\u5b9a\u7a0b\u5e8f\u7684\u8fdb\u7a0bPID\u503c\uff0c\u683c\u5f0f\u4e3a\uff1a\u201cpidof [\u53c2\u6570] [\u7a0b\u5e8f\u540d\u79f0]\u201d kill \u547d\u4ee4\u7528\u4e8e\u7ec8\u6b62\u67d0\u4e2a\u7279\u5b9aPID\u53f7\u7801\u7684\u8fdb\u7a0b\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ckill [\u53c2\u6570] [\u8fdb\u7a0bPID\u53f7]\u201d\u3002 killall \u547d\u4ee4\u7528\u4e8e\u7ec8\u6b62\u67d0\u4e2a\u7279\u5b9a\u540d\u79f0\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u683c\u5f0f\u4e3a\uff1a\u201ckillall [\u53c2\u6570] [\u8fdb\u7a0b\u540d\u79f0]\u201d \"Ctrl+c\" \u8fdb\u7a0b\u7acb\u5373\u505c\u6b62, \"Ctrl+z\" \uff0c\u5b83\u662f\u5c06\u547d\u4ee4\u7684\u8fdb\u7a0b\u6682\u505c\uff08\u4e5f\u53eb\u6302\u8f7d\u5230\u540e\u53f0\u6216\u6254\u5230\u540e\u53f0\uff09 jobs\u3001bg\u548cfg\u547d\u4ee4 ,==jobs==\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5230\u6240\u6709\u5728\u540e\u53f0\u8fd0\u884c\u7740\u7684\u8fdb\u7a0b,==bg==\u547d\u4ee4\u8ba9\u540e\u53f0\u7684\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c,==fg==\u547d\u4ee4\u5c06\u540e\u53f0\u7684\u8fdb\u7a0b\u518d\u8c03\u56de\u524d\u53f0","title":"\u7cfb\u7edf\u5de5\u4f5c\u547d\u4ee4"},{"location":"1.Linux/1.linux-demo.html#mv","text":"mv\u547d\u4ee4\u662f\u201cmove\u201d\u5355\u8bcd\u7684\u7f29\u5199\uff0c\u5176\u529f\u80fd\u5927\u81f4\u548c\u82f1\u6587\u542b\u4e49\u4e00\u6837\uff0c\u53ef\u4ee5\u79fb\u52a8\u6587\u4ef6\u6216\u5bf9\u5176\u6539\u540d\u3002 \u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528\u9891\u7387\u8d85\u9ad8\u7684\u6587\u4ef6\u7ba1\u7406\u547d\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u7279\u522b\u7559\u610f\u5b83\u4e0e\u590d\u5236\u7684\u533a\u522b\uff1amv\u4e0ecp\u7684\u7ed3\u679c\u4e0d\u540c\u3002mv\u547d\u4ee4\u597d\u50cf\u6587\u4ef6\u201c\u642c\u5bb6\u201d\uff0c\u6587\u4ef6\u540d\u79f0\u53d1\u751f\u6539\u53d8\uff0c\u4f46\u4e2a\u6570\u5e76\u672a\u589e\u52a0\u3002\u800ccp\u547d\u4ee4\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\uff0c\u6587\u4ef6\u4e2a\u6570\u662f\u6709\u589e\u52a0\u7684\u3002 \u8bed\u6cd5\u683c\u5f0f\uff1amv [\u53c2\u6570] \u5e38\u7528\u53c2\u6570\uff1a -i \u82e5\u5b58\u5728\u540c\u540d\u6587\u4ef6\uff0c\u5219\u5411\u7528\u6237\u8be2\u95ee\u662f\u5426\u8986\u76d6 -f \u8986\u76d6\u5df2\u6709\u6587\u4ef6\u65f6\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u63d0\u793a -b \u5f53\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u8986\u76d6\u524d\u4e3a\u5176\u521b\u5efa\u4e00\u4e2a\u5907\u4efd -u \u5f53\u6e90\u6587\u4ef6\u6bd4\u76ee\u6807\u6587\u4ef6\u65b0\uff0c\u6216\u8005\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u624d\u6267\u884c\u79fb\u52a8\u6b64\u64cd\u4f5c \u53c2\u8003\u5b9e\u4f8b \u5c06\u6587\u4ef6file_1\u91cd\u547d\u540d\u4e3afile_2\uff1a [ root@linuxcool ~ ] # mv file_1 file_2 \u5c06\u6587\u4ef6file\u79fb\u52a8\u5230\u76ee\u5f55dir\u4e2d \uff1a [ root@linuxcool ~ ] # mv file /dir \u5c06\u76ee\u5f55dir1\u79fb\u52a8\u76ee\u5f55dir2\u4e2d\uff08\u524d\u63d0\u662f\u76ee\u5f55dir2\u5df2\u5b58\u5728\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u6539\u540d)\uff1a [ root@linuxcool ~ ] # mv /dir1 /dir2 \u5c06\u76ee\u5f55dir1\u4e0b\u7684\u6587\u4ef6\u79fb\u52a8\u5230\u5f53\u524d\u76ee\u5f55\u4e0b\uff1a [ root@linuxcool ~ ] # mv /dir1/* .","title":"mv\u547d\u4ee4"},{"location":"1.Linux/1.linux-demo.html#cp","text":"cp\u547d\u4ee4\u53ef\u4ee5\u7406\u89e3\u4e3a\u82f1\u6587\u5355\u8bcdcopy\u7684\u7f29\u5199\uff0c\u5176\u529f\u80fd\u4e3a\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002 cp\u547d\u4ee4\u53ef\u4ee5\u5c06\u591a\u4e2a\u6587\u4ef6\u590d\u5236\u5230\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u540d\u6216\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u76ee\u5f55\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u590d\u5236\u591a\u4e2a\u6587\u4ef6\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u76ee\u5f55\u4e2d\u3002 \u8bed\u6cd5\u683c\u5f0f\uff1a cp [\u53c2\u6570] [\u6587\u4ef6] \u5e38\u7528\u53c2\u6570\uff1a -f \u82e5\u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u76f4\u63a5\u8986\u76d6\u539f\u6587\u4ef6 -i \u82e5\u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u8be2\u95ee\u662f\u5426\u8986\u76d6 -p \u4fdd\u7559\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6240\u6709\u5c5e\u6027 -r \u9012\u5f52\u590d\u5236\u6587\u4ef6\u548c\u76ee\u5f55 -d \u5f53\u590d\u5236\u7b26\u53f7\u8fde\u63a5\u65f6\uff0c\u628a\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u4e5f\u5efa\u7acb\u4e3a\u7b26\u53f7\u8fde\u63a5\uff0c\u5e76\u6307\u5411\u4e0e\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u8fde\u63a5\u7684\u539f\u59cb\u6587\u4ef6\u6216\u76ee\u5f55 -l \u5bf9\u6e90\u6587\u4ef6\u5efa\u7acb\u786c\u8fde\u63a5\uff0c\u800c\u975e\u590d\u5236\u6587\u4ef6 -s \u5bf9\u6e90\u6587\u4ef6\u5efa\u7acb\u7b26\u53f7\u8fde\u63a5\uff0c\u800c\u975e\u590d\u5236\u6587\u4ef6 -b \u8986\u76d6\u5df2\u5b58\u5728\u7684\u6587\u4ef6\u76ee\u6807\u524d\u5c06\u76ee\u6807\u6587\u4ef6\u5907\u4efd -v \u8be6\u7ec6\u663e\u793acp\u547d\u4ee4\u6267\u884c\u7684\u64cd\u4f5c\u8fc7\u7a0b -a \u7b49\u4ef7\u4e8e\u201cdpr\u201d\u9009\u9879 \u53c2\u8003\u5b9e\u4f8b \u590d\u5236\u76ee\u5f55\uff1a [root@linuxcool ~]# cp -R dir1 dir2/ \u5c06\u6587\u4ef6test1\u6539\u540d\u4e3atest2\uff1a [root@linuxcool ~]# cp -f test1 test2 \u590d\u5236\u591a\u4e2a\u6587\u4ef6\uff1a [root@linuxcool ~]# cp -r file1 file2 file3 dir \u4ea4\u4e92\u5f0f\u5730\u5c06\u76ee\u5f55 /usr/linuxcool \u4e2d\u7684\u6240\u6709.c\u6587\u4ef6\u590d\u5236\u5230\u76ee\u5f55 dir \u4e2d\uff1a [root@linuxcool ~]# cp -r /usr/linuxcool/*.c dir","title":"cp\u547d\u4ee4 \u2013 \u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55"},{"location":"2.Docker/01DockerHome.html","text":"01.\u5f00\u59cbDocker \u00b6 \u5b98\u7f51\u6307\u5f15 \u00b6 docker\u4e3b\u9875 why-docker docker\u4f7f\u7528\u573a\u666f docker\u6587\u6863 docker\u6982\u89c8 \u5feb\u901f\u5f00\u59cb \u4f7f\u7528docker\u5f00\u53d1 \u4f7f\u7528Docker Docker Desktop-Windows Docker Engine - CentOS(Community) Docker Hub \u73a9\u8f6cDocker 101-tutorial(docker/getting-started) docker\u5b9e\u9a8c\u5ba4 dockersamples \u7b2c\u4e09\u65b9\u6559\u7a0b docker\u6587\u6863 docker\u6982\u89c8 \u5feb\u901f\u5f00\u59cb \u4f7f\u7528docker\u5f00\u53d1 \u6570\u636e\u5b58\u50a8 \u5bb9\u5668\u7f16\u6392 docker\u624b\u518c Docker Engine Docker Compose Docker Machine Registry \u79c1\u6709\u4ed3\u5e93 \u4f7f\u7528Docker\u7ed9\u5f00\u53d1\u56e2\u961f\u5e26\u6765\u7684\u597d\u5904 \u00b6 1.\u4efb\u4f55\u73af\u5883\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u8f6f\u4ef6 \u00b6 \u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458\uff0c\u60a8\u77e5\u9053\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u6700\u68d8\u624b\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u5fc5\u987b\u5904\u7406\u4e0d\u540c\u673a\u5668\u548c\u5e73\u53f0\u4e4b\u95f4\u7684\u73af\u5883\u5dee\u5f02, Docker\u5141\u8bb8\u60a8\u5728\u672c\u5730\u8fd0\u884c\u5bb9\u5668\uff0c\u6d88\u9664\u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u4e4b\u95f4\u4ee5\u53ca\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02 \u3002\u4e0d\u9700\u8981\u5728\u672c\u5730\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\u5f00\u53d1\u73af\u5883\u6240\u9700\u7684\u4e00\u5207\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5bb9\u5668\u5728Docker\u5f15\u64ce\u4e0a\u8fd0\u884c\u3002\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u8bed\u8a00\u6216\u5de5\u5177\uff0c\u60a8\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u672c\u5730\u5305\u542b\u60a8\u7684\u73af\u5883\u3002\u901a\u8fc7 Docker Desktop \u548c Docker Hub \uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u8f6f\u4ef6\u8fdb\u884c\u79fb\u690d\uff0c\u6709\u4e86\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5bb9\u5668\u53ef\u4ee5\u8f7b\u677e\u5730\u8de8\u673a\u5668\u90e8\u7f72\u3002 \u81f3\u4ece\u6709\u4e86 docker ,\u5f00\u53d1\u7684\u5c0f\u4f19\u4f34\u4eec\u53ef\u4ee5\u7406\u76f4\u6c14\u58ee\u7684\u5411\u8fd0\u7ef4\u8bf4\uff1a\u201c\u8f6f\u4ef6\u5728\u6211\u7684\u7535\u8111\u4e0a\u662f\u6b63\u5e38\u8fd0\u884c\u7684!\" 2.\u56e2\u961f\u65b0\u6210\u5458\u5feb\u901f\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u53ca\u6240\u9700\u8981\u7684\u4f9d\u8d56\u670d\u52a1 \u00b6 \u65e0\u8bba\u7ec4\u7ec7\u7684\u89c4\u6a21\u5927\u5c0f\u5982\u4f55\uff0c\u5982\u4f55\u62db\u52df\u65b0\u5f00\u53d1\u4eba\u5458\u5e76\u4f7f\u5176\u5c3d\u5feb\u5165\u624b\u4ecd\u7136\u662f\u4e00\u9879\u8270\u5de8\u7684\u6311\u6218\uff0c\u4f7f\u7528 Docker Desktop \u548c Docker Compose \uff0c\u60a8\u53ef\u4ee5\u663e\u7740\u51cf\u5c11\u672c\u5730\u5f00\u53d1\u73af\u5883\u7684\u8bbe\u7f6e\u65f6\u95f4\uff0c\u5e76\u8fc5\u901f\u4e3a\u5f00\u53d1\u4eba\u5458\u670d\u52a1\uff0c\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u7acb\u5373\u63d0\u9ad8\u751f\u4ea7\u529b\u3002Docker Compose\u662f\u7528\u4e8e\u5b9a\u4e49\u548c\u8fd0\u884c\u591a\u5bb9\u5668Docker\u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\uff0c \u901a\u8fc7Compose\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528YAML\u6587\u4ef6\u6765\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u7136\u540e\uff0c\u53ea\u9700\u4e00\u4e2a\u547d\u4ee4\uff0c\u60a8\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece\u914d\u7f6e\u4e2d\u521b\u5efa\u5e76\u542f\u52a8\u6240\u6709\u670d\u52a1 \u3002 3.\u5feb\u901f\u90e8\u7f72\u548c\u66f4\u65b0\u57fa\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528 \u00b6 \u7ec4\u7ec7\u8d8a\u6765\u8d8a\u591a\u5730\u91c7\u7528\u5fae\u670d\u52a1\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4ec5\u5e0c\u671b\u66ff\u6362\u5927\u578b\u7684\u6574\u4f53\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e14\u8fd8\u5e0c\u671b\u5b9e\u73b0\u66f4\u5feb\u7684\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u548c\u66f4\u65b0\u3002Docker\u5141\u8bb8\u60a8\u5c06\u5fae\u670d\u52a1\u5bb9\u5668\u5316\uff0c\u5e76\u7b80\u5316\u8fd9\u4e9b\u5fae\u670d\u52a1\u7684\u4ea4\u4ed8\u548c\u7ba1\u7406\u3002\u5bb9\u5668\u5316\u4e3a\u72ec\u7acb\u7684\u5fae\u670d\u52a1\u63d0\u4f9b\u4e86\u72ec\u7acb\u7684\u5de5\u4f5c\u8d1f\u8f7d\u73af\u5883\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u72ec\u7acb\u5730\u90e8\u7f72\u548c\u6269\u5c55\uff0c Docker Desktop \u548c Docker Hub \u53ef\u8ba9\u60a8\u5728\u6574\u4e2a\u7ec4\u7ec7\u4e2d\u6807\u51c6\u5316\u548c\u81ea\u52a8\u5316\u6784\u5efa\uff0c\u5171\u4eab\u548c\u8fd0\u884c\u57fa\u4e8e\u5fae\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002 4.\u65e7\u7248\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u8fc1\u79fb\u81f3\u5bb9\u5668 \u00b6 \u968f\u7740\u5bb9\u5668\u6210\u4e3a\u53d1\u9001\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u770b\u5230\u7684\u4e00\u79cd\u8d8b\u52bf\u662f\u7ec4\u7ec7\u91c7\u53d6\u201c\u63d0\u62d4\u548c\u8f6c\u79fb\u201d\u7684\u65b9\u5f0f\u5c06\u5176\u73b0\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u8f6c\u79fb\u5230\u5bb9\u5668\u4e2d\u3002\u8fc8\u51fa\u7b2c\u4e00\u6b65\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u91cd\u7ec4\u548c\u5206\u89e3\u6210\u5fae\u670d\u52a1\uff0c\u4f46\u662f\u53ea\u8981\u5c06\u5b83\u4eec\u6309\u539f\u6837\u8fc1\u79fb\u5c31\u53ef\u4ee5\u7acb\u5373\u83b7\u5f97\u597d\u5904\u3002\u7528Docker\u6765\u5c01\u88c5\u9057\u7559\u5e94\u7528\u7a0b\u5e8f\u6709\u5f88\u591a\u597d\u5904\u3002\u5f00\u53d1\u548c\u6d4b\u8bd5\u6548\u7387\u66f4\u9ad8\uff0c\u90e8\u7f72\u548c\u707e\u96be\u6062\u590d\u5927\u5927\u7b80\u5316\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u800c\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u51b2\u7a81\u3002 5.\u5728Docker\u4e0a\u90e8\u7f72\u673a\u5668\u5b66\u4e60\\\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b \u00b6 \u673a\u5668\u5b66\u4e60\uff08ML\uff09\u5f00\u53d1\u4e2d\u7684\u6700\u5927\u6311\u6218\u4e4b\u4e00\u662f\u5728\u751f\u4ea7\u4e2d\u548c\u5927\u89c4\u6a21\u90e8\u7f72\u7ecf\u8fc7\u8bad\u7ec3\u7684\u6a21\u578b\u3002Docker\u5229\u7528\u8bf8\u5982TensorFlow\u8fd9\u6837\u7684\u5e73\u53f0\u6765\u652f\u6301GPU\u652f\u6301\uff0c\u7b80\u5316\u4e86ML\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u548c\u90e8\u7f72\u3002\u8bbe\u7f6e\u60a8\u7684\u5f00\u53d1\u73af\u5883\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u5bf9\u60a8\u521b\u5efa\u7684\u56fe\u50cf\u6216\u4eceDocker Hub\u4e0a\u7684\u53d1\u5e03\u8005\u4f5c\u4e3aDocker\u56fe\u50cf\u4e0b\u8f7d\u7684\u56fe\u50cf\u4f7f\u7528\u201cDocker run\u201d\u547d\u4ee4\u5373\u53ef\u3002Docker\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5728\u591a\u53f0\u673a\u5668\u4e0a\u6216\u5728\u4e91\u4e0a\u90e8\u7f72\u5bb9\u5668\u6765\u7b80\u5316ML\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u53d1\uff0c\u5e76\u5229\u7528Kubernetes\u7b49\u7f16\u6392\u6280\u672f\u6765\u7edf\u4e00\u7ba1\u7406\u6240\u6709\u8fd9\u4e9b\u5bb9\u5668\u3002","title":"01.\u5f00\u59cbDocker"},{"location":"2.Docker/01DockerHome.html#01docker","text":"","title":"01.\u5f00\u59cbDocker"},{"location":"2.Docker/01DockerHome.html#_1","text":"docker\u4e3b\u9875 why-docker docker\u4f7f\u7528\u573a\u666f docker\u6587\u6863 docker\u6982\u89c8 \u5feb\u901f\u5f00\u59cb \u4f7f\u7528docker\u5f00\u53d1 \u4f7f\u7528Docker Docker Desktop-Windows Docker Engine - CentOS(Community) Docker Hub \u73a9\u8f6cDocker 101-tutorial(docker/getting-started) docker\u5b9e\u9a8c\u5ba4 dockersamples \u7b2c\u4e09\u65b9\u6559\u7a0b docker\u6587\u6863 docker\u6982\u89c8 \u5feb\u901f\u5f00\u59cb \u4f7f\u7528docker\u5f00\u53d1 \u6570\u636e\u5b58\u50a8 \u5bb9\u5668\u7f16\u6392 docker\u624b\u518c Docker Engine Docker Compose Docker Machine Registry \u79c1\u6709\u4ed3\u5e93","title":"\u5b98\u7f51\u6307\u5f15"},{"location":"2.Docker/01DockerHome.html#docker","text":"","title":"\u4f7f\u7528Docker\u7ed9\u5f00\u53d1\u56e2\u961f\u5e26\u6765\u7684\u597d\u5904"},{"location":"2.Docker/01DockerHome.html#1","text":"\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458\uff0c\u60a8\u77e5\u9053\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u6700\u68d8\u624b\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u5fc5\u987b\u5904\u7406\u4e0d\u540c\u673a\u5668\u548c\u5e73\u53f0\u4e4b\u95f4\u7684\u73af\u5883\u5dee\u5f02, Docker\u5141\u8bb8\u60a8\u5728\u672c\u5730\u8fd0\u884c\u5bb9\u5668\uff0c\u6d88\u9664\u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u4e4b\u95f4\u4ee5\u53ca\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02 \u3002\u4e0d\u9700\u8981\u5728\u672c\u5730\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\u5f00\u53d1\u73af\u5883\u6240\u9700\u7684\u4e00\u5207\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5bb9\u5668\u5728Docker\u5f15\u64ce\u4e0a\u8fd0\u884c\u3002\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u8bed\u8a00\u6216\u5de5\u5177\uff0c\u60a8\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u672c\u5730\u5305\u542b\u60a8\u7684\u73af\u5883\u3002\u901a\u8fc7 Docker Desktop \u548c Docker Hub \uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u8f6f\u4ef6\u8fdb\u884c\u79fb\u690d\uff0c\u6709\u4e86\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5bb9\u5668\u53ef\u4ee5\u8f7b\u677e\u5730\u8de8\u673a\u5668\u90e8\u7f72\u3002 \u81f3\u4ece\u6709\u4e86 docker ,\u5f00\u53d1\u7684\u5c0f\u4f19\u4f34\u4eec\u53ef\u4ee5\u7406\u76f4\u6c14\u58ee\u7684\u5411\u8fd0\u7ef4\u8bf4\uff1a\u201c\u8f6f\u4ef6\u5728\u6211\u7684\u7535\u8111\u4e0a\u662f\u6b63\u5e38\u8fd0\u884c\u7684!\"","title":"1.\u4efb\u4f55\u73af\u5883\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u8f6f\u4ef6"},{"location":"2.Docker/01DockerHome.html#2","text":"\u65e0\u8bba\u7ec4\u7ec7\u7684\u89c4\u6a21\u5927\u5c0f\u5982\u4f55\uff0c\u5982\u4f55\u62db\u52df\u65b0\u5f00\u53d1\u4eba\u5458\u5e76\u4f7f\u5176\u5c3d\u5feb\u5165\u624b\u4ecd\u7136\u662f\u4e00\u9879\u8270\u5de8\u7684\u6311\u6218\uff0c\u4f7f\u7528 Docker Desktop \u548c Docker Compose \uff0c\u60a8\u53ef\u4ee5\u663e\u7740\u51cf\u5c11\u672c\u5730\u5f00\u53d1\u73af\u5883\u7684\u8bbe\u7f6e\u65f6\u95f4\uff0c\u5e76\u8fc5\u901f\u4e3a\u5f00\u53d1\u4eba\u5458\u670d\u52a1\uff0c\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u7acb\u5373\u63d0\u9ad8\u751f\u4ea7\u529b\u3002Docker Compose\u662f\u7528\u4e8e\u5b9a\u4e49\u548c\u8fd0\u884c\u591a\u5bb9\u5668Docker\u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\uff0c \u901a\u8fc7Compose\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528YAML\u6587\u4ef6\u6765\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u7136\u540e\uff0c\u53ea\u9700\u4e00\u4e2a\u547d\u4ee4\uff0c\u60a8\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece\u914d\u7f6e\u4e2d\u521b\u5efa\u5e76\u542f\u52a8\u6240\u6709\u670d\u52a1 \u3002","title":"2.\u56e2\u961f\u65b0\u6210\u5458\u5feb\u901f\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u53ca\u6240\u9700\u8981\u7684\u4f9d\u8d56\u670d\u52a1"},{"location":"2.Docker/01DockerHome.html#3","text":"\u7ec4\u7ec7\u8d8a\u6765\u8d8a\u591a\u5730\u91c7\u7528\u5fae\u670d\u52a1\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4ec5\u5e0c\u671b\u66ff\u6362\u5927\u578b\u7684\u6574\u4f53\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e14\u8fd8\u5e0c\u671b\u5b9e\u73b0\u66f4\u5feb\u7684\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u548c\u66f4\u65b0\u3002Docker\u5141\u8bb8\u60a8\u5c06\u5fae\u670d\u52a1\u5bb9\u5668\u5316\uff0c\u5e76\u7b80\u5316\u8fd9\u4e9b\u5fae\u670d\u52a1\u7684\u4ea4\u4ed8\u548c\u7ba1\u7406\u3002\u5bb9\u5668\u5316\u4e3a\u72ec\u7acb\u7684\u5fae\u670d\u52a1\u63d0\u4f9b\u4e86\u72ec\u7acb\u7684\u5de5\u4f5c\u8d1f\u8f7d\u73af\u5883\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u72ec\u7acb\u5730\u90e8\u7f72\u548c\u6269\u5c55\uff0c Docker Desktop \u548c Docker Hub \u53ef\u8ba9\u60a8\u5728\u6574\u4e2a\u7ec4\u7ec7\u4e2d\u6807\u51c6\u5316\u548c\u81ea\u52a8\u5316\u6784\u5efa\uff0c\u5171\u4eab\u548c\u8fd0\u884c\u57fa\u4e8e\u5fae\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002","title":"3.\u5feb\u901f\u90e8\u7f72\u548c\u66f4\u65b0\u57fa\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u7684\u5e94\u7528"},{"location":"2.Docker/01DockerHome.html#4","text":"\u968f\u7740\u5bb9\u5668\u6210\u4e3a\u53d1\u9001\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u770b\u5230\u7684\u4e00\u79cd\u8d8b\u52bf\u662f\u7ec4\u7ec7\u91c7\u53d6\u201c\u63d0\u62d4\u548c\u8f6c\u79fb\u201d\u7684\u65b9\u5f0f\u5c06\u5176\u73b0\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u8f6c\u79fb\u5230\u5bb9\u5668\u4e2d\u3002\u8fc8\u51fa\u7b2c\u4e00\u6b65\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u91cd\u7ec4\u548c\u5206\u89e3\u6210\u5fae\u670d\u52a1\uff0c\u4f46\u662f\u53ea\u8981\u5c06\u5b83\u4eec\u6309\u539f\u6837\u8fc1\u79fb\u5c31\u53ef\u4ee5\u7acb\u5373\u83b7\u5f97\u597d\u5904\u3002\u7528Docker\u6765\u5c01\u88c5\u9057\u7559\u5e94\u7528\u7a0b\u5e8f\u6709\u5f88\u591a\u597d\u5904\u3002\u5f00\u53d1\u548c\u6d4b\u8bd5\u6548\u7387\u66f4\u9ad8\uff0c\u90e8\u7f72\u548c\u707e\u96be\u6062\u590d\u5927\u5927\u7b80\u5316\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u800c\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u51b2\u7a81\u3002","title":"4.\u65e7\u7248\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u8fc1\u79fb\u81f3\u5bb9\u5668"},{"location":"2.Docker/01DockerHome.html#5docker","text":"\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u5f00\u53d1\u4e2d\u7684\u6700\u5927\u6311\u6218\u4e4b\u4e00\u662f\u5728\u751f\u4ea7\u4e2d\u548c\u5927\u89c4\u6a21\u90e8\u7f72\u7ecf\u8fc7\u8bad\u7ec3\u7684\u6a21\u578b\u3002Docker\u5229\u7528\u8bf8\u5982TensorFlow\u8fd9\u6837\u7684\u5e73\u53f0\u6765\u652f\u6301GPU\u652f\u6301\uff0c\u7b80\u5316\u4e86ML\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u548c\u90e8\u7f72\u3002\u8bbe\u7f6e\u60a8\u7684\u5f00\u53d1\u73af\u5883\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u5bf9\u60a8\u521b\u5efa\u7684\u56fe\u50cf\u6216\u4eceDocker Hub\u4e0a\u7684\u53d1\u5e03\u8005\u4f5c\u4e3aDocker\u56fe\u50cf\u4e0b\u8f7d\u7684\u56fe\u50cf\u4f7f\u7528\u201cDocker run\u201d\u547d\u4ee4\u5373\u53ef\u3002Docker\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5728\u591a\u53f0\u673a\u5668\u4e0a\u6216\u5728\u4e91\u4e0a\u90e8\u7f72\u5bb9\u5668\u6765\u7b80\u5316ML\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u53d1\uff0c\u5e76\u5229\u7528Kubernetes\u7b49\u7f16\u6392\u6280\u672f\u6765\u7edf\u4e00\u7ba1\u7406\u6240\u6709\u8fd9\u4e9b\u5bb9\u5668\u3002","title":"5.\u5728Docker\u4e0a\u90e8\u7f72\u673a\u5668\u5b66\u4e60\\\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b"},{"location":"2.Docker/02Docker%20Desktop-Windows.html","text":"02.Docker Desktop-Window \u00b6 Install Docker Desktop on Windows \u00b6 Double-click Docker Desktop Installer.exe to run the installer. If you haven\u2019t already downloaded the installer ( Docker Desktop Installer.exe ), you can get it from Docker Hub . It typically downloads to your Downloads folder, or you can run it from the recent downloads bar at the bottom of your web browser. When prompted, ensure the Enable Hyper-V Windows Features option is selected on the Configuration page. Follow the instructions on the installation wizard to authorize the installer and proceed with the install. When the installation is successful, click Close to complete the installation process. If your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to Local Users and Groups > Groups > docker-users . Right-click to add the user to the group. Log out and log back in for the changes to take effect. Start Docker Desktop \u00b6 Docker Desktop does not start automatically after installation. To start Docker Desktop, search for Docker, and select Docker Desktop in the search results. When the whale icon in the status bar stays steady, Docker Desktop is up-and-running, and is accessible from any terminal window. If the whale icon is hidden in the Notifications area, click the up arrow on the taskbar to show it. To learn more, see Docker Settings . When the initialization is complete, Docker Desktop launches the onboarding tutorial. The tutorial includes a simple exercise to build an example Docker image, run it as a container, push and save the image to Docker Hub. Congratulations! You are now successfully running Docker Desktop on Windows. If you would like to rerun the tutorial, go to the Docker Desktop menu and select Learn . Get Started With Docker \u00b6 First, clone a repository \u00b6 The Getting Started project is a simple GitHub repository which contains everything you need to build an image and run it as a container. Install Git if you don\u2019t have it already. git clone https://github.com/docker/getting-started.git You can also type the command directly in a command line interface. Now, build the image \u00b6 A Docker image is a private file system just for your container. It provides all the files and code your container needs. cd getting-started docker build -t docker101tutorial . Run your first container \u00b6 docker run -d -p 80 :80 --name docker-tutorial docker101tutorial Now save and share your image \u00b6 docker tag docker101tutorial yichaoo/docker101tutorial docker push yichaoo/docker101tutorial Done! Show Dashboard \u00b6 Uninstall Docker Desktop \u00b6 To uninstall Docker Desktop from your Windows machine: From the Windows Start menu, select Settings > Apps > Apps & features . Select Docker Desktop from the Apps & features list and then select Uninstall . Click Uninstall to confirm your selection. Note: Uninstalling Docker Desktop will destroy Docker containers and images local to the machine and remove the files generated by the application. Save and restore data \u00b6 You can use the following procedure to save and restore images and container data. For example, if you want to switch between Edge and Stable, or to reset your VM disk: Use docker save -o images.tar image1 [image2 ...] to save any images you want to keep. See save in the Docker Engine command line reference. Use docker export -o myContainner1.tar container1 to export containers you want to keep. See export in the Docker Engine command line reference. Uninstall the current version of Docker Desktop and install a different version (Stable or Edge), or reset your VM disk. Use docker load -i images.tar to reload previously saved images. See load in the Docker Engine. Use docker import -i myContainer1.tar to create a file system image corresponding to the previously exported containers. See import in the Docker Engine. For information on how to back up and restore data volumes, see Backup, restore, or migrate data volumes .","title":"02.Docker Desktop-Window"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#02docker-desktop-window","text":"","title":"02.Docker Desktop-Window"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#install-docker-desktop-on-windows","text":"Double-click Docker Desktop Installer.exe to run the installer. If you haven\u2019t already downloaded the installer ( Docker Desktop Installer.exe ), you can get it from Docker Hub . It typically downloads to your Downloads folder, or you can run it from the recent downloads bar at the bottom of your web browser. When prompted, ensure the Enable Hyper-V Windows Features option is selected on the Configuration page. Follow the instructions on the installation wizard to authorize the installer and proceed with the install. When the installation is successful, click Close to complete the installation process. If your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to Local Users and Groups > Groups > docker-users . Right-click to add the user to the group. Log out and log back in for the changes to take effect.","title":"Install Docker Desktop on Windows"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#start-docker-desktop","text":"Docker Desktop does not start automatically after installation. To start Docker Desktop, search for Docker, and select Docker Desktop in the search results. When the whale icon in the status bar stays steady, Docker Desktop is up-and-running, and is accessible from any terminal window. If the whale icon is hidden in the Notifications area, click the up arrow on the taskbar to show it. To learn more, see Docker Settings . When the initialization is complete, Docker Desktop launches the onboarding tutorial. The tutorial includes a simple exercise to build an example Docker image, run it as a container, push and save the image to Docker Hub. Congratulations! You are now successfully running Docker Desktop on Windows. If you would like to rerun the tutorial, go to the Docker Desktop menu and select Learn .","title":"Start Docker Desktop"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#get-started-with-docker","text":"","title":"Get Started With Docker"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#first-clone-a-repository","text":"The Getting Started project is a simple GitHub repository which contains everything you need to build an image and run it as a container. Install Git if you don\u2019t have it already. git clone https://github.com/docker/getting-started.git You can also type the command directly in a command line interface.","title":"First, clone a repository"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#now-build-the-image","text":"A Docker image is a private file system just for your container. It provides all the files and code your container needs. cd getting-started docker build -t docker101tutorial .","title":"Now, build the image"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#run-your-first-container","text":"docker run -d -p 80 :80 --name docker-tutorial docker101tutorial","title":"Run your first container"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#now-save-and-share-your-image","text":"docker tag docker101tutorial yichaoo/docker101tutorial docker push yichaoo/docker101tutorial","title":"Now save and share your image"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#done-show-dashboard","text":"","title":"Done! Show Dashboard"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#uninstall-docker-desktop","text":"To uninstall Docker Desktop from your Windows machine: From the Windows Start menu, select Settings > Apps > Apps & features . Select Docker Desktop from the Apps & features list and then select Uninstall . Click Uninstall to confirm your selection. Note: Uninstalling Docker Desktop will destroy Docker containers and images local to the machine and remove the files generated by the application.","title":"Uninstall Docker Desktop"},{"location":"2.Docker/02Docker%20Desktop-Windows.html#save-and-restore-data","text":"You can use the following procedure to save and restore images and container data. For example, if you want to switch between Edge and Stable, or to reset your VM disk: Use docker save -o images.tar image1 [image2 ...] to save any images you want to keep. See save in the Docker Engine command line reference. Use docker export -o myContainner1.tar container1 to export containers you want to keep. See export in the Docker Engine command line reference. Uninstall the current version of Docker Desktop and install a different version (Stable or Edge), or reset your VM disk. Use docker load -i images.tar to reload previously saved images. See load in the Docker Engine. Use docker import -i myContainer1.tar to create a file system image corresponding to the previously exported containers. See import in the Docker Engine. For information on how to back up and restore data volumes, see Backup, restore, or migrate data volumes .","title":"Save and restore data"},{"location":"2.Docker/Docker%20Tutorials%20and%20Labs.html","text":"Docker Tutorials and Labs \u00b6 At this time we are not actively adding labs to this repository. Our focus is on training.play-with-docker.com where new lab and workshop oriented content is being added. We welcome fixes to existing content. For any new content you wish to contribute, please use this repository: https://github.com/play-with-docker/play-with-docker.github.io . This repo contains Docker labs and tutorials authored both by Docker, and by members of the community. We welcome contributions and want to grow the repo. Docker tutorials: \u00b6 Docker for beginners Docker Swarm Mode Configuring developer tools and programming languages Java Live Debugging Java with Docker Docker for Java Developers Node.js Live Debugging a Node.js application in Docker Dockerizing a Node.js application Docker for ASP.NET and Windows containers Building a 12 Factor app with Docker Docker Security Docker Networking Hands-on Labs from DockerCon US 2017 Community tutorials \u00b6 Docker Tutorials from the Community - links to a different repository Advanced Docker orchestration workshop - links to a different repository Contributing \u00b6 We want to see this repo grow, so if you have a tutorial to submit, or contributions to existing tutorials, please see this guide: Guide to submitting your own tutorial","title":"Docker Tutorials and Labs"},{"location":"2.Docker/Docker%20Tutorials%20and%20Labs.html#docker-tutorials-and-labs","text":"At this time we are not actively adding labs to this repository. Our focus is on training.play-with-docker.com where new lab and workshop oriented content is being added. We welcome fixes to existing content. For any new content you wish to contribute, please use this repository: https://github.com/play-with-docker/play-with-docker.github.io . This repo contains Docker labs and tutorials authored both by Docker, and by members of the community. We welcome contributions and want to grow the repo.","title":"Docker Tutorials and Labs"},{"location":"2.Docker/Docker%20Tutorials%20and%20Labs.html#docker-tutorials","text":"Docker for beginners Docker Swarm Mode Configuring developer tools and programming languages Java Live Debugging Java with Docker Docker for Java Developers Node.js Live Debugging a Node.js application in Docker Dockerizing a Node.js application Docker for ASP.NET and Windows containers Building a 12 Factor app with Docker Docker Security Docker Networking Hands-on Labs from DockerCon US 2017","title":"Docker tutorials:"},{"location":"2.Docker/Docker%20Tutorials%20and%20Labs.html#community-tutorials","text":"Docker Tutorials from the Community - links to a different repository Advanced Docker orchestration workshop - links to a different repository","title":"Community tutorials"},{"location":"2.Docker/Docker%20Tutorials%20and%20Labs.html#contributing","text":"We want to see this repo grow, so if you have a tutorial to submit, or contributions to existing tutorials, please see this guide: Guide to submitting your own tutorial","title":"Contributing"},{"location":"2.Docker/Docker-Start-Windows.html","text":"Get started with Docker for Windows \u00b6 Estimated reading time: 21 minutes Welcome to Docker Desktop! The Docker Desktop for Windows section contains information about the Docker Desktop Community Stable release. For information about features available in Edge releases, see the Edge release notes . For information about Docker Desktop Enterprise (DDE) releases, see Docker Desktop Enterprise . Docker is a full development platform to build, run, and share containerized applications. Docker Desktop is the best way to get started with Docker on Windows . See Install Docker Desktop for download information, system requirements, and installation instructions. Test your installation \u00b6 Open a terminal window (Command Prompt or PowerShell, but not PowerShell ISE). Run docker --version to ensure that you have a supported version of Docker: > docker --version Docker version 19 .03.1 Pull the hello-world image from Docker Hub and run a container: > docker run hello-world docker : Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... List the hello-world image that was downloaded from Docker Hub: > docker image ls List the hello-world container (that exited after displaying \u201cHello from Docker!\u201d): > docker container ls --all Explore the Docker help pages by running some help commands: > docker --help > docker container --help > docker container ls --help > docker run --help Explore the application \u00b6 In this section, we demonstrate the ease and power of Dockerized applications by running something more complex, such as an OS and a webserver. Pull an image of the Ubuntu OS and run an interactive terminal inside the spawned container: > docker run --interactive --tty ubuntu bash docker : Unable to find image 'ubuntu:latest' locally latest: Pulling from library/ubuntu 22e816666fd6: Pull complete 079b6d2a1e53: Pull complete 11048ebae908: Pull complete c58094023a2e: Pull complete Digest: sha256:a7b8b7b33e44b123d7f997bd4d3d0a59fafc63e203d17efedf09ff3f6f516152 Status: Downloaded newer image for ubuntu:latest Do not use PowerShell ISE Interactive terminals do not work in PowerShell ISE (but they do in PowerShell). See docker/for-win/issues/223 . You are in the container. At the root # prompt, check the hostname of the container: root@8aea0acb7423:/# hostname 8aea0acb7423 Notice that the hostname is assigned as the container ID (and is also used in the prompt). Exit the shell with the exit command (which also stops the container): root@8aea0acb7423:/# exit > List containers with the --all option (because no containers are running). The hello-world container (randomly named, relaxed_sammet ) stopped after displaying its message. The ubuntu container (randomly named, laughing_kowalevski ) stopped when you exited the container. > docker container ls --all CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8aea0acb7423 ubuntu \"bash\" 2 minutes ago Exited ( 0 ) 2 minutes ago laughing_kowalevski 45f77eb48e78 hello-world \"/hello\" 3 minutes ago Exited ( 0 ) 3 minutes ago relaxed_sammet Pull and run a Dockerized nginx web server that we name, webserver : > docker run --detach --publish 80 :80 --name webserver nginx Unable to find image 'nginx:latest' locally latest: Pulling from library/nginx fdd5d7827f33: Pull complete a3ed95caeb02: Pull complete 716f7a5f3082: Pull complete 7b10f03a0309: Pull complete Digest: sha256:f6a001272d5d324c4c9f3f183e1b69e9e0ff12debeb7a092730d638c33e0de3e Status: Downloaded newer image for nginx:latest dfe13c68b3b86f01951af617df02be4897184cbf7a8b4d5caf1c3c5bd3fc267f Point your web browser at http://localhost to display the nginx start page. (You don\u2019t need to append :80 because you specified the default HTTP port in the docker command.) List only your running containers: > docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0e788d8e4dfd nginx \"nginx -g 'daemon of\u2026\" 2 minutes ago Up 2 minutes 0.0.0.0:80->80/tcp webserver Stop the running nginx container by the name we assigned it, webserver : > docker container stop webserver Remove all three containers by their names -- the latter two names will differ for you: > docker container rm webserver laughing_kowalevski relaxed_sammet Docker Settings dialog \u00b6 The Docker Desktop menu allows you to configure your Docker settings such as installation, updates, version channels, Docker Hub login, and more. This section explains the configuration options accessible from the Settings dialog. Open the Docker Desktop menu by clicking the Docker icon in the Notifications area (or System tray): Select Settings to open the Settings dialog: General \u00b6 On the General tab of the Settings dialog, you can configure when to start and update Docker. Start Docker when you log in - Automatically start Docker Desktop upon Windows system login. Automatically check for updates - By default, Docker Desktop automatically checks for updates and notifies you when an update is available. Click OK to accept and install updates (or cancel to keep the current version). You can manually update by choosing Check for Updates from the main Docker menu. Expose daemon on tcp://localhost:2375 without TLS - Click this option to enable legacy clients to connect to the Docker daemon. You must use this option with caution as exposing the daemon without TLS can result in remote code execution attacks. Send usage statistics - By default, Docker Desktop sends diagnostics, crash reports, and usage data. This information helps Docker improve and troubleshoot the application. Clear the check box to opt out. Docker may periodically prompt you for more information. Click Switch to the Edge version to learn more about Docker Desktop Edge releases. Resources \u00b6 The Resources tab allows you to configure CPU, memory, disk, proxies, network, and other resources. Different settings are available for configuration depending on whether you are using Linux containers in WSL 2 mode, Linux containers in Hyper-V mode, or Windows containers. ADVANCED \u00b6 Note The Advanced tab is only available in Hyper-V mode, because in WSL 2 mode and Windows container mode these resources are managed by Windows. In WSL 2 mode, you can configure limits on the memory, CPU, and swap size allocated to the WSL 2 utility VM . Use the Advanced tab to limit resources available to Docker. CPUs : By default, Docker Desktop is set to use half the number of processors available on the host machine. To increase processing power, set this to a higher number; to decrease, lower the number. Memory : By default, Docker Desktop is set to use 2 GB runtime memory, allocated from the total available memory on your machine. To increase the RAM, set this to a higher number. To decrease it, lower the number. Swap : Configure swap file size as needed. The default is 1 GB. Disk image size : Specify the size of the disk image. Disk image location : Specify the location of the Linux volume where containers and images are stored. You can also move the disk image to a different location. If you attempt to move a disk image to a location that already has one, you get a prompt asking if you want to use the existing image or replace it. FILE SHARING \u00b6 Note The File sharing tab is only available in Hyper-V mode, because in WSL 2 mode and Windows container mode all files are automatically shared by Windows. Use File sharing to allow local directories on Windows to be shared with Linux containers. This is especially useful for editing source code in an IDE on the host while running and testing the code in a container. Note that configuring file sharing is not necessary for Windows containers, only Linux containers . If a directory is not shared with a Linux container you may get file not found or cannot start service errors at runtime. See Volume mounting requires shared folders for Linux containers . File share settings are: Add a Directory : Click + and navigate to the directory you want to add. Apply & Restart makes the directory available to containers using Docker\u2019s bind mount ( -v ) feature. Tips on shared folders, permissions, and volume mounts Shared folders are designed to allow application code to be edited on the host while being executed in containers. For non-code items such as cache directories or databases, the performance will be much better if they are stored in the Linux VM, using a data volume (named volume) or data container . Docker Desktop sets permissions to read/write/execute for users, groups and others 0777 or a+rwx . This is not configurable. See Permissions errors on data directories for shared volumes . Windows presents a case-insensitive view of the filesystem to applications while Linux is case-sensitive. On Linux it is possible to create 2 separate files: test and Test , while on Windows these filenames would actually refer to the same underlying file. This can lead to problems where an app works correctly on a developer Windows machine (where the file contents are shared) but fails when run in Linux in production (where the file contents are distinct). To avoid this, Docker Desktop insists that all shared files are accessed as their original case. Therefore if a file is created called test , it must be opened as test . Attempts to open Test will fail with \u201cNo such file or directory\u201d. Similarly once a file called test is created, attempts to create a second file called Test will fail. SHARED FOLDERS ON DEMAND \u00b6 You can share a folder \u201con demand\u201d the first time a particular folder is used by a container. If you run a Docker command from a shell with a volume mount (as shown in the example below) or kick off a Compose file that includes volume mounts, you get a popup asking if you want to share the specified folder. You can select to Share it , in which case it is added your Docker Desktop Shared Folders list and available to containers. Alternatively, you can opt not to share it by selecting Cancel . PROXIES \u00b6 Docker Desktop lets you configure HTTP/HTTPS Proxy Settings and automatically propagates these to Docker. For example, if you set your proxy settings to http://proxy.example.com , Docker uses this proxy when pulling containers. Your proxy settings, however, will not be propagated into the containers you start. If you wish to set the proxy settings for your containers, you need to define environment variables for them, just like you would do on Linux, for example: > docker run -e HTTP_PROXY=http://proxy.example.com:3128 alpine env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME=b7edf988b2b5 TERM=xterm HOME=/root HTTP_PROXY=http://proxy.example.com:3128 For more information on setting environment variables for running containers, see Set environment variables . NETWORK \u00b6 Note The Network tab is not available in Windows container mode because networking is managed by Windows. You can configure Docker Desktop networking to work on a virtual private network (VPN). Specify a network address translation (NAT) prefix and subnet mask to enable Internet connectivity. DNS Server : You can configure the DNS server to use dynamic or static IP addressing. Note : Some users reported problems connecting to Docker Hub on Docker Desktop Stable version. This would manifest as an error when trying to run docker commands that pull images from Docker Hub that are not already downloaded, such as a first time run of docker run hello-world . If you encounter this, reset the DNS server to use the Google DNS fixed address: 8.8.8.8 . For more information, see Networking issues in Troubleshooting. Updating these settings requires a reconfiguration and reboot of the Linux VM. WSL INTEGRATION \u00b6 In WSL 2 mode, you can configure which WSL 2 distributions will have the Docker WSL integration. By default, the integration will be enabled on your default WSL distribution. To change your default WSL distro, run wsl --set-default <distro name> . (For example, to set Ubuntu as your default WSL distro, run wsl --set-default ubuntu ). You can also select any additional distributions you would like to enable the WSL 2 integration on. For more details on configuring Docker Desktop to use WSL 2, see Docker Desktop WSL 2 backend . Docker Engine \u00b6 The Docker Engine page allows you to configure the Docker daemon to determine how your containers run. Type a JSON configuration file in the box to configure the daemon settings. For a full list of options, see the Docker Engine dockerd commandline reference . Click Apply & Restart to save your settings and restart Docker Desktop. Command Line \u00b6 On the Command Line page, you can specify whether or not to enable experimental features. On both Docker Desktop Edge and Stable releases, you can toggle the experimental features on and off. If you toggle the experimental features off, Docker Desktop uses the current generally available release of Docker Engine. EXPERIMENTAL FEATURES \u00b6 Docker Desktop Edge releases have the experimental version of Docker Engine enabled by default, described in the Docker Experimental Features README on GitHub. Experimental features provide early access to future product functionality. These features are intended for testing and feedback only as they may change between releases without warning or can be removed entirely from a future release. Experimental features must not be used in production environments. Docker does not offer support for experimental features. To enable experimental features in the Docker CLI, edit the config.json file and set experimental to enabled. To enable experimental features from the Docker Desktop menu, click Settings ( Preferences on macOS) > Command Line and then turn on the Enable experimental features toggle. Click Apply & Restart . For a list of current experimental features in the Docker CLI, see Docker CLI Experimental features . Run docker version to verify whether you have enabled experimental features. Experimental mode is listed under Server data. If Experimental is true , then Docker is running in experimental mode, as shown here: > docker version Client: Docker Engine - Community Version: 19.03.1 API version: 1.40 Go version: go1.12.5 Git commit: 74b1e89 Built: Thu Jul 25 21:17:08 2019 OS/Arch: windows/amd64 Experimental: true Server: Docker Engine - Community Engine: Version: 19.03.1 API version: 1.40 (minimum version 1.12) Go version: go1.12.5 Git commit: 74b1e89 Built: Thu Jul 25 21:17:52 2019 OS/Arch: linux/amd64 Experimental: true containerd: Version: v1.2.6 GitCommit: 894b81a4b802e4eb2a91d1ce216b8817763c29fb runc: Version: 1.0.0-rc8 GitCommit: 425e105d5a03fabd737a126ad93d62a9eeede87f docker-init: Version: 0.18.0 GitCommit: fec3683 Kubernetes \u00b6 Note The Kubernetes tab is not available in Windows container mode. Docker Desktop includes a standalone Kubernetes server that runs on your Windows host, so that you can test deploying your Docker workloads on Kubernetes. The Kubernetes client command, kubectl , is included and configured to connect to the local Kubernetes server. If you have kubectl already installed and pointing to some other environment, such as minikube or a GKE cluster, be sure to change context so that kubectl is pointing to docker-desktop : > kubectl config get-contexts > kubectl config use-context docker-desktop To enable Kubernetes support and install a standalone instance of Kubernetes running as a Docker container, select Enable Kubernetes . To set Kubernetes as the default orchestrator , select Deploy Docker Stacks to Kubernetes by default . By default, Kubernetes containers are hidden from commands like docker service ls , because managing them manually is not supported. To make them visible, select Show system containers (advanced) . Most users do not need this option. Click Apply & Restart to save the settings. This instantiates images required to run the Kubernetes server as containers, and installs the kubectl.exe command in the path. When Kubernetes is enabled and running, an additional status bar item displays at the bottom right of the Docker Desktop Settings dialog. The status of Kubernetes shows in the Docker menu and the context points to docker-desktop . To disable Kubernetes support at any time, clear the Enable Kubernetes check box. The Kubernetes containers are stopped and removed, and the /usr/local/bin/kubectl command is removed. To delete all stacks and Kubernetes resources, select Reset Kubernetes Cluster . If you installed kubectl by another method, and experience conflicts, remove it. For more information on using the Kubernetes integration with Docker Desktop, see Deploy on Kubernetes . Reset \u00b6 The Restart Docker Desktop and Reset to factory defaults options are now available on the Troubleshoot menu. For information, see Logs and Troubleshooting . Troubleshoot \u00b6 Visit our Logs and Troubleshooting guide for more details. Log on to our Docker Desktop for Windows forum to get help from the community, review current user topics, or join a discussion. Log on to Docker Desktop for Windows issues on GitHub to report bugs or problems and review community reported issues. For information about providing feedback on the documentation or update it yourself, see Contribute to documentation . Switch between Windows and Linux containers \u00b6 From the Docker Desktop menu, you can toggle which daemon (Linux or Windows) the Docker CLI talks to. Select Switch to Windows containers to use Windows containers, or select Switch to Linux containers to use Linux containers (the default). For more information on Windows containers, refer to the following documentation: Microsoft documentation on Windows containers . Build and Run Your First Windows Server Container (Blog Post) gives a quick tour of how to build and run native Docker Windows containers on Windows 10 and Windows Server 2016 evaluation releases. Getting Started with Windows Containers (Lab) shows you how to use the MusicStore application with Windows containers. The MusicStore is a standard .NET application and, forked here to use containers , is a good example of a multi-container application. To understand how to connect to Windows containers from the local host, see Limitations of Windows containers for localhost and published ports Settings dialog changes with Windows containers When you switch to Windows containers, the Settings dialog only shows those tabs that are active and apply to your Windows containers: General Proxies Daemon Reset If you set proxies or daemon configuration in Windows containers mode, these apply only on Windows containers. If you switch back to Linux containers, proxies and daemon configurations return to what you had set for Linux containers. Your Windows container settings are retained and become available again when you switch back. Dashboard \u00b6 The Docker Desktop Dashboard enables you to interact with containers and applications and manage the lifecycle of your applications directly from your machine. The Dashboard UI shows all running, stopped, and started containers with their state. It provides an intuitive interface to perform common actions to inspect and manage containers and Docker Compose applications. For more information, see Docker Desktop Dashboard . Docker Hub \u00b6 Select Sign in /Create Docker ID from the Docker Desktop menu to access your Docker Hub account. Once logged in, you can access your Docker Hub repositories directly from the Docker Desktop menu. For more information, refer to the following Docker Hub topics : Organizations and Teams in Docker Hub Builds and Images Two-factor authentication \u00b6 Docker Desktop enables you to sign into Docker Hub using two-factor authentication. Two-factor authentication provides an extra layer of security when accessing your Docker Hub account. You must enable two-factor authentication in Docker Hub before signing into your Docker Hub account through Docker Desktop. For instructions, see Enable two-factor authentication for Docker Hub . After you have enabled two-factor authentication: Go to the Docker Desktop menu and then select Sign in / Create Docker ID . Enter your Docker ID and password and click Sign in . After you have successfully signed in, Docker Desktop prompts you to enter the authentication code. Enter the six-digit code from your phone and then click Verify . After you have successfully authenticated, you can access your organizations and repositories directly from the Docker Desktop menu. Adding TLS certificates \u00b6 You can add trusted Certificate Authorities (CAs) to your Docker daemon to verify registry server certificates, and client certificates , to authenticate to registries. For more information, see How do I add custom CA certificates? and How do I add client certificates? in the FAQs. How do I add custom CA certificates? \u00b6 Docker Desktop supports all trusted Certificate Authorities (CAs) (root or intermediate). Docker recognizes certs stored under Trust Root Certification Authorities or Intermediate Certification Authorities. Docker Desktop creates a certificate bundle of all user-trusted CAs based on the Windows certificate store, and appends it to Moby trusted certificates. Therefore, if an enterprise SSL certificate is trusted by the user on the host, it is trusted by Docker Desktop. To learn more about how to install a CA root certificate for the registry, see Verify repository client with certificates in the Docker Engine topics. How do I add client certificates? \u00b6 You can add your client certificates in ~/.docker/certs.d/<MyRegistry>:<Port>/client.cert and ~/.docker/certs.d/<MyRegistry>:<Port>/client.key . You do not need to push your certificates with git commands. When the Docker Desktop application starts, it copies the ~/.docker/certs.d folder on your Windows system to the /etc/docker/certs.d directory on Moby (the Docker Desktop virtual machine running on Hyper-V). You need to restart Docker Desktop after making any changes to the keychain or to the ~/.docker/certs.d directory in order for the changes to take effect. The registry cannot be listed as an insecure registry (see Docker Daemon ). Docker Desktop ignores certificates listed under insecure registries, and does not send client certificates. Commands like docker run that attempt to pull from the registry produce error messages on the command line, as well as on the registry. To learn more about how to set the client TLS certificate for verification, see Verify repository client with certificates in the Docker Engine topics. Where to go next \u00b6 Try out the walkthrough at Get Started . Dig in deeper with Docker Labs example walkthroughs and source code. Refer to the Docker CLI Reference Guide . windows , edge , tutorial , run , docker , local , machine","title":"Get started with Docker for Windows"},{"location":"2.Docker/Docker-Start-Windows.html#get-started-with-docker-for-windows","text":"Estimated reading time: 21 minutes Welcome to Docker Desktop! The Docker Desktop for Windows section contains information about the Docker Desktop Community Stable release. For information about features available in Edge releases, see the Edge release notes . For information about Docker Desktop Enterprise (DDE) releases, see Docker Desktop Enterprise . Docker is a full development platform to build, run, and share containerized applications. Docker Desktop is the best way to get started with Docker on Windows . See Install Docker Desktop for download information, system requirements, and installation instructions.","title":"Get started with Docker for Windows"},{"location":"2.Docker/Docker-Start-Windows.html#test-your-installation","text":"Open a terminal window (Command Prompt or PowerShell, but not PowerShell ISE). Run docker --version to ensure that you have a supported version of Docker: > docker --version Docker version 19 .03.1 Pull the hello-world image from Docker Hub and run a container: > docker run hello-world docker : Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... List the hello-world image that was downloaded from Docker Hub: > docker image ls List the hello-world container (that exited after displaying \u201cHello from Docker!\u201d): > docker container ls --all Explore the Docker help pages by running some help commands: > docker --help > docker container --help > docker container ls --help > docker run --help","title":"Test your installation"},{"location":"2.Docker/Docker-Start-Windows.html#explore-the-application","text":"In this section, we demonstrate the ease and power of Dockerized applications by running something more complex, such as an OS and a webserver. Pull an image of the Ubuntu OS and run an interactive terminal inside the spawned container: > docker run --interactive --tty ubuntu bash docker : Unable to find image 'ubuntu:latest' locally latest: Pulling from library/ubuntu 22e816666fd6: Pull complete 079b6d2a1e53: Pull complete 11048ebae908: Pull complete c58094023a2e: Pull complete Digest: sha256:a7b8b7b33e44b123d7f997bd4d3d0a59fafc63e203d17efedf09ff3f6f516152 Status: Downloaded newer image for ubuntu:latest Do not use PowerShell ISE Interactive terminals do not work in PowerShell ISE (but they do in PowerShell). See docker/for-win/issues/223 . You are in the container. At the root # prompt, check the hostname of the container: root@8aea0acb7423:/# hostname 8aea0acb7423 Notice that the hostname is assigned as the container ID (and is also used in the prompt). Exit the shell with the exit command (which also stops the container): root@8aea0acb7423:/# exit > List containers with the --all option (because no containers are running). The hello-world container (randomly named, relaxed_sammet ) stopped after displaying its message. The ubuntu container (randomly named, laughing_kowalevski ) stopped when you exited the container. > docker container ls --all CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8aea0acb7423 ubuntu \"bash\" 2 minutes ago Exited ( 0 ) 2 minutes ago laughing_kowalevski 45f77eb48e78 hello-world \"/hello\" 3 minutes ago Exited ( 0 ) 3 minutes ago relaxed_sammet Pull and run a Dockerized nginx web server that we name, webserver : > docker run --detach --publish 80 :80 --name webserver nginx Unable to find image 'nginx:latest' locally latest: Pulling from library/nginx fdd5d7827f33: Pull complete a3ed95caeb02: Pull complete 716f7a5f3082: Pull complete 7b10f03a0309: Pull complete Digest: sha256:f6a001272d5d324c4c9f3f183e1b69e9e0ff12debeb7a092730d638c33e0de3e Status: Downloaded newer image for nginx:latest dfe13c68b3b86f01951af617df02be4897184cbf7a8b4d5caf1c3c5bd3fc267f Point your web browser at http://localhost to display the nginx start page. (You don\u2019t need to append :80 because you specified the default HTTP port in the docker command.) List only your running containers: > docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0e788d8e4dfd nginx \"nginx -g 'daemon of\u2026\" 2 minutes ago Up 2 minutes 0.0.0.0:80->80/tcp webserver Stop the running nginx container by the name we assigned it, webserver : > docker container stop webserver Remove all three containers by their names -- the latter two names will differ for you: > docker container rm webserver laughing_kowalevski relaxed_sammet","title":"Explore the application"},{"location":"2.Docker/Docker-Start-Windows.html#docker-settings-dialog","text":"The Docker Desktop menu allows you to configure your Docker settings such as installation, updates, version channels, Docker Hub login, and more. This section explains the configuration options accessible from the Settings dialog. Open the Docker Desktop menu by clicking the Docker icon in the Notifications area (or System tray): Select Settings to open the Settings dialog:","title":"Docker Settings dialog"},{"location":"2.Docker/Docker-Start-Windows.html#general","text":"On the General tab of the Settings dialog, you can configure when to start and update Docker. Start Docker when you log in - Automatically start Docker Desktop upon Windows system login. Automatically check for updates - By default, Docker Desktop automatically checks for updates and notifies you when an update is available. Click OK to accept and install updates (or cancel to keep the current version). You can manually update by choosing Check for Updates from the main Docker menu. Expose daemon on tcp://localhost:2375 without TLS - Click this option to enable legacy clients to connect to the Docker daemon. You must use this option with caution as exposing the daemon without TLS can result in remote code execution attacks. Send usage statistics - By default, Docker Desktop sends diagnostics, crash reports, and usage data. This information helps Docker improve and troubleshoot the application. Clear the check box to opt out. Docker may periodically prompt you for more information. Click Switch to the Edge version to learn more about Docker Desktop Edge releases.","title":"General"},{"location":"2.Docker/Docker-Start-Windows.html#resources","text":"The Resources tab allows you to configure CPU, memory, disk, proxies, network, and other resources. Different settings are available for configuration depending on whether you are using Linux containers in WSL 2 mode, Linux containers in Hyper-V mode, or Windows containers.","title":"Resources"},{"location":"2.Docker/Docker-Start-Windows.html#advanced","text":"Note The Advanced tab is only available in Hyper-V mode, because in WSL 2 mode and Windows container mode these resources are managed by Windows. In WSL 2 mode, you can configure limits on the memory, CPU, and swap size allocated to the WSL 2 utility VM . Use the Advanced tab to limit resources available to Docker. CPUs : By default, Docker Desktop is set to use half the number of processors available on the host machine. To increase processing power, set this to a higher number; to decrease, lower the number. Memory : By default, Docker Desktop is set to use 2 GB runtime memory, allocated from the total available memory on your machine. To increase the RAM, set this to a higher number. To decrease it, lower the number. Swap : Configure swap file size as needed. The default is 1 GB. Disk image size : Specify the size of the disk image. Disk image location : Specify the location of the Linux volume where containers and images are stored. You can also move the disk image to a different location. If you attempt to move a disk image to a location that already has one, you get a prompt asking if you want to use the existing image or replace it.","title":"ADVANCED"},{"location":"2.Docker/Docker-Start-Windows.html#file-sharing","text":"Note The File sharing tab is only available in Hyper-V mode, because in WSL 2 mode and Windows container mode all files are automatically shared by Windows. Use File sharing to allow local directories on Windows to be shared with Linux containers. This is especially useful for editing source code in an IDE on the host while running and testing the code in a container. Note that configuring file sharing is not necessary for Windows containers, only Linux containers . If a directory is not shared with a Linux container you may get file not found or cannot start service errors at runtime. See Volume mounting requires shared folders for Linux containers . File share settings are: Add a Directory : Click + and navigate to the directory you want to add. Apply & Restart makes the directory available to containers using Docker\u2019s bind mount ( -v ) feature. Tips on shared folders, permissions, and volume mounts Shared folders are designed to allow application code to be edited on the host while being executed in containers. For non-code items such as cache directories or databases, the performance will be much better if they are stored in the Linux VM, using a data volume (named volume) or data container . Docker Desktop sets permissions to read/write/execute for users, groups and others 0777 or a+rwx . This is not configurable. See Permissions errors on data directories for shared volumes . Windows presents a case-insensitive view of the filesystem to applications while Linux is case-sensitive. On Linux it is possible to create 2 separate files: test and Test , while on Windows these filenames would actually refer to the same underlying file. This can lead to problems where an app works correctly on a developer Windows machine (where the file contents are shared) but fails when run in Linux in production (where the file contents are distinct). To avoid this, Docker Desktop insists that all shared files are accessed as their original case. Therefore if a file is created called test , it must be opened as test . Attempts to open Test will fail with \u201cNo such file or directory\u201d. Similarly once a file called test is created, attempts to create a second file called Test will fail.","title":"FILE SHARING"},{"location":"2.Docker/Docker-Start-Windows.html#shared-folders-on-demand","text":"You can share a folder \u201con demand\u201d the first time a particular folder is used by a container. If you run a Docker command from a shell with a volume mount (as shown in the example below) or kick off a Compose file that includes volume mounts, you get a popup asking if you want to share the specified folder. You can select to Share it , in which case it is added your Docker Desktop Shared Folders list and available to containers. Alternatively, you can opt not to share it by selecting Cancel .","title":"SHARED FOLDERS ON DEMAND"},{"location":"2.Docker/Docker-Start-Windows.html#proxies","text":"Docker Desktop lets you configure HTTP/HTTPS Proxy Settings and automatically propagates these to Docker. For example, if you set your proxy settings to http://proxy.example.com , Docker uses this proxy when pulling containers. Your proxy settings, however, will not be propagated into the containers you start. If you wish to set the proxy settings for your containers, you need to define environment variables for them, just like you would do on Linux, for example: > docker run -e HTTP_PROXY=http://proxy.example.com:3128 alpine env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME=b7edf988b2b5 TERM=xterm HOME=/root HTTP_PROXY=http://proxy.example.com:3128 For more information on setting environment variables for running containers, see Set environment variables .","title":"PROXIES"},{"location":"2.Docker/Docker-Start-Windows.html#network","text":"Note The Network tab is not available in Windows container mode because networking is managed by Windows. You can configure Docker Desktop networking to work on a virtual private network (VPN). Specify a network address translation (NAT) prefix and subnet mask to enable Internet connectivity. DNS Server : You can configure the DNS server to use dynamic or static IP addressing. Note : Some users reported problems connecting to Docker Hub on Docker Desktop Stable version. This would manifest as an error when trying to run docker commands that pull images from Docker Hub that are not already downloaded, such as a first time run of docker run hello-world . If you encounter this, reset the DNS server to use the Google DNS fixed address: 8.8.8.8 . For more information, see Networking issues in Troubleshooting. Updating these settings requires a reconfiguration and reboot of the Linux VM.","title":"NETWORK"},{"location":"2.Docker/Docker-Start-Windows.html#wsl-integration","text":"In WSL 2 mode, you can configure which WSL 2 distributions will have the Docker WSL integration. By default, the integration will be enabled on your default WSL distribution. To change your default WSL distro, run wsl --set-default <distro name> . (For example, to set Ubuntu as your default WSL distro, run wsl --set-default ubuntu ). You can also select any additional distributions you would like to enable the WSL 2 integration on. For more details on configuring Docker Desktop to use WSL 2, see Docker Desktop WSL 2 backend .","title":"WSL INTEGRATION"},{"location":"2.Docker/Docker-Start-Windows.html#docker-engine","text":"The Docker Engine page allows you to configure the Docker daemon to determine how your containers run. Type a JSON configuration file in the box to configure the daemon settings. For a full list of options, see the Docker Engine dockerd commandline reference . Click Apply & Restart to save your settings and restart Docker Desktop.","title":"Docker Engine"},{"location":"2.Docker/Docker-Start-Windows.html#command-line","text":"On the Command Line page, you can specify whether or not to enable experimental features. On both Docker Desktop Edge and Stable releases, you can toggle the experimental features on and off. If you toggle the experimental features off, Docker Desktop uses the current generally available release of Docker Engine.","title":"Command Line"},{"location":"2.Docker/Docker-Start-Windows.html#experimental-features","text":"Docker Desktop Edge releases have the experimental version of Docker Engine enabled by default, described in the Docker Experimental Features README on GitHub. Experimental features provide early access to future product functionality. These features are intended for testing and feedback only as they may change between releases without warning or can be removed entirely from a future release. Experimental features must not be used in production environments. Docker does not offer support for experimental features. To enable experimental features in the Docker CLI, edit the config.json file and set experimental to enabled. To enable experimental features from the Docker Desktop menu, click Settings ( Preferences on macOS) > Command Line and then turn on the Enable experimental features toggle. Click Apply & Restart . For a list of current experimental features in the Docker CLI, see Docker CLI Experimental features . Run docker version to verify whether you have enabled experimental features. Experimental mode is listed under Server data. If Experimental is true , then Docker is running in experimental mode, as shown here: > docker version Client: Docker Engine - Community Version: 19.03.1 API version: 1.40 Go version: go1.12.5 Git commit: 74b1e89 Built: Thu Jul 25 21:17:08 2019 OS/Arch: windows/amd64 Experimental: true Server: Docker Engine - Community Engine: Version: 19.03.1 API version: 1.40 (minimum version 1.12) Go version: go1.12.5 Git commit: 74b1e89 Built: Thu Jul 25 21:17:52 2019 OS/Arch: linux/amd64 Experimental: true containerd: Version: v1.2.6 GitCommit: 894b81a4b802e4eb2a91d1ce216b8817763c29fb runc: Version: 1.0.0-rc8 GitCommit: 425e105d5a03fabd737a126ad93d62a9eeede87f docker-init: Version: 0.18.0 GitCommit: fec3683","title":"EXPERIMENTAL FEATURES"},{"location":"2.Docker/Docker-Start-Windows.html#kubernetes","text":"Note The Kubernetes tab is not available in Windows container mode. Docker Desktop includes a standalone Kubernetes server that runs on your Windows host, so that you can test deploying your Docker workloads on Kubernetes. The Kubernetes client command, kubectl , is included and configured to connect to the local Kubernetes server. If you have kubectl already installed and pointing to some other environment, such as minikube or a GKE cluster, be sure to change context so that kubectl is pointing to docker-desktop : > kubectl config get-contexts > kubectl config use-context docker-desktop To enable Kubernetes support and install a standalone instance of Kubernetes running as a Docker container, select Enable Kubernetes . To set Kubernetes as the default orchestrator , select Deploy Docker Stacks to Kubernetes by default . By default, Kubernetes containers are hidden from commands like docker service ls , because managing them manually is not supported. To make them visible, select Show system containers (advanced) . Most users do not need this option. Click Apply & Restart to save the settings. This instantiates images required to run the Kubernetes server as containers, and installs the kubectl.exe command in the path. When Kubernetes is enabled and running, an additional status bar item displays at the bottom right of the Docker Desktop Settings dialog. The status of Kubernetes shows in the Docker menu and the context points to docker-desktop . To disable Kubernetes support at any time, clear the Enable Kubernetes check box. The Kubernetes containers are stopped and removed, and the /usr/local/bin/kubectl command is removed. To delete all stacks and Kubernetes resources, select Reset Kubernetes Cluster . If you installed kubectl by another method, and experience conflicts, remove it. For more information on using the Kubernetes integration with Docker Desktop, see Deploy on Kubernetes .","title":"Kubernetes"},{"location":"2.Docker/Docker-Start-Windows.html#reset","text":"The Restart Docker Desktop and Reset to factory defaults options are now available on the Troubleshoot menu. For information, see Logs and Troubleshooting .","title":"Reset"},{"location":"2.Docker/Docker-Start-Windows.html#troubleshoot","text":"Visit our Logs and Troubleshooting guide for more details. Log on to our Docker Desktop for Windows forum to get help from the community, review current user topics, or join a discussion. Log on to Docker Desktop for Windows issues on GitHub to report bugs or problems and review community reported issues. For information about providing feedback on the documentation or update it yourself, see Contribute to documentation .","title":"Troubleshoot"},{"location":"2.Docker/Docker-Start-Windows.html#switch-between-windows-and-linux-containers","text":"From the Docker Desktop menu, you can toggle which daemon (Linux or Windows) the Docker CLI talks to. Select Switch to Windows containers to use Windows containers, or select Switch to Linux containers to use Linux containers (the default). For more information on Windows containers, refer to the following documentation: Microsoft documentation on Windows containers . Build and Run Your First Windows Server Container (Blog Post) gives a quick tour of how to build and run native Docker Windows containers on Windows 10 and Windows Server 2016 evaluation releases. Getting Started with Windows Containers (Lab) shows you how to use the MusicStore application with Windows containers. The MusicStore is a standard .NET application and, forked here to use containers , is a good example of a multi-container application. To understand how to connect to Windows containers from the local host, see Limitations of Windows containers for localhost and published ports Settings dialog changes with Windows containers When you switch to Windows containers, the Settings dialog only shows those tabs that are active and apply to your Windows containers: General Proxies Daemon Reset If you set proxies or daemon configuration in Windows containers mode, these apply only on Windows containers. If you switch back to Linux containers, proxies and daemon configurations return to what you had set for Linux containers. Your Windows container settings are retained and become available again when you switch back.","title":"Switch between Windows and Linux containers"},{"location":"2.Docker/Docker-Start-Windows.html#dashboard","text":"The Docker Desktop Dashboard enables you to interact with containers and applications and manage the lifecycle of your applications directly from your machine. The Dashboard UI shows all running, stopped, and started containers with their state. It provides an intuitive interface to perform common actions to inspect and manage containers and Docker Compose applications. For more information, see Docker Desktop Dashboard .","title":"Dashboard"},{"location":"2.Docker/Docker-Start-Windows.html#docker-hub","text":"Select Sign in /Create Docker ID from the Docker Desktop menu to access your Docker Hub account. Once logged in, you can access your Docker Hub repositories directly from the Docker Desktop menu. For more information, refer to the following Docker Hub topics : Organizations and Teams in Docker Hub Builds and Images","title":"Docker Hub"},{"location":"2.Docker/Docker-Start-Windows.html#two-factor-authentication","text":"Docker Desktop enables you to sign into Docker Hub using two-factor authentication. Two-factor authentication provides an extra layer of security when accessing your Docker Hub account. You must enable two-factor authentication in Docker Hub before signing into your Docker Hub account through Docker Desktop. For instructions, see Enable two-factor authentication for Docker Hub . After you have enabled two-factor authentication: Go to the Docker Desktop menu and then select Sign in / Create Docker ID . Enter your Docker ID and password and click Sign in . After you have successfully signed in, Docker Desktop prompts you to enter the authentication code. Enter the six-digit code from your phone and then click Verify . After you have successfully authenticated, you can access your organizations and repositories directly from the Docker Desktop menu.","title":"Two-factor authentication"},{"location":"2.Docker/Docker-Start-Windows.html#adding-tls-certificates","text":"You can add trusted Certificate Authorities (CAs) to your Docker daemon to verify registry server certificates, and client certificates , to authenticate to registries. For more information, see How do I add custom CA certificates? and How do I add client certificates? in the FAQs.","title":"Adding TLS certificates"},{"location":"2.Docker/Docker-Start-Windows.html#how-do-i-add-custom-ca-certificates","text":"Docker Desktop supports all trusted Certificate Authorities (CAs) (root or intermediate). Docker recognizes certs stored under Trust Root Certification Authorities or Intermediate Certification Authorities. Docker Desktop creates a certificate bundle of all user-trusted CAs based on the Windows certificate store, and appends it to Moby trusted certificates. Therefore, if an enterprise SSL certificate is trusted by the user on the host, it is trusted by Docker Desktop. To learn more about how to install a CA root certificate for the registry, see Verify repository client with certificates in the Docker Engine topics.","title":"How do I add custom CA certificates?"},{"location":"2.Docker/Docker-Start-Windows.html#how-do-i-add-client-certificates","text":"You can add your client certificates in ~/.docker/certs.d/<MyRegistry>:<Port>/client.cert and ~/.docker/certs.d/<MyRegistry>:<Port>/client.key . You do not need to push your certificates with git commands. When the Docker Desktop application starts, it copies the ~/.docker/certs.d folder on your Windows system to the /etc/docker/certs.d directory on Moby (the Docker Desktop virtual machine running on Hyper-V). You need to restart Docker Desktop after making any changes to the keychain or to the ~/.docker/certs.d directory in order for the changes to take effect. The registry cannot be listed as an insecure registry (see Docker Daemon ). Docker Desktop ignores certificates listed under insecure registries, and does not send client certificates. Commands like docker run that attempt to pull from the registry produce error messages on the command line, as well as on the registry. To learn more about how to set the client TLS certificate for verification, see Verify repository client with certificates in the Docker Engine topics.","title":"How do I add client certificates?"},{"location":"2.Docker/Docker-Start-Windows.html#where-to-go-next","text":"Try out the walkthrough at Get Started . Dig in deeper with Docker Labs example walkthroughs and source code. Refer to the Docker CLI Reference Guide . windows , edge , tutorial , run , docker , local , machine","title":"Where to go next"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html","text":"Play with Docker Classroom \u00b6 The Play with Docker classroom brings you labs and tutorials that help you get hands-on experience using Docker. In this classroom you will find a mix of labs and tutorials that will help Docker users, including SysAdmins, IT Pros, and Developers. There is a mix of hands-on tutorials right in the browser, instructions on setting up and using Docker in your own environment, and resources about best practices for developing and deploying your own applications.We recommend you start with one of our Getting Started Guides, and then explore the individual labs that explore many advanced features of Docker. For a comprehensive approach to understanding Docker, choose your preferred journey, IT Pros and System Administrators , or Developers . Getting Started Walk-through for IT Pros and System Administrators \u00b6 Learn more about Docker, how it works and how it can help you deploy secure, scalable applications and save money along the way. Stage 1: The Basics Learn more about the core concepts of Docker and what it can do for your operations team, and help you understand the fundamental value proposition for Docker. Topics include: Fundamentals of Docker Deploying a multi-service application Stage 2: Digging Deeper This stage will help you learn more about some of the advanced topics of Docker. Topics include: Security Networking Orchestration Stage 3: Moving to Production This stage will give you the resources to deploy a production application, developer a strategy for integrating Docker into your production environment, and get recognized as a leader in your organization on implementing Docker. Topics include: Reference Implementations Portability Storage Production anti-patterns Getting Started Walk-through for Developers \u00b6 Learn the core concepts of Docker and how it can make building apps faster, easier, and more secure. Stage 1: The Basics \u00b6 This stage will teach you the basics. Topics include: Get you familiar with the core concepts of Docker Show you how to build and deploy multi-service applications Docker for Developers Stage 1 \u00b6 This stage will Get you familiar with the core concepts of Docker Show you how to build and deploy basic applications Self-guided in-browser tutorials \u00b6 Docker for Beginners - Linux Application Containerization and Microservice Orchestration Deploying a Multi-Service App in Docker Swarm Mode Stage 2: Digging Deeper \u00b6 This stage show you how to incorporate Docker into your entire developer workflow. Topics include: Use Docker with various IDEs Get started with Windows containers Preparing your workflow Stage 3: Moving to Staging \u00b6 This stage will include advanced topics designed to get you ready for production environments. Topics include: Deploy an application to a staging environment Manage your staging environment with Docker Swarm Mode Learn how to build a secure application Or for a full list of individual labs on this site, check out our labs page Full list of individual labs","title":"Play with Docker Classroom"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#play-with-docker-classroom","text":"The Play with Docker classroom brings you labs and tutorials that help you get hands-on experience using Docker. In this classroom you will find a mix of labs and tutorials that will help Docker users, including SysAdmins, IT Pros, and Developers. There is a mix of hands-on tutorials right in the browser, instructions on setting up and using Docker in your own environment, and resources about best practices for developing and deploying your own applications.We recommend you start with one of our Getting Started Guides, and then explore the individual labs that explore many advanced features of Docker. For a comprehensive approach to understanding Docker, choose your preferred journey, IT Pros and System Administrators , or Developers .","title":"Play with Docker Classroom"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#getting-started-walk-through-for-it-pros-and-system-administrators","text":"Learn more about Docker, how it works and how it can help you deploy secure, scalable applications and save money along the way. Stage 1: The Basics Learn more about the core concepts of Docker and what it can do for your operations team, and help you understand the fundamental value proposition for Docker. Topics include: Fundamentals of Docker Deploying a multi-service application Stage 2: Digging Deeper This stage will help you learn more about some of the advanced topics of Docker. Topics include: Security Networking Orchestration Stage 3: Moving to Production This stage will give you the resources to deploy a production application, developer a strategy for integrating Docker into your production environment, and get recognized as a leader in your organization on implementing Docker. Topics include: Reference Implementations Portability Storage Production anti-patterns","title":"Getting Started Walk-through for IT Pros and System Administrators"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#getting-started-walk-through-for-developers","text":"Learn the core concepts of Docker and how it can make building apps faster, easier, and more secure.","title":"Getting Started Walk-through for Developers"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#stage-1-the-basics","text":"This stage will teach you the basics. Topics include: Get you familiar with the core concepts of Docker Show you how to build and deploy multi-service applications","title":"Stage 1: The Basics"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#docker-for-developers-stage-1","text":"This stage will Get you familiar with the core concepts of Docker Show you how to build and deploy basic applications","title":"Docker for Developers Stage 1"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#self-guided-in-browser-tutorials","text":"Docker for Beginners - Linux Application Containerization and Microservice Orchestration Deploying a Multi-Service App in Docker Swarm Mode","title":"Self-guided in-browser tutorials"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#stage-2-digging-deeper","text":"This stage show you how to incorporate Docker into your entire developer workflow. Topics include: Use Docker with various IDEs Get started with Windows containers Preparing your workflow","title":"Stage 2: Digging Deeper"},{"location":"2.Docker/Play%20with%20Docker%20Classroom.html#stage-3-moving-to-staging","text":"This stage will include advanced topics designed to get you ready for production environments. Topics include: Deploy an application to a staging environment Manage your staging environment with Docker Swarm Mode Learn how to build a secure application Or for a full list of individual labs on this site, check out our labs page Full list of individual labs","title":"Stage 3: Moving to Staging"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html","text":"Docker for Beginners - Linux \u00b6 Aug 1, 2019 \u2022 @mikegcoleman In this lab, we will look at some basic Docker commands and a simple build-ship-run workflow. We\u2019ll start by running some simple containers, then we\u2019ll use a Dockerfile to build a custom app. Finally, we\u2019ll look at how to use bind mounts to modify a running container as you might if you were actively developing using Docker. Difficulty : Beginner (assumes no familiarity with Docker) Time : Approximately 30 minutes Tasks : Task 0: Prerequisites Task 1: Run some simple Docker containers Task 2: Package and run a custom app using Docker Task 3: Modify a Running Website Task 0: Prerequisites \u00b6 You will need all of the following to complete this lab: A clone of the lab\u2019s GitHub repo. A DockerID. Clone the Lab\u2019s GitHub Repo \u00b6 Use the following command to clone the lab\u2019s repo from GitHub (you can click the command or manually type it). This will make a copy of the lab\u2019s repo in a new sub-directory called linux_tweet_app . git clone https://github.com/dockersamples/linux_tweet_app Make sure you have a DockerID \u00b6 If you do not have a DockerID (a free login used to access Docker Hub), please visit Docker Hub and register for one. You will need this for later steps. Task 1: Run some simple Docker containers \u00b6 There are different ways to use containers. These include: To run a single task: This could be a shell script or a custom app. Interactively: This connects you to the container similar to the way you SSH into a remote server. In the background: For long-running services like websites and databases. In this section you\u2019ll try each of those options and see how Docker manages the workload. Run a single task in an Alpine Linux container \u00b6 In this step we\u2019re going to start a new container and tell it to run the hostname command. The container will start, execute the hostname command, then exit. Run the following command in your Linux console. docker container run alpine hostname The output below shows that the alpine:latest image could not be found locally. When this happens, Docker automatically pulls it from Docker Hub. After the image is pulled, the container\u2019s hostname is displayed ( 888e89a3b36b in the example below). Unable to find image 'alpine:latest' locally latest: Pulling from library/alpine 88286f41530e: Pull complete Digest: sha256:f006ecbb824d87947d0b51ab8488634bf69fe4094959d935c0c103f4820a417d Status: Downloaded newer image for alpine:latest 888e89a3b36b Docker keeps a container running as long as the process it started inside the container is still running. In this case the hostname process exits as soon as the output is written. This means the container stops. However, Docker doesn\u2019t delete resources by default, so the container still exists in the Exited state. List all containers. docker container ls --all Notice that your Alpine Linux container is in the Exited state. CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 888e89a3b36b alpine \"hostname\" 50 seconds ago Exited (0) 49 seconds ago awesome_elion Note: The container ID is the hostname that the container displayed. In the example above it\u2019s 888e89a3b36b . Containers which do one task and then exit can be very useful. You could build a Docker image that executes a script to configure something. Anyone can execute that task just by running the container - they don\u2019t need the actual scripts or configuration information. Run an interactive Ubuntu container \u00b6 You can run a container based on a different version of Linux than is running on your Docker host. In the next example, we are going to run an Ubuntu Linux container on top of an Alpine Linux Docker host (Play With Docker uses Alpine Linux for its nodes). Run a Docker container and access its shell. docker container run --interactive --tty --rm ubuntu bash In this example, we\u2019re giving Docker three parameters: --interactive says you want an interactive session. --tty allocates a pseudo-tty. --rm tells Docker to go ahead and remove the container when it\u2019s done executing. The first two parameters allow you to interact with the Docker container. We\u2019re also telling the container to run bash as its main process (PID 1). When the container starts you\u2019ll drop into the bash shell with the default prompt root@<container id>:/# . Docker has attached to the shell in the container, relaying input and output between your local session and the shell session in the container. Run the following commands in the container. ls / will list the contents of the root director in the container, ps aux will show running processes in the container, cat /etc/issue will show which Linux distro the container is running, in this case Ubuntu 18.04.3 LTS. ls / ps aux cat /etc/issue Type exit to leave the shell session. This will terminate the bash process, causing the container to exit. exit Note: As we used the --rm flag when we started the container, Docker removed the container when it stopped. This means if you run another docker container ls --all you won\u2019t see the Ubuntu container. For fun, let\u2019s check the version of our host VM. cat /etc/issue You should see: Welcome to Alpine Linux 3.8 Kernel \\r on an \\m (\\l) Notice that our host VM is running Alpine Linux, yet we were able to run an Ubuntu container. As previously mentioned, the distribution of Linux inside the container does not need to match the distribution of Linux running on the Docker host. However, Linux containers require the Docker host to be running a Linux kernel. For example, Linux containers cannot run directly on Windows Docker hosts. The same is true of Windows containers - they need to run on a Docker host with a Windows kernel. Interactive containers are useful when you are putting together your own image. You can run a container and verify all the steps you need to deploy your app, and capture them in a Dockerfile. You can commit a container to make an image from it - but you should avoid that wherever possible. It\u2019s much better to use a repeatable Dockerfile to build your image. You\u2019ll see that shortly. Run a background MySQL container \u00b6 Background containers are how you\u2019ll run most applications. Here\u2019s a simple example using MySQL. Run a new MySQL container with the following command. docker container run \\ --detach \\ --name mydb \\ -e MYSQL_ROOT_PASSWORD=my-secret-pw \\ mysql:latest --detach will run the container in the background. --name will name it mydb . -e will use an environment variable to specify the root password (NOTE: This should never be done in production). As the MySQL image was not available locally, Docker automatically pulled it from Docker Hub. Unable to find image 'mysql:latest' locallylatest: Pulling from library/mysql aa18ad1a0d33: Pull complete fdb8d83dece3: Pull complete 75b6ce7b50d3: Pull complete ed1d0a3a64e4: Pull complete 8eb36a82c85b: Pull complete 41be6f1a1c40: Pull complete 0e1b414eac71: Pull complete 914c28654a91: Pull complete 587693eb988c: Pull complete b183c3585729: Pull complete 315e21657aa4: Pull complete Digest: sha256:0dc3dacb751ef46a6647234abdec2d47400f0dfbe77ab490b02bffdae57846ed Status: Downloaded newer image for mysql:latest 41d6157c9f7d1529a6c922acb8167ca66f167119df0fe3d86964db6c0d7ba4e0 As long as the MySQL process is running, Docker will keep the container running in the background. List the running containers. docker container ls Notice your container is running. CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3f4e8da0caf7 mysql:latest \"docker-entrypoint...\" 52 seconds ago Up 51 seconds 3306/tcp mydb You can check what\u2019s happening in your containers by using a couple of built-in Docker commands: docker container logs and docker container top . docker container logs mydb This shows the logs from the MySQL Docker container. <output truncated> 2017-09-29T16:02:58.605004Z 0 [Note] Executing 'SELECT * FROM INFORMATION_SCHEMA.TABLES;' to get a list of tables using the deprecated partition engine. You may use the startup option '--disable-partition-engine-check' to skip this check. 2017-09-29T16:02:58.605026Z 0 [Note] Beginning of list of non-natively partitioned tables 2017-09-29T16:02:58.616575Z 0 [Note] End of list of non-natively partitioned tables Let\u2019s look at the processes running inside the container. docker container top mydb You should see the MySQL daemon ( mysqld ) is running in the container. PID USER TIME COMMAND 2876 999 0:00 mysqld Although MySQL is running, it is isolated within the container because no network ports have been published to the host. Network traffic cannot reach containers from the host unless ports are explicitly published. List the MySQL version using docker container exec . docker container exec allows you to run a command inside a container. In this example, we\u2019ll use docker container exec to run the command-line equivalent of mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version inside our MySQL container. docker exec -it mydb \\ mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version You will see the MySQL version number, as well as a handy warning. mysql: [Warning] Using a password on the command line interface can be insecure. mysql Ver 14.14 Distrib 5.7.19, for Linux (x86_64) using EditLine wrapper You can also use docker container exec to connect to a new shell process inside an already-running container. Executing the command below will give you an interactive shell ( sh ) inside your MySQL container. docker exec -it mydb sh Notice that your shell prompt has changed. This is because your shell is now connected to the sh process running inside of your container. Let\u2019s check the version number by running the same command again, only this time from within the new shell session in the container. mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version Notice the output is the same as before. Type exit to leave the interactive shell session. exit Task 2: Package and run a custom app using Docker \u00b6 In this step you\u2019ll learn how to package your own apps as Docker images using a Dockerfile . The Dockerfile syntax is straightforward. In this task, we\u2019re going to create a simple NGINX website from a Dockerfile. Build a simple website image \u00b6 Let\u2019s have a look at the Dockerfile we\u2019ll be using, which builds a simple website that allows you to send a tweet. Make sure you\u2019re in the linux_tweet_app directory. cd ~/linux_tweet_app Display the contents of the Dockerfile. cat Dockerfile FROM nginx:latest COPY index.html /usr/share/nginx/html COPY linux.png /usr/share/nginx/html EXPOSE 80 443 CMD [\"nginx\", \"-g\", \"daemon off;\"] Let\u2019s see what each of these lines in the Dockerfile do. FROM specifies the base image to use as the starting point for this new image you\u2019re creating. For this example we\u2019re starting from nginx:latest . COPY copies files from the Docker host into the image, at a known location. In this example, COPY is used to copy two files into the image: index.html . and a graphic that will be used on our webpage. EXPOSE documents which ports the application uses. CMD specifies what command to run when a container is started from the image. Notice that we can specify the command, as well as run-time arguments. In order to make the following commands more copy/paste friendly, export an environment variable containing your DockerID (if you don\u2019t have a DockerID you can get one for free via Docker Hub ). You will have to manually type this command as it requires your unique DockerID. export DOCKERID=<your docker id> Echo the value of the variable back to the terminal to ensure it was stored correctly. echo $DOCKERID Use the docker image build command to create a new Docker image using the instructions in the Dockerfile. --tag allows us to give the image a custom name. In this case it\u2019s comprised of our DockerID, the application name, and a version. Having the Docker ID attached to the name will allow us to store it on Docker Hub in a later step . tells Docker to use the current directory as the build context Be sure to include period ( . ) at the end of the command. docker image build --tag $DOCKERID/linux_tweet_app:1.0 . The output below shows the Docker daemon executing each line in the Dockerfile Sending build context to Docker daemon 32.77kB Step 1/5 : FROM nginx:latest latest: Pulling from library/nginx afeb2bfd31c0: Pull complete 7ff5d10493db: Pull complete d2562f1ae1d0: Pull complete Digest: sha256:af32e714a9cc3157157374e68c818b05ebe9e0737aac06b55a09da374209a8f9 Status: Downloaded newer image for nginx:latest ---> da5939581ac8 Step 2/5 : COPY index.html /usr/share/nginx/html ---> eba2eec2bea9 Step 3/5 : COPY linux.png /usr/share/nginx/html ---> 4d080f499b53 Step 4/5 : EXPOSE 80 443 ---> Running in 47232cb5699f ---> 74c968a9165f Removing intermediate container 47232cb5699f Step 5/5 : CMD nginx -g daemon off; ---> Running in 4623761274ac ---> 12045a0df899 Removing intermediate container 4623761274ac Successfully built 12045a0df899 Successfully tagged <your docker ID>/linux_tweet_app:latest Use the docker container run command to start a new container from the image you created. As this container will be running an NGINX web server, we\u2019ll use the --publish flag to publish port 80 inside the container onto port 80 on the host. This will allow traffic coming in to the Docker host on port 80 to be directed to port 80 in the container. The format of the --publish flag is host_port : container_port . docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 Any external traffic coming into the server on port 80 will now be directed into the container on port 80. In a later step you will see how to map traffic from two different ports - this is necessary when two containers use the same port to communicate since you can only expose the port once on the host. Click here to load the website which should be running. Once you\u2019ve accessed your website, shut it down and remove it. docker container rm --force linux_tweet_app Note: We used the --force parameter to remove the running container without shutting it down. This will ungracefully shutdown the container and permanently remove it from the Docker host. In a production environment you may want to use docker container stop to gracefully stop the container and leave it on the host. You can then use docker container rm to permanently remove it. Task 3: Modify a running website \u00b6 When you\u2019re actively working on an application it is inconvenient to have to stop the container, rebuild the image, and run a new version every time you make a change to your source code. One way to streamline this process is to mount the source code directory on the local machine into the running container. This will allow any changes made to the files on the host to be immediately reflected in the container. We do this using something called a bind mount . When you use a bind mount, a file or directory on the host machine is mounted into a container running on the same host. Start our web app with a bind mount \u00b6 Let\u2019s start the web app and mount the current directory into the container. In this example we\u2019ll use the --mount flag to mount the current directory on the host into /usr/share/nginx/html inside the container. Be sure to run this command from within the linux_tweet_app directory on your Docker host. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ --mount type=bind,source=\"$(pwd)\",target=/usr/share/nginx/html \\ $DOCKERID/linux_tweet_app:1.0 Remember from the Dockerfile, usr/share/nginx/html is where the html files are stored for the web app. The website should be running. Modify the running website \u00b6 Bind mounts mean that any changes made to the local file system are immediately reflected in the running container. Copy a new index.html into the container. The Git repo that you pulled earlier contains several different versions of an index.html file. You can manually run an ls command from within the ~/linux_tweet_app directory to see a list of them. In this step we\u2019ll replace index.html with index-new.html . cp index-new.html index.html Go to the running website and refresh the page . Notice that the site has changed. If you are comfortable with vi you can use it to load the local index.html file and make additional changes. Those too would be reflected when you reload the webpage. If you are really adventurous, why not try using exec to access the running container and modify the files stored there. Even though we\u2019ve modified the index.html local filesystem and seen it reflected in the running container, we\u2019ve not actually changed the Docker image that the container was started from. To show this, stop the current container and re-run the 1.0 image without a bind mount. Stop and remove the currently running container. docker rm --force linux_tweet_app Rerun the current version without a bind mount. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 Notice the website is back to the original version. Stop and remove the current container docker rm --force linux_tweet_app Update the image \u00b6 To persist the changes you made to the index.html file into the image, you need to build a new version of the image. Build a new image and tag it as 2.0 Remember that you previously modified the index.html file on the Docker hosts local filesystem. This means that running another docker image build command will build a new image with the updated index.html Be sure to include the period ( . ) at the end of the command. docker image build --tag $DOCKERID/linux_tweet_app:2.0 . Notice how fast that built! This is because Docker only modified the portion of the image that changed vs. rebuilding the whole image. Let\u2019s look at the images on the system. docker image ls You now have both versions of the web app on your host. REPOSITORY TAG IMAGE ID CREATED SIZE <docker id>/linux_tweet_app 2.0 01612e05312b 16 seconds ago 108MB <docker id>/linux_tweet_app 1.0 bb32b5783cd3 4 minutes ago 108MB mysql latest b4e78b89bcf3 2 weeks ago 412MB ubuntu latest 2d696327ab2e 2 weeks ago 122MB nginx latest da5939581ac8 3 weeks ago 108MB alpine latest 76da55c8019d 3 weeks ago 3.97MB Test the new version \u00b6 Run a new container from the new version of the image. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:2.0 Check the new version of the website ( You may need to refresh your browser to get the new version to load ). The web page will have an orange background. We can run both versions side by side. The only thing we need to be aware of is that we cannot have two containers using port 80 on the same host. As we\u2019re already using port 80 for the container running from the 2.0 version of the image, we will start a new container and publish it on port 8080. Additionally, we need to give our container a unique name ( old_linux_tweet_app ) Run another new container, this time from the old version of the image. Notice that this command maps the new container to port 8080 on the host. This is because two containers cannot map to the same port on a single Docker host. docker container run \\ --detach \\ --publish 8080:80 \\ --name old_linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 View the old version of the website . Push your images to Docker Hub \u00b6 List the images on your Docker host. docker image ls -f reference=\"$DOCKERID/*\" You will see that you now have two linux_tweet_app images - one tagged as 1.0 and the other as 2.0 . REPOSITORY TAG IMAGE ID CREATED SIZE <docker id>/linux_tweet_app 2.0 01612e05312b 3 minutes ago 108MB <docker id>/linux_tweet_app 1.0 bb32b5783cd3 7 minutes ago 108MB These images are only stored in your Docker hosts local repository. Your Docker host will be deleted after the workshop. In this step we\u2019ll push the images to a public repository so you can run them from any Linux machine with Docker. Distribution is built into the Docker platform. You can build images locally and push them to a public or private registry , making them available to other users. Anyone with access can pull that image and run a container from it. The behavior of the app in the container will be the same for everyone, because the image contains the fully-configured app - the only requirements to run it are Linux and Docker. Docker Hub is the default public registry for Docker images. Before you can push your images, you will need to log into Docker Hub. docker login You will need to supply your Docker ID credentials when prompted. Username: <your docker id> Password: <your docker id password> Login Succeeded Push version 1.0 of your web app using docker image push . docker image push $DOCKERID/linux_tweet_app:1.0 You\u2019ll see the progress as the image is pushed up to Docker Hub. The push refers to a repository [docker.io/<your docker id>/linux_tweet_app] 910e84bcef7a: Pushed 1dee161c8ba4: Pushed 110566462efa: Pushed 305e2b6ef454: Pushed 24e065a5f328: Pushed 1.0: digest: sha256:51e937ec18c7757879722f15fa1044cbfbf2f6b7eaeeb578c7c352baba9aa6dc size: 1363 Now push version 2.0 . docker image push $DOCKERID/linux_tweet_app:2.0 Notice that several lines of the output say Layer already exists . This is because Docker will leverage read-only layers that are the same as any previously uploaded image layers. The push refers to a repository [docker.io/<your docker id>/linux_tweet_app] 0b171f8fbe22: Pushed 70d38c767c00: Pushed 110566462efa: Layer already exists 305e2b6ef454: Layer already exists 24e065a5f328: Layer already exists 2.0: digest: sha256:7c51f77f90b81e5a598a13f129c95543172bae8f5850537225eae0c78e4f3add size: 1363 You can browse to https://hub.docker.com/r/<your docker id>/ and see your newly-pushed Docker images. These are public repositories, so anyone can pull the image - you don\u2019t even need a Docker ID to pull public images. Docker Hub also supports private repositories. Next Step \u00b6 Check out the introduction to a multi-service application stack orchestration in the Application Containerization and Microservice Orchestration tutorial.","title":"Docker for Beginners - Linux"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#docker-for-beginners-linux","text":"Aug 1, 2019 \u2022 @mikegcoleman In this lab, we will look at some basic Docker commands and a simple build-ship-run workflow. We\u2019ll start by running some simple containers, then we\u2019ll use a Dockerfile to build a custom app. Finally, we\u2019ll look at how to use bind mounts to modify a running container as you might if you were actively developing using Docker. Difficulty : Beginner (assumes no familiarity with Docker) Time : Approximately 30 minutes Tasks : Task 0: Prerequisites Task 1: Run some simple Docker containers Task 2: Package and run a custom app using Docker Task 3: Modify a Running Website","title":"Docker for Beginners - Linux"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#task-0-prerequisites","text":"You will need all of the following to complete this lab: A clone of the lab\u2019s GitHub repo. A DockerID.","title":"Task 0: Prerequisites"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#clone-the-labs-github-repo","text":"Use the following command to clone the lab\u2019s repo from GitHub (you can click the command or manually type it). This will make a copy of the lab\u2019s repo in a new sub-directory called linux_tweet_app . git clone https://github.com/dockersamples/linux_tweet_app","title":"Clone the Lab\u2019s GitHub Repo"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#make-sure-you-have-a-dockerid","text":"If you do not have a DockerID (a free login used to access Docker Hub), please visit Docker Hub and register for one. You will need this for later steps.","title":"Make sure you have a DockerID"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#task-1-run-some-simple-docker-containers","text":"There are different ways to use containers. These include: To run a single task: This could be a shell script or a custom app. Interactively: This connects you to the container similar to the way you SSH into a remote server. In the background: For long-running services like websites and databases. In this section you\u2019ll try each of those options and see how Docker manages the workload.","title":"Task 1: Run some simple Docker containers"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#run-a-single-task-in-an-alpine-linux-container","text":"In this step we\u2019re going to start a new container and tell it to run the hostname command. The container will start, execute the hostname command, then exit. Run the following command in your Linux console. docker container run alpine hostname The output below shows that the alpine:latest image could not be found locally. When this happens, Docker automatically pulls it from Docker Hub. After the image is pulled, the container\u2019s hostname is displayed ( 888e89a3b36b in the example below). Unable to find image 'alpine:latest' locally latest: Pulling from library/alpine 88286f41530e: Pull complete Digest: sha256:f006ecbb824d87947d0b51ab8488634bf69fe4094959d935c0c103f4820a417d Status: Downloaded newer image for alpine:latest 888e89a3b36b Docker keeps a container running as long as the process it started inside the container is still running. In this case the hostname process exits as soon as the output is written. This means the container stops. However, Docker doesn\u2019t delete resources by default, so the container still exists in the Exited state. List all containers. docker container ls --all Notice that your Alpine Linux container is in the Exited state. CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 888e89a3b36b alpine \"hostname\" 50 seconds ago Exited (0) 49 seconds ago awesome_elion Note: The container ID is the hostname that the container displayed. In the example above it\u2019s 888e89a3b36b . Containers which do one task and then exit can be very useful. You could build a Docker image that executes a script to configure something. Anyone can execute that task just by running the container - they don\u2019t need the actual scripts or configuration information.","title":"Run a single task in an Alpine Linux container"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#run-an-interactive-ubuntu-container","text":"You can run a container based on a different version of Linux than is running on your Docker host. In the next example, we are going to run an Ubuntu Linux container on top of an Alpine Linux Docker host (Play With Docker uses Alpine Linux for its nodes). Run a Docker container and access its shell. docker container run --interactive --tty --rm ubuntu bash In this example, we\u2019re giving Docker three parameters: --interactive says you want an interactive session. --tty allocates a pseudo-tty. --rm tells Docker to go ahead and remove the container when it\u2019s done executing. The first two parameters allow you to interact with the Docker container. We\u2019re also telling the container to run bash as its main process (PID 1). When the container starts you\u2019ll drop into the bash shell with the default prompt root@<container id>:/# . Docker has attached to the shell in the container, relaying input and output between your local session and the shell session in the container. Run the following commands in the container. ls / will list the contents of the root director in the container, ps aux will show running processes in the container, cat /etc/issue will show which Linux distro the container is running, in this case Ubuntu 18.04.3 LTS. ls / ps aux cat /etc/issue Type exit to leave the shell session. This will terminate the bash process, causing the container to exit. exit Note: As we used the --rm flag when we started the container, Docker removed the container when it stopped. This means if you run another docker container ls --all you won\u2019t see the Ubuntu container. For fun, let\u2019s check the version of our host VM. cat /etc/issue You should see: Welcome to Alpine Linux 3.8 Kernel \\r on an \\m (\\l) Notice that our host VM is running Alpine Linux, yet we were able to run an Ubuntu container. As previously mentioned, the distribution of Linux inside the container does not need to match the distribution of Linux running on the Docker host. However, Linux containers require the Docker host to be running a Linux kernel. For example, Linux containers cannot run directly on Windows Docker hosts. The same is true of Windows containers - they need to run on a Docker host with a Windows kernel. Interactive containers are useful when you are putting together your own image. You can run a container and verify all the steps you need to deploy your app, and capture them in a Dockerfile. You can commit a container to make an image from it - but you should avoid that wherever possible. It\u2019s much better to use a repeatable Dockerfile to build your image. You\u2019ll see that shortly.","title":"Run an interactive Ubuntu container"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#run-a-background-mysql-container","text":"Background containers are how you\u2019ll run most applications. Here\u2019s a simple example using MySQL. Run a new MySQL container with the following command. docker container run \\ --detach \\ --name mydb \\ -e MYSQL_ROOT_PASSWORD=my-secret-pw \\ mysql:latest --detach will run the container in the background. --name will name it mydb . -e will use an environment variable to specify the root password (NOTE: This should never be done in production). As the MySQL image was not available locally, Docker automatically pulled it from Docker Hub. Unable to find image 'mysql:latest' locallylatest: Pulling from library/mysql aa18ad1a0d33: Pull complete fdb8d83dece3: Pull complete 75b6ce7b50d3: Pull complete ed1d0a3a64e4: Pull complete 8eb36a82c85b: Pull complete 41be6f1a1c40: Pull complete 0e1b414eac71: Pull complete 914c28654a91: Pull complete 587693eb988c: Pull complete b183c3585729: Pull complete 315e21657aa4: Pull complete Digest: sha256:0dc3dacb751ef46a6647234abdec2d47400f0dfbe77ab490b02bffdae57846ed Status: Downloaded newer image for mysql:latest 41d6157c9f7d1529a6c922acb8167ca66f167119df0fe3d86964db6c0d7ba4e0 As long as the MySQL process is running, Docker will keep the container running in the background. List the running containers. docker container ls Notice your container is running. CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3f4e8da0caf7 mysql:latest \"docker-entrypoint...\" 52 seconds ago Up 51 seconds 3306/tcp mydb You can check what\u2019s happening in your containers by using a couple of built-in Docker commands: docker container logs and docker container top . docker container logs mydb This shows the logs from the MySQL Docker container. <output truncated> 2017-09-29T16:02:58.605004Z 0 [Note] Executing 'SELECT * FROM INFORMATION_SCHEMA.TABLES;' to get a list of tables using the deprecated partition engine. You may use the startup option '--disable-partition-engine-check' to skip this check. 2017-09-29T16:02:58.605026Z 0 [Note] Beginning of list of non-natively partitioned tables 2017-09-29T16:02:58.616575Z 0 [Note] End of list of non-natively partitioned tables Let\u2019s look at the processes running inside the container. docker container top mydb You should see the MySQL daemon ( mysqld ) is running in the container. PID USER TIME COMMAND 2876 999 0:00 mysqld Although MySQL is running, it is isolated within the container because no network ports have been published to the host. Network traffic cannot reach containers from the host unless ports are explicitly published. List the MySQL version using docker container exec . docker container exec allows you to run a command inside a container. In this example, we\u2019ll use docker container exec to run the command-line equivalent of mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version inside our MySQL container. docker exec -it mydb \\ mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version You will see the MySQL version number, as well as a handy warning. mysql: [Warning] Using a password on the command line interface can be insecure. mysql Ver 14.14 Distrib 5.7.19, for Linux (x86_64) using EditLine wrapper You can also use docker container exec to connect to a new shell process inside an already-running container. Executing the command below will give you an interactive shell ( sh ) inside your MySQL container. docker exec -it mydb sh Notice that your shell prompt has changed. This is because your shell is now connected to the sh process running inside of your container. Let\u2019s check the version number by running the same command again, only this time from within the new shell session in the container. mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version Notice the output is the same as before. Type exit to leave the interactive shell session. exit","title":"Run a background MySQL container"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#task-2-package-and-run-a-custom-app-using-docker","text":"In this step you\u2019ll learn how to package your own apps as Docker images using a Dockerfile . The Dockerfile syntax is straightforward. In this task, we\u2019re going to create a simple NGINX website from a Dockerfile.","title":"Task 2: Package and run a custom app using Docker"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#build-a-simple-website-image","text":"Let\u2019s have a look at the Dockerfile we\u2019ll be using, which builds a simple website that allows you to send a tweet. Make sure you\u2019re in the linux_tweet_app directory. cd ~/linux_tweet_app Display the contents of the Dockerfile. cat Dockerfile FROM nginx:latest COPY index.html /usr/share/nginx/html COPY linux.png /usr/share/nginx/html EXPOSE 80 443 CMD [\"nginx\", \"-g\", \"daemon off;\"] Let\u2019s see what each of these lines in the Dockerfile do. FROM specifies the base image to use as the starting point for this new image you\u2019re creating. For this example we\u2019re starting from nginx:latest . COPY copies files from the Docker host into the image, at a known location. In this example, COPY is used to copy two files into the image: index.html . and a graphic that will be used on our webpage. EXPOSE documents which ports the application uses. CMD specifies what command to run when a container is started from the image. Notice that we can specify the command, as well as run-time arguments. In order to make the following commands more copy/paste friendly, export an environment variable containing your DockerID (if you don\u2019t have a DockerID you can get one for free via Docker Hub ). You will have to manually type this command as it requires your unique DockerID. export DOCKERID=<your docker id> Echo the value of the variable back to the terminal to ensure it was stored correctly. echo $DOCKERID Use the docker image build command to create a new Docker image using the instructions in the Dockerfile. --tag allows us to give the image a custom name. In this case it\u2019s comprised of our DockerID, the application name, and a version. Having the Docker ID attached to the name will allow us to store it on Docker Hub in a later step . tells Docker to use the current directory as the build context Be sure to include period ( . ) at the end of the command. docker image build --tag $DOCKERID/linux_tweet_app:1.0 . The output below shows the Docker daemon executing each line in the Dockerfile Sending build context to Docker daemon 32.77kB Step 1/5 : FROM nginx:latest latest: Pulling from library/nginx afeb2bfd31c0: Pull complete 7ff5d10493db: Pull complete d2562f1ae1d0: Pull complete Digest: sha256:af32e714a9cc3157157374e68c818b05ebe9e0737aac06b55a09da374209a8f9 Status: Downloaded newer image for nginx:latest ---> da5939581ac8 Step 2/5 : COPY index.html /usr/share/nginx/html ---> eba2eec2bea9 Step 3/5 : COPY linux.png /usr/share/nginx/html ---> 4d080f499b53 Step 4/5 : EXPOSE 80 443 ---> Running in 47232cb5699f ---> 74c968a9165f Removing intermediate container 47232cb5699f Step 5/5 : CMD nginx -g daemon off; ---> Running in 4623761274ac ---> 12045a0df899 Removing intermediate container 4623761274ac Successfully built 12045a0df899 Successfully tagged <your docker ID>/linux_tweet_app:latest Use the docker container run command to start a new container from the image you created. As this container will be running an NGINX web server, we\u2019ll use the --publish flag to publish port 80 inside the container onto port 80 on the host. This will allow traffic coming in to the Docker host on port 80 to be directed to port 80 in the container. The format of the --publish flag is host_port : container_port . docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 Any external traffic coming into the server on port 80 will now be directed into the container on port 80. In a later step you will see how to map traffic from two different ports - this is necessary when two containers use the same port to communicate since you can only expose the port once on the host. Click here to load the website which should be running. Once you\u2019ve accessed your website, shut it down and remove it. docker container rm --force linux_tweet_app Note: We used the --force parameter to remove the running container without shutting it down. This will ungracefully shutdown the container and permanently remove it from the Docker host. In a production environment you may want to use docker container stop to gracefully stop the container and leave it on the host. You can then use docker container rm to permanently remove it.","title":"Build a simple website image"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#task-3-modify-a-running-website","text":"When you\u2019re actively working on an application it is inconvenient to have to stop the container, rebuild the image, and run a new version every time you make a change to your source code. One way to streamline this process is to mount the source code directory on the local machine into the running container. This will allow any changes made to the files on the host to be immediately reflected in the container. We do this using something called a bind mount . When you use a bind mount, a file or directory on the host machine is mounted into a container running on the same host.","title":"Task 3: Modify a running website"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#start-our-web-app-with-a-bind-mount","text":"Let\u2019s start the web app and mount the current directory into the container. In this example we\u2019ll use the --mount flag to mount the current directory on the host into /usr/share/nginx/html inside the container. Be sure to run this command from within the linux_tweet_app directory on your Docker host. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ --mount type=bind,source=\"$(pwd)\",target=/usr/share/nginx/html \\ $DOCKERID/linux_tweet_app:1.0 Remember from the Dockerfile, usr/share/nginx/html is where the html files are stored for the web app. The website should be running.","title":"Start our web app with a bind mount"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#modify-the-running-website","text":"Bind mounts mean that any changes made to the local file system are immediately reflected in the running container. Copy a new index.html into the container. The Git repo that you pulled earlier contains several different versions of an index.html file. You can manually run an ls command from within the ~/linux_tweet_app directory to see a list of them. In this step we\u2019ll replace index.html with index-new.html . cp index-new.html index.html Go to the running website and refresh the page . Notice that the site has changed. If you are comfortable with vi you can use it to load the local index.html file and make additional changes. Those too would be reflected when you reload the webpage. If you are really adventurous, why not try using exec to access the running container and modify the files stored there. Even though we\u2019ve modified the index.html local filesystem and seen it reflected in the running container, we\u2019ve not actually changed the Docker image that the container was started from. To show this, stop the current container and re-run the 1.0 image without a bind mount. Stop and remove the currently running container. docker rm --force linux_tweet_app Rerun the current version without a bind mount. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 Notice the website is back to the original version. Stop and remove the current container docker rm --force linux_tweet_app","title":"Modify the running website"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#update-the-image","text":"To persist the changes you made to the index.html file into the image, you need to build a new version of the image. Build a new image and tag it as 2.0 Remember that you previously modified the index.html file on the Docker hosts local filesystem. This means that running another docker image build command will build a new image with the updated index.html Be sure to include the period ( . ) at the end of the command. docker image build --tag $DOCKERID/linux_tweet_app:2.0 . Notice how fast that built! This is because Docker only modified the portion of the image that changed vs. rebuilding the whole image. Let\u2019s look at the images on the system. docker image ls You now have both versions of the web app on your host. REPOSITORY TAG IMAGE ID CREATED SIZE <docker id>/linux_tweet_app 2.0 01612e05312b 16 seconds ago 108MB <docker id>/linux_tweet_app 1.0 bb32b5783cd3 4 minutes ago 108MB mysql latest b4e78b89bcf3 2 weeks ago 412MB ubuntu latest 2d696327ab2e 2 weeks ago 122MB nginx latest da5939581ac8 3 weeks ago 108MB alpine latest 76da55c8019d 3 weeks ago 3.97MB","title":"Update the image"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#test-the-new-version","text":"Run a new container from the new version of the image. docker container run \\ --detach \\ --publish 80:80 \\ --name linux_tweet_app \\ $DOCKERID/linux_tweet_app:2.0 Check the new version of the website ( You may need to refresh your browser to get the new version to load ). The web page will have an orange background. We can run both versions side by side. The only thing we need to be aware of is that we cannot have two containers using port 80 on the same host. As we\u2019re already using port 80 for the container running from the 2.0 version of the image, we will start a new container and publish it on port 8080. Additionally, we need to give our container a unique name ( old_linux_tweet_app ) Run another new container, this time from the old version of the image. Notice that this command maps the new container to port 8080 on the host. This is because two containers cannot map to the same port on a single Docker host. docker container run \\ --detach \\ --publish 8080:80 \\ --name old_linux_tweet_app \\ $DOCKERID/linux_tweet_app:1.0 View the old version of the website .","title":"Test the new version"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#push-your-images-to-docker-hub","text":"List the images on your Docker host. docker image ls -f reference=\"$DOCKERID/*\" You will see that you now have two linux_tweet_app images - one tagged as 1.0 and the other as 2.0 . REPOSITORY TAG IMAGE ID CREATED SIZE <docker id>/linux_tweet_app 2.0 01612e05312b 3 minutes ago 108MB <docker id>/linux_tweet_app 1.0 bb32b5783cd3 7 minutes ago 108MB These images are only stored in your Docker hosts local repository. Your Docker host will be deleted after the workshop. In this step we\u2019ll push the images to a public repository so you can run them from any Linux machine with Docker. Distribution is built into the Docker platform. You can build images locally and push them to a public or private registry , making them available to other users. Anyone with access can pull that image and run a container from it. The behavior of the app in the container will be the same for everyone, because the image contains the fully-configured app - the only requirements to run it are Linux and Docker. Docker Hub is the default public registry for Docker images. Before you can push your images, you will need to log into Docker Hub. docker login You will need to supply your Docker ID credentials when prompted. Username: <your docker id> Password: <your docker id password> Login Succeeded Push version 1.0 of your web app using docker image push . docker image push $DOCKERID/linux_tweet_app:1.0 You\u2019ll see the progress as the image is pushed up to Docker Hub. The push refers to a repository [docker.io/<your docker id>/linux_tweet_app] 910e84bcef7a: Pushed 1dee161c8ba4: Pushed 110566462efa: Pushed 305e2b6ef454: Pushed 24e065a5f328: Pushed 1.0: digest: sha256:51e937ec18c7757879722f15fa1044cbfbf2f6b7eaeeb578c7c352baba9aa6dc size: 1363 Now push version 2.0 . docker image push $DOCKERID/linux_tweet_app:2.0 Notice that several lines of the output say Layer already exists . This is because Docker will leverage read-only layers that are the same as any previously uploaded image layers. The push refers to a repository [docker.io/<your docker id>/linux_tweet_app] 0b171f8fbe22: Pushed 70d38c767c00: Pushed 110566462efa: Layer already exists 305e2b6ef454: Layer already exists 24e065a5f328: Layer already exists 2.0: digest: sha256:7c51f77f90b81e5a598a13f129c95543172bae8f5850537225eae0c78e4f3add size: 1363 You can browse to https://hub.docker.com/r/<your docker id>/ and see your newly-pushed Docker images. These are public repositories, so anyone can pull the image - you don\u2019t even need a Docker ID to pull public images. Docker Hub also supports private repositories.","title":"Push your images to Docker Hub"},{"location":"2.Docker/Docker-For-Developers/01Docker%20for%20Beginners%20-%20Linux.html#next-step","text":"Check out the introduction to a multi-service application stack orchestration in the Application Containerization and Microservice Orchestration tutorial.","title":"Next Step"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html","text":"Application Containerization and Microservice Orchestration \u00b6 Sep 22, 2018 \u2022 @ibnesayeed In this tutorial we will learn about basic application containerization using Docker and running various components of an application as microservices. We will utilize Docker Compose for orchestration during the development. This tutorial is targeted for beginners who have the basic familiarity with Docker. If you are new to Docker, we recommend you check out Docker for Beginners tutorial first. We will start from a basic Python script that scrapes links from a given web page and gradually evolve it into a multi-service application stack. The demo code is available in the Link Extractor repo. The code is organized in steps that incrementally introduce changes and new concepts. After completion, the application stack will contain the following microservices: A web application written in PHP and served using Apache that takes a URL as the input and summarizes extracted links from it The web application talks to an API server written in Python (and Ruby) that takes care of the link extraction and returns a JSON response A Redis cache that is used by the API server to avoid repeated fetch and link extraction for pages that are already scraped The API server will only load the page of the input link from the web if it is not in the cache. The stack will eventually look like the figure below: This tutorial was initially developed for a colloquium in the Computer Science Department of the Old Dominion University , Norfolk, Virginia. A video recording , presentation slides , and a brief description of the talk can be found in a blog post . Steps: Stage Setup Step 0: Basic Link Extractor Script Step 1: Containerized Link Extractor Script Step 2: Link Extractor Module with Full URI and Anchor Text Step 3: Link Extractor API Service Step 4: Link Extractor API and Web Front End Services Step 5: Redis Service for Caching Step 6: Swap Python API Service with Ruby Conclusions Stage Setup \u00b6 Let\u2019s get started by first cloning the demo code repository, changing the working directory, and checking the demo branch out. git clone https://github.com/ibnesayeed/linkextractor.git cd linkextractor git checkout demo Step 0: Basic Link Extractor Script \u00b6 Checkout the step0 branch and list files in it. git checkout step0 tree . \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 2 files The linkextractor.py file is the interesting one here, so let\u2019s look at its contents: cat linkextractor.py #!/usr/bin/env python import sys import requests from bs4 import BeautifulSoup res = requests.get ( sys.argv [ -1 ]) soup = BeautifulSoup ( res.text, \"html.parser\" ) for link in soup.find_all ( \"a\" ) : print ( link.get ( \"href\" )) This is a simple Python script that imports three packages: sys from the standard library and two popular third-party packages requests and bs4 . User-supplied command line argument (which is expected to be a URL to an HTML page) is used to fetch the page using the requests package, then parsed using the BeautifulSoup . The parsed object is then iterated over to find all the anchor elements (i.e., <a> tags) and print the value of their href attribute that contains the hyperlink. However, this seemingly simple script might not be the easiest one to run on a machine that does not meet its requirements. The README.md file suggests how to run it, so let\u2019s give it a try: ./linkextractor.py http://example.com/ bash: ./linkextractor.py: Permission denied When we tried to execute it as a script, we got the Permission denied error. Let\u2019s check the current permissions on this file: ls -l linkextractor.py -rw-r--r-- 1 root root 220 Sep 23 16 :26 linkextractor.py This current permission -rw-r--r-- indicates that the script is not set to be executable. We can either change it by running chmod a+x linkextractor.py or run it as a Python program instead of a self-executing script as illustrated below: python linkextractor.py Traceback ( most recent call last ) : File \"linkextractor.py\" , line 5 , in <module> from bs4 import BeautifulSoup ImportError: No module named bs4 Here we got the first ImportError message because we are missing the third-party package needed by the script. We can install that Python package (and potentially other missing packages) using one of the many techniques to make it work, but it is too much work for such a simple script, which might not be obvious for those who are not familiar with Python\u2019s ecosystem. Depending on which machine and operating system you are trying to run this script on, what software is already installed, and how much access you have, you might face some of these potential difficulties: Is the script executable? Is Python installed on the machine? Can you install software on the machine? Is pip installed? Are requests and beautifulsoup4 Python libraries installed? This is where application containerization tools like Docker come in handy. In the next step we will try to containerize this script and make it easier to execute. Step 1: Containerized Link Extractor Script \u00b6 Checkout the step1 branch and list files in it. git checkout step1 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 3 files We have added one new file (i.e., Dockerfile ) in this step. Let\u2019s look into its contents: cat Dockerfile FROM python:3 LABEL maintainer = \"Sawood Alam <@ibnesayeed>\" RUN pip install beautifulsoup4 RUN pip install requests WORKDIR /app COPY linkextractor.py /app/ RUN chmod a+x linkextractor.py ENTRYPOINT [ \"./linkextractor.py\" ] Using this Dockerfile we can prepare a Docker image for this script. We start from the official python Docker image that contains Python\u2019s run-time environment as well as necessary tools to install Python packages and dependencies. We then add some metadata as labels (this step is not essential, but is a good practice nonetheless). Next two instructions run the pip install command to install the two third-party packages needed for the script to function properly. We then create a working directory /app , copy the linkextractor.py file in it, and change its permissions to make it an executable script. Finally, we set the script as the entrypoint for the image. So far, we have just described how we want our Docker image to be like, but didn\u2019t really build one. So let\u2019s do just that: docker image build -t linkextractor:step1 . This command should yield an output as illustrated below: Sending build context to Docker daemon 171.5kB Step 1/8 : FROM python:3 ... [OUTPUT REDACTED] ... Successfully built 226196ada9ab Successfully tagged linkextractor:step1 We have created a Docker image named linkextractor:step1 based on the Dockerfile illustrated above. If the build was successful, we should be able to see it in the list of image: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE linkextractor step1 e067c677be37 2 seconds ago 931MB python 3 a9d071760c82 2 weeks ago 923MB This image should have all the necessary ingredients packaged in it to run the script anywhere on a machine that supports Docker. Now, let\u2019s run a one-off container with this image and extract links from some live web pages: docker container run -it --rm linkextractor:step1 http://example.com/ This outputs a single link that is present in the simple example.com web page: http://www.iana.org/domains/example Let\u2019s try it on a web page with more links in it: docker container run -it --rm linkextractor:step1 https://training.play-with-docker.com/ / /about/ #ops #dev /ops-stage1 /ops-stage2 /ops-stage3 /dev-stage1 /dev-stage2 /dev-stage3 /alacart https://twitter.com/intent/tweet?text = Play with Docker Classroom & url = https://training.play-with-docker.com/ & via = docker & related = docker https://facebook.com/sharer.php?u = https://training.play-with-docker.com/ https://plus.google.com/share?url = https://training.play-with-docker.com/ http://www.linkedin.com/shareArticle?mini = true & url = https://training.play-with-docker.com/ & title = Play%20with%20Docker%20Classroom & source = https://training.play-with-docker.com https://2018.dockercon.com/ https://2018.dockercon.com/ https://success.docker.com/training/ https://community.docker.com/registrations/groups/4316 https://docker.com https://www.docker.com https://www.facebook.com/docker.run https://twitter.com/docker https://www.github.com/play-with-docker/play-with-docker.github.io This looks good, but we can improve the output. For example, some links are relative, we can convert them into full URLs and also provide the anchor text they are linked to. In the next step we will make these changes and some other improvements to the script. Step 2: Link Extractor Module with Full URI and Anchor Text \u00b6 Checkout the step2 branch and list files in it. git checkout step2 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 3 files In this step the linkextractor.py script is updated with the following functional changes: Paths are normalized to full URLs Reporting both links and anchor texts Usable as a module in other scripts Let\u2019s have a look at the updated script: cat linkextractor.py #!/usr/bin/env python import sys import requests from bs4 import BeautifulSoup from urllib.parse import urljoin def extract_links(url): res = requests.get(url) soup = BeautifulSoup(res.text, \"html.parser\") base = url # TODO: Update base if a <base> element is present with the href attribute links = [] for link in soup.find_all(\"a\"): links.append({ \"text\": \" \".join(link.text.split()) or \"[IMG]\", \"href\": urljoin(base, link.get(\"href\")) }) return links if __name__ == \"__main__\": if len(sys.argv) != 2: print(\"\\nUsage:\\n\\t{} <URL>\\n\".format(sys.argv[0])) sys.exit(1) for link in extract_links(sys.argv[-1]): print(\"[{}]({})\".format(link[\"text\"], link[\"href\"])) The link extraction logic is abstracted into a function extract_links that accepts a URL as a parameter and returns a list of objects containing anchor texts and normalized hyperlinks. This functionality can now be imported into other scripts as a module (which we will utilize in the next step). Now, let\u2019s build a new image and see these changes in effect: docker image build -t linkextractor:step2 . We have used a new tag linkextractor:step2 for this image so that we don\u2019t overwrite the image from the step0 to illustrate that they can co-exist and containers can be run using either of these images. docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE linkextractor step2 be2939eada96 3 seconds ago 931MB linkextractor step1 673d045a822f About a minute ago 931MB python 3 a9d071760c82 2 weeks ago 923MB Running a one-off container using the linkextractor:step2 image should now yield an improved output: docker container run -it --rm linkextractor:step2 https://training.play-with-docker.com/ [ Play with Docker classroom ]( https://training.play-with-docker.com/ ) [ About ]( https://training.play-with-docker.com/about/ ) [ IT Pros and System Administrators ]( https://training.play-with-docker.com/#ops ) [ Developers ]( https://training.play-with-docker.com/#dev ) [ Stage 1 : The Basics ]( https://training.play-with-docker.com/ops-stage1 ) [ Stage 2 : Digging Deeper ]( https://training.play-with-docker.com/ops-stage2 ) [ Stage 3 : Moving to Production ]( https://training.play-with-docker.com/ops-stage3 ) [ Stage 1 : The Basics ]( https://training.play-with-docker.com/dev-stage1 ) [ Stage 2 : Digging Deeper ]( https://training.play-with-docker.com/dev-stage2 ) [ Stage 3 : Moving to Staging ]( https://training.play-with-docker.com/dev-stage3 ) [ Full list of individual labs ]( https://training.play-with-docker.com/alacart ) [[ IMG ]]( https://twitter.com/intent/tweet?text = Play with Docker Classroom & url = https://training.play-with-docker.com/ & via = docker & related = docker ) [[ IMG ]]( https://facebook.com/sharer.php?u = https://training.play-with-docker.com/ ) [[ IMG ]]( https://plus.google.com/share?url = https://training.play-with-docker.com/ ) [[ IMG ]]( http://www.linkedin.com/shareArticle?mini = true & url = https://training.play-with-docker.com/ & title = Play%20with%20Docker%20Classroom & source = https://training.play-with-docker.com ) [[ IMG ]]( https://2018.dockercon.com/ ) [ DockerCon 2018 in San Francisco ]( https://2018.dockercon.com/ ) [ training.docker.com ]( https://success.docker.com/training/ ) [ Register here ]( https://community.docker.com/registrations/groups/4316 ) [ Docker, Inc. ]( https://docker.com ) [[ IMG ]]( https://www.docker.com ) [[ IMG ]]( https://www.facebook.com/docker.run ) [[ IMG ]]( https://twitter.com/docker ) [[ IMG ]]( https://www.github.com/play-with-docker/play-with-docker.github.io ) Running a container using the previous image linkextractor:step1 should still result in the old output: docker container run -it --rm linkextractor:step1 https://training.play-with-docker.com/ So far, we have learned how to containerize a script with its necessary dependencies to make it more portable. We have also learned how to make changes in the application and build different variants of Docker images that can co-exist. In the next step we will build a web service that will utilize this script and will make the service run inside a Docker container. Step 3: Link Extractor API Service \u00b6 Checkout the step3 branch and list files in it. git checkout step3 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 linkextractor.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt 0 directories, 5 files The following changes have been made in this step: Added a server script main.py that utilizes the link extraction module written in the last step The Dockerfile is updated to refer to the main.py file instead Server is accessible as a WEB API at http://<hostname>[:<prt>]/api/<url> Dependencies are moved to the requirements.txt file Needs port mapping to make the service accessible outside of the container (the Flask server used here listens on port 5000 by default) Let\u2019s first look at the Dockerfile for changes: cat Dockerfile FROM python:3 LABEL maintainer = \"Sawood Alam <@ibnesayeed>\" WORKDIR /app COPY requirements.txt /app/ RUN pip install -r requirements.txt COPY *.py /app/ RUN chmod a+x *.py CMD [ \"./main.py\" ] Since we have started using requirements.txt for dependencies, we no longer need to run pip install command for individual packages. The ENTRYPOINT directive is replaced with the CMD and it is referring to the main.py script that has the server code it because we do not want to use this image for one-off commands now. The linkextractor.py module remains unchanged in this step, so let\u2019s look into the newly added main.py file: cat main.py #!/usr/bin/env python from flask import Flask from flask import request from flask import jsonify from linkextractor import extract_links app = Flask ( __name__ ) @app.route ( \"/\" ) def index () : return \"Usage: http://<hostname>[:<prt>]/api/<url>\" @app.route ( \"/api/<path:url>\" ) def api ( url ) : qs = request.query_string.decode ( \"utf-8\" ) if qs ! = \"\" : url += \"?\" + qs links = extract_links ( url ) return jsonify ( links ) app.run ( host = \"0.0.0.0\" ) Here, we are importing extract_links function from the linkextractor module and converting the returned list of objects into a JSON response. It\u2019s time to build a new image with these changes in place: docker image build -t linkextractor:step3 . Then run the container in detached mode ( -d flag) so that the terminal is available for other commands while the container is still running. Note that we are mapping the port 5000 of the container with the 5000 of the host (using -p 5000:5000 argument) to make it accessible from the host. We are also assigning a name ( --name=linkextractor ) to the container to make it easier to see logs and kill or remove the container. docker container run -d -p 5000:5000 --name=linkextractor linkextractor:step3 If things go well, we should be able to see the container being listed in Up condition: docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUSPORTS NAMES d69c0150a754 linkextractor:step3 \"./main.py\" 9 seconds ago Up 8 seconds0.0.0.0:5000->5000/tcp linkextractor We can now make an HTTP request in the form /api/<url> to talk to this server and fetch the response containing extracted links: curl -i http://localhost:5000/api/http://example.com/ HTTP/1.0 200 OK Content-Type: application/json Content-Length: 78 Server: Werkzeug/0.14.1 Python/3.7.0 Date: Sun, 23 Sep 2018 20:52:56 GMT [{\"href\":\"http://www.iana.org/domains/example\",\"text\":\"More information...\"}] Now, we have the API service running that accepts requests in the form /api/<url> and responds with a JSON containing hyperlinks and anchor texts of all the links present in the web page at give <url> . Since the container is running in detached mode, so we can\u2019t see what\u2019s happening inside, but we can see logs using the name linkextractor we assigned to our container: docker container logs linkextractor * Serving Flask app \"main\" ( lazy loading ) * Environment: production WARNING: Do not use the development server in a production environment. Use a production WSGI server instead. * Debug mode: off * Running on http://0.0.0.0:5000/ ( Press CTRL+C to quit ) 172 .17.0.1 - - [ 23 /Sep/2018 20 :52:56 ] \"GET /api/http://example.com/ HTTP/1.1\" 200 - We can see the messages logged when the server came up, and an entry of the request log when we ran the curl command. Now we can kill and remove this container: docker container rm -f linkextractor In this step we have successfully ran an API service listening on port 5000 . This is great, but APIs and JSON responses are for machines, so in the next step we will run a web service with a human-friendly web interface in addition to this API service. Step 4: Link Extractor API and Web Front End Services \u00b6 Checkout the step4 branch and list files in it. git checkout step4 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 linkextractor.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 www \u2514\u2500\u2500 index.php 2 directories, 7 files In this step the following changes have been made since the last step: The link extractor JSON API service (written in Python) is moved in a separate ./api folder that has the exact same code as in the previous step A web front-end application is written in PHP under ./www folder that talks to the JSON API The PHP application is mounted inside the official php:7-apache Docker image for easier modification during the development The web application is made accessible at http://<hostname>[:<prt>]/?url=<url-encoded-url> An environment variable API_ENDPOINT is used inside the PHP application to configure it to talk to the JSON API server A docker-compose.yml file is written to build various components and glue them together In this step we are planning to run two separate containers, one for the API and the other for the web interface. The latter needs a way to talk to the API server. For the two containers to be able to talk to each other, we can either map their ports on the host machine and use that for request routing or we can place the containers in a single private network and access directly. Docker has an excellent support of networking and provides helpful commands to deal with networks. Additionally, in a Docker network containers identify themselves using their names as hostnames to avoid hunting for their IP addresses in the private network. However, we are not going to do any of this manually, instead we will be using Docker Compose to automate many of these tasks. So let\u2019s look at the docker-compose.yml file we have: cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step4-python build: ./api ports: - \"5000:5000\" web: image: php:7-apache ports: - \"80:80\" environment: - API_ENDPOINT = http://api:5000/api/ volumes: - ./www:/var/www/html This is a simple YAML file that describes the two services api and web . The api service will use the linkextractor-api:step4-python image that is not built yet, but will be built on-demand using the Dockerfile from the ./api directory. This service will be exposed on the port 5000 of the host. The second service named web will use official php:7-apache image directly from the DockerHub, that\u2019s why we do not have a Dockerfile for it. The service will be exposed on the default HTTP port (i.e., 80 ). We will supply an environment variable named API_ENDPOINT with the value http://api:5000/api/ to tell the PHP script where to connect to for the API access. Notice that we are not using an IP address here, instead, api:5000 is being used because we will have a dynamic hostname entry in the private network for the API service matching its service name. Finally, we will bind mount the ./www folder to make the index.php file available inside of the web service container at /var/www/html , which is the default web root for the Apache web server. Now, let\u2019s have a look at the user-facing www/index.php file: cat www/index.php This is a long file that mainly contains all the markup and styles of the page. However, the important block of code is in the beginning of the file as illustrated below: $api_endpoint = $_ENV [ \"API_ENDPOINT\" ] ?: \"http://localhost:5000/api/\" ; $url = \"\" ; if ( isset ( $_GET [ \"url\" ]) && $_GET [ \"url\" ] ! = \"\" ) { $url = $_GET [ \"url\" ] ; $json = @file_get_contents ( $api_endpoint . $url ) ; if ( $json == false ) { $err = \"Something is wrong with the URL: \" . $url ; } else { $links = json_decode ( $json , true ) ; $domains = [] ; foreach ( $links as $link ) { array_push ( $domains , parse_url ( $link [ \"href\" ] , PHP_URL_HOST )) ; } $domainct = @array_count_values ( $domains ) ; arsort ( $domainct ) ; } } The $api_endpoint variable is initialized with the value of the environment variable supplied from the docker-compose.yml file as $_ENV[\"API_ENDPOINT\"] (otherwise falls back to a default value of http://localhost:5000/api/ ). The request is made using file_get_contents function that uses the $api_endpoint variable and user supplied URL from $_GET[\"url\"] . Some analysis and transformations are performed on the received response that are later used in the markup to populate the page. Let\u2019s bring these services up in detached mode using docker-compose utility: docker-compose up -d --build Creating network \"linkextractor_default\" with the default driver Pulling web (php:7-apache)... 7-apache: Pulling from library/php ... [OUTPUT REDACTED] ... Status: Downloaded newer image for php:7-apache Building api Step 1/8 : FROM python:3 ... [OUTPUT REDACTED] ... Successfully built 1f419be1c2bf Successfully tagged linkextractor-api:step4-python Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done This output shows that Docker Compose automatically created a network named linkextractor_default , pulled php:7-apache image from DockerHub, built api:python image using our local Dockerfile , and finally, spun two containers linkextractor_web_1 and linkextractor_api_1 that correspond to the two services we have defined in the YAML file above. Checking for the list of running containers confirms that the two services are indeed running: docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 268b021b5a2c php:7-apache \"docker-php-entrypoi\u2026\" 3 minutes ago Up 3 minutes 0.0.0.0:80->80/tcp linkextractor_web_1 5bc266b4e43d linkextractor-api:step4-python \"./main.py\" 3 minutes ago Up 3 minutes 0.0.0.0:5000->5000/tcp linkextractor_api_1 We should now be able to talk to the API service as before: curl -i http://localhost:5000/api/http://example.com/ To access the web interface click to open the Link Extractor . Then fill the form with https://training.play-with-docker.com/ (or any HTML page URL of your choice) and submit to extract links from it. We have just created an application with microservice architecture, isolating individual tasks in separate services as opposed to monolithic applications where everything is put together in a single unit. Microservice applications are relatively easier to scale, maintains, and move around. They also allow easy swapping of components with an equivalent service. More on that later. Now, let\u2019s modify the www/index.php file to replace all occurrences of Link Extractor with Super Link Extractor : sed -i 's/Link Extractor/Super Link Extractor/g' www/index.php Reloading the web interface of the application (or clicking here ) should now reflect this change in the title, header, and footer. This is happening because the ./www folder is bind mounted inside of the container, so any changes made outside will reflect inside the container or the vice versa. This approach is very helpful in development, but in the production environment we would prefer our Docker images to be self-contained. Let\u2019s revert these changes now to clean the Git tracking: git reset --hard Before we move on to the next step we need to shut these services down, but Docker Compose can help us take care of it very easily: docker-compose down Stopping linkextractor_api_1 ... done Stopping linkextractor_web_1 ... done Removing linkextractor_api_1 ... done Removing linkextractor_web_1 ... done Removing network linkextractor_default In the next step we will add one more service to our stack and will build a self-contained custom image for our web interface service. Step 5: Redis Service for Caching \u00b6 Checkout the step5 branch and list files in it. git checkout step5 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 linkextractor.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 www \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.php 2 directories, 8 files Some noticeable changes from the previous step are as following: Another Dockerfile is added in the ./www folder for the PHP web application to build a self-contained image and avoid live file mounting A Redis container is added for caching using the official Redis Docker image The API service talks to the Redis service to avoid downloading and parsing pages that were already scraped before A REDIS_URL environment variable is added to the API service to allow it to connect to the Redis cache Let\u2019s first inspect the newly added Dockerfile under the ./www folder: cat www/Dockerfile FROM php:7-apache LABEL maintainer=\"Sawood Alam <@ibnesayeed>\" ENV API_ENDPOINT=\"http://localhost:5000/api/\" COPY . /var/www/html/ This is a rather simple Dockerfile that uses the official php:7-apache image as the base and copies all the files from the ./www folder into the /var/www/html/ folder of the image. This is exactly what was happening in the previous step, but that was bind mounted using a volume, while here we are making the code part of the self-contained image. We have also added the API_ENDPOINT environment variable here with a default value, which implicitly suggests that this is an important information that needs to be present in order for the service to function properly (and should be customized at run time with an appropriate value). Next, we will look at the API server\u2019s api/main.py file where we are utilizing the Redis cache: cat api/main.py The file has many lines, but the important bits are as illustrated below: redis_conn = redis.from_url(os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")) # ... jsonlinks = redis.get(url) if not jsonlinks: links = extract_links(url) jsonlinks = json.dumps(links, indent=2) redis.set(url, jsonlinks) This time the API service needs to know how to connect to the Redis instance as it is going to use it for caching. This information can be made available at run time using the REDIS_URL environment variable. A corresponding ENV entry is also added in the Dockerfile of the API service with a default value. A redis client instance is created using the hostname redis (same as the name of the service as we will see later) and the default Redis port 6379 . We are first trying to see if a cache is present in the Redis store for a given URL, if not then we use the extract_links function as before and populate the cache for future attempts. Now, let\u2019s look into the updated docker-compose.yml file: cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step5-python build: ./api ports: - \"5000:5000\" environment: - REDIS_URL=redis://redis:6379 web: image: linkextractor-web:step5-php build: ./www ports: - \"80:80\" environment: - API_ENDPOINT=http://api:5000/api/ redis: image: redis The api service configuration largely remains the same as before, except the updated image tag and added environment variable REDIS_URL that points to the Redis service. For the web service, we are using the custom linkextractor-web:step5-php image that will be built using the newly added Dockerfile in the ./www folder. We are no longer mounting the ./www folder using the volumes config. Finally, a new service named redis is added that will use the official image from DockerHub and needs no specific configurations for now. This service is accessible to the Python API using its service name, the same way the API service is accessible to the PHP front-end service. Let\u2019s boot these services up: docker-compose up -d --build ... [OUTPUT REDACTED] ... Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done Creating linkextractor_redis_1 ... done Now, that all three services are up, access the web interface by clicking the Link Extractor . There should be no visual difference from the previous step. However, if you extract links from a page with a lot of links, the first time it should take longer, but the successive attempts to the same page should return the response fairly quickly. To check whether or not the Redis service is being utilized, we can use docker-compose exec followed by the redis service name and the Redis CLI\u2019s monitor command: docker-compose exec redis redis-cli monitor Now, try to extract links from some web pages using the web interface and see the difference in Redis log entries for pages that are scraped the first time and those that are repeated. Before continuing further with the tutorial, stop the interactive monitor stream as a result of the above redis-cli command by pressing Ctrl + C keys while the interactive terminal is in focus. Now that we are not mounting the /www folder inside the container, local changes should not reflect in the running service: sed -i 's/Link Extractor/Super Link Extractor/g' www/index.php Verify that the changes made locally do not reflect in the running service by reloading the web interface and then revert changes: git reset --hard Now, shut these services down and get ready for the next step: docker-compose down Stopping linkextractor_web_1 ... done Stopping linkextractor_redis_1 ... done Stopping linkextractor_api_1 ... done Removing linkextractor_web_1 ... done Removing linkextractor_redis_1 ... done Removing linkextractor_api_1 ... done Removing network linkextractor_default We have successfully orchestrated three microservices to compose our Link Extractor application. We now have an application stack that represents the architecture illustrated in the figure shown in the introduction of this tutorial. In the next step we will explore how easy it is to swap components from an application with the microservice architecture. Step 6: Swap Python API Service with Ruby \u00b6 Checkout the step6 branch and list files in it. git checkout step6 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 Gemfile \u2502 \u2514\u2500\u2500 linkextractor.rb \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2514\u2500\u2500 www \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.php 3 directories, 7 files Some significant changes from the previous step include: The API service written in Python is replaced with a similar Ruby implementation The API_ENDPOINT environment variable is updated to point to the new Ruby API service The link extraction cache event (HIT/MISS) is logged and is persisted using volumes Notice that the ./api folder does not contain any Python scripts, instead, it now has a Ruby file and a Gemfile to manage dependencies. Let\u2019s have a quick walk through the changed files: cat api/linkextractor.rb #!/usr/bin/env ruby # encoding: utf-8 require \"sinatra\" require \"open-uri\" require \"uri\" require \"nokogiri\" require \"json\" require \"redis\" set :protection, :except=>:path_traversal redis = Redis.new(url: ENV[\"REDIS_URL\"] || \"redis://localhost:6379\") Dir.mkdir(\"logs\") unless Dir.exist?(\"logs\") cache_log = File.new(\"logs/extraction.log\", \"a\") get \"/\" do \"Usage: http://<hostname>[:<prt>]/api/<url>\" end get \"/api/*\" do url = [params['splat'].first, request.query_string].reject(&:empty?).join(\"?\") cache_status = \"HIT\" jsonlinks = redis.get(url) if jsonlinks.nil? cache_status = \"MISS\" jsonlinks = JSON.pretty_generate(extract_links(url)) redis.set(url, jsonlinks) end cache_log.puts \"#{Time.now.to_i}\\t#{cache_status}\\t#{url}\" status 200 headers \"content-type\" => \"application/json\" body jsonlinks end def extract_links(url) links = [] doc = Nokogiri::HTML(open(url)) doc.css(\"a\").each do |link| text = link.text.strip.split.join(\" \") begin links.push({ text: text.empty? ? \"[IMG]\" : text, href: URI.join(url, link[\"href\"]) }) rescue end end links end This Ruby file is almost equivalent to what we had in Python before, except, in addition to that it also logs the link extraction requests and corresponding cache events. In a microservice architecture application swapping components with an equivalent one is easy as long as the expectations of consumers of the component are maintained. cat api/Dockerfile FROM ruby:2.6 LABEL maintainer=\"Sawood Alam <@ibnesayeed>\" ENV LANG C.UTF-8 ENV REDIS_URL=\"redis://localhost:6379\" WORKDIR /app COPY Gemfile /app/ RUN bundle install COPY linkextractor.rb /app/ RUN chmod a+x linkextractor.rb CMD [\"./linkextractor.rb\", \"-o\", \"0.0.0.0\"] Above Dockerfile is written for the Ruby script and it is pretty much self-explanatory. cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step6-ruby build: ./api ports: - \"4567:4567\" environment: - REDIS_URL=redis://redis:6379 volumes: - ./logs:/app/logs web: image: linkextractor-web:step6-php build: ./www ports: - \"80:80\" environment: - API_ENDPOINT=http://api:4567/api/ redis: image: redis The docker-compose.yml file has a few minor changes in it. The api service image is now named linkextractor-api:step6-ruby , the port mapping is changed from 5000 to 4567 (which is the default port for Sinatra server), and the API_ENDPOINT environment variable in the web service is updated accordingly so that the PHP code can talk to it. With these in place, let\u2019s boot our service stack: docker-compose up -d --build ... [OUTPUT REDACTED] ... Successfully built b713eef49f55 Successfully tagged linkextractor-api:step6-ruby Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done Creating linkextractor_redis_1 ... done We should now be able to access the API (using the updated port number): curl -i http://localhost:4567/api/http://example.com/ HTTP/1.1 200 OK Content-Type: application/json Content-Length: 96 X-Content-Type-Options: nosniff Server: WEBrick/1.4.2 (Ruby/2.5.1/2018-03-29) Date: Mon, 24 Sep 2018 01:41:35 GMT Connection: Keep-Alive [ { \"text\": \"More information...\", \"href\": \"http://www.iana.org/domains/example\" } ] Now, open the web interface by clicking the Link Extractor and extract links of a few URLs. Also, try to repeat these attempts for some URLs. If everything is alright, the web application should behave as before without noticing any changes in the API service (which is completely replaced). We can shut the stack down now: docker-compose down Since we have persisted logs, they should still be available after the services are gone: cat logs/extraction.log 1537753295 MISS http://example.com/ 1537753600 HIT http://example.com/ 1537753635 MISS https://training.play-with-docker.com/ This illustrates that the caching is functional as the second attempt to the http://example.com/ resulted in a cache HIT . In this step we explored the possibility of swapping components of an application with microservice architecture with their equivalents without impacting rest of the parts of the stack. We have also explored data persistence using bind mount volumes that persists even after the containers writing to the volume are gone. So far, we have used docker-compose utility to orchestrate the application stack, which is good for development environment, but for production environment we use docker stack deploy command to run the application in a Docker Swarm Cluster . It is left for you as an assignment to deploy this application in a Docker Swarm Cluster. Conclusions \u00b6 We started this tutorial with a simple Python script that scrapes links from a give web page URL. We demonstrated various difficulties in running the script. We then illustrated how easy to run and portable the script becomes onces it is containerized. In the later steps we gradually evolved the script into a multi-service application stack. In the process we explored various concepts of microservice architecture and how Docker tools can be helpful in orchestrating a multi-service stack. Finally, we demonstrated the ease of microservice component swapping and data persistence. The next step would be to learn how to deploy such service stacks in a Docker Swarm Cluster . As an aside, here are some introductory Docker slides. Introducing Docker - Application Containerization & Service Orchestration by Sawood Alam","title":"Application Containerization and Microservice Orchestration"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#application-containerization-and-microservice-orchestration","text":"Sep 22, 2018 \u2022 @ibnesayeed In this tutorial we will learn about basic application containerization using Docker and running various components of an application as microservices. We will utilize Docker Compose for orchestration during the development. This tutorial is targeted for beginners who have the basic familiarity with Docker. If you are new to Docker, we recommend you check out Docker for Beginners tutorial first. We will start from a basic Python script that scrapes links from a given web page and gradually evolve it into a multi-service application stack. The demo code is available in the Link Extractor repo. The code is organized in steps that incrementally introduce changes and new concepts. After completion, the application stack will contain the following microservices: A web application written in PHP and served using Apache that takes a URL as the input and summarizes extracted links from it The web application talks to an API server written in Python (and Ruby) that takes care of the link extraction and returns a JSON response A Redis cache that is used by the API server to avoid repeated fetch and link extraction for pages that are already scraped The API server will only load the page of the input link from the web if it is not in the cache. The stack will eventually look like the figure below: This tutorial was initially developed for a colloquium in the Computer Science Department of the Old Dominion University , Norfolk, Virginia. A video recording , presentation slides , and a brief description of the talk can be found in a blog post . Steps: Stage Setup Step 0: Basic Link Extractor Script Step 1: Containerized Link Extractor Script Step 2: Link Extractor Module with Full URI and Anchor Text Step 3: Link Extractor API Service Step 4: Link Extractor API and Web Front End Services Step 5: Redis Service for Caching Step 6: Swap Python API Service with Ruby Conclusions","title":"Application Containerization and Microservice Orchestration"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#stage-setup","text":"Let\u2019s get started by first cloning the demo code repository, changing the working directory, and checking the demo branch out. git clone https://github.com/ibnesayeed/linkextractor.git cd linkextractor git checkout demo","title":"Stage Setup"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-0-basic-link-extractor-script","text":"Checkout the step0 branch and list files in it. git checkout step0 tree . \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 2 files The linkextractor.py file is the interesting one here, so let\u2019s look at its contents: cat linkextractor.py #!/usr/bin/env python import sys import requests from bs4 import BeautifulSoup res = requests.get ( sys.argv [ -1 ]) soup = BeautifulSoup ( res.text, \"html.parser\" ) for link in soup.find_all ( \"a\" ) : print ( link.get ( \"href\" )) This is a simple Python script that imports three packages: sys from the standard library and two popular third-party packages requests and bs4 . User-supplied command line argument (which is expected to be a URL to an HTML page) is used to fetch the page using the requests package, then parsed using the BeautifulSoup . The parsed object is then iterated over to find all the anchor elements (i.e., <a> tags) and print the value of their href attribute that contains the hyperlink. However, this seemingly simple script might not be the easiest one to run on a machine that does not meet its requirements. The README.md file suggests how to run it, so let\u2019s give it a try: ./linkextractor.py http://example.com/ bash: ./linkextractor.py: Permission denied When we tried to execute it as a script, we got the Permission denied error. Let\u2019s check the current permissions on this file: ls -l linkextractor.py -rw-r--r-- 1 root root 220 Sep 23 16 :26 linkextractor.py This current permission -rw-r--r-- indicates that the script is not set to be executable. We can either change it by running chmod a+x linkextractor.py or run it as a Python program instead of a self-executing script as illustrated below: python linkextractor.py Traceback ( most recent call last ) : File \"linkextractor.py\" , line 5 , in <module> from bs4 import BeautifulSoup ImportError: No module named bs4 Here we got the first ImportError message because we are missing the third-party package needed by the script. We can install that Python package (and potentially other missing packages) using one of the many techniques to make it work, but it is too much work for such a simple script, which might not be obvious for those who are not familiar with Python\u2019s ecosystem. Depending on which machine and operating system you are trying to run this script on, what software is already installed, and how much access you have, you might face some of these potential difficulties: Is the script executable? Is Python installed on the machine? Can you install software on the machine? Is pip installed? Are requests and beautifulsoup4 Python libraries installed? This is where application containerization tools like Docker come in handy. In the next step we will try to containerize this script and make it easier to execute.","title":"Step 0: Basic Link Extractor Script"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-1-containerized-link-extractor-script","text":"Checkout the step1 branch and list files in it. git checkout step1 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 3 files We have added one new file (i.e., Dockerfile ) in this step. Let\u2019s look into its contents: cat Dockerfile FROM python:3 LABEL maintainer = \"Sawood Alam <@ibnesayeed>\" RUN pip install beautifulsoup4 RUN pip install requests WORKDIR /app COPY linkextractor.py /app/ RUN chmod a+x linkextractor.py ENTRYPOINT [ \"./linkextractor.py\" ] Using this Dockerfile we can prepare a Docker image for this script. We start from the official python Docker image that contains Python\u2019s run-time environment as well as necessary tools to install Python packages and dependencies. We then add some metadata as labels (this step is not essential, but is a good practice nonetheless). Next two instructions run the pip install command to install the two third-party packages needed for the script to function properly. We then create a working directory /app , copy the linkextractor.py file in it, and change its permissions to make it an executable script. Finally, we set the script as the entrypoint for the image. So far, we have just described how we want our Docker image to be like, but didn\u2019t really build one. So let\u2019s do just that: docker image build -t linkextractor:step1 . This command should yield an output as illustrated below: Sending build context to Docker daemon 171.5kB Step 1/8 : FROM python:3 ... [OUTPUT REDACTED] ... Successfully built 226196ada9ab Successfully tagged linkextractor:step1 We have created a Docker image named linkextractor:step1 based on the Dockerfile illustrated above. If the build was successful, we should be able to see it in the list of image: docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE linkextractor step1 e067c677be37 2 seconds ago 931MB python 3 a9d071760c82 2 weeks ago 923MB This image should have all the necessary ingredients packaged in it to run the script anywhere on a machine that supports Docker. Now, let\u2019s run a one-off container with this image and extract links from some live web pages: docker container run -it --rm linkextractor:step1 http://example.com/ This outputs a single link that is present in the simple example.com web page: http://www.iana.org/domains/example Let\u2019s try it on a web page with more links in it: docker container run -it --rm linkextractor:step1 https://training.play-with-docker.com/ / /about/ #ops #dev /ops-stage1 /ops-stage2 /ops-stage3 /dev-stage1 /dev-stage2 /dev-stage3 /alacart https://twitter.com/intent/tweet?text = Play with Docker Classroom & url = https://training.play-with-docker.com/ & via = docker & related = docker https://facebook.com/sharer.php?u = https://training.play-with-docker.com/ https://plus.google.com/share?url = https://training.play-with-docker.com/ http://www.linkedin.com/shareArticle?mini = true & url = https://training.play-with-docker.com/ & title = Play%20with%20Docker%20Classroom & source = https://training.play-with-docker.com https://2018.dockercon.com/ https://2018.dockercon.com/ https://success.docker.com/training/ https://community.docker.com/registrations/groups/4316 https://docker.com https://www.docker.com https://www.facebook.com/docker.run https://twitter.com/docker https://www.github.com/play-with-docker/play-with-docker.github.io This looks good, but we can improve the output. For example, some links are relative, we can convert them into full URLs and also provide the anchor text they are linked to. In the next step we will make these changes and some other improvements to the script.","title":"Step 1: Containerized Link Extractor Script"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-2-link-extractor-module-with-full-uri-and-anchor-text","text":"Checkout the step2 branch and list files in it. git checkout step2 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 linkextractor.py 0 directories, 3 files In this step the linkextractor.py script is updated with the following functional changes: Paths are normalized to full URLs Reporting both links and anchor texts Usable as a module in other scripts Let\u2019s have a look at the updated script: cat linkextractor.py #!/usr/bin/env python import sys import requests from bs4 import BeautifulSoup from urllib.parse import urljoin def extract_links(url): res = requests.get(url) soup = BeautifulSoup(res.text, \"html.parser\") base = url # TODO: Update base if a <base> element is present with the href attribute links = [] for link in soup.find_all(\"a\"): links.append({ \"text\": \" \".join(link.text.split()) or \"[IMG]\", \"href\": urljoin(base, link.get(\"href\")) }) return links if __name__ == \"__main__\": if len(sys.argv) != 2: print(\"\\nUsage:\\n\\t{} <URL>\\n\".format(sys.argv[0])) sys.exit(1) for link in extract_links(sys.argv[-1]): print(\"[{}]({})\".format(link[\"text\"], link[\"href\"])) The link extraction logic is abstracted into a function extract_links that accepts a URL as a parameter and returns a list of objects containing anchor texts and normalized hyperlinks. This functionality can now be imported into other scripts as a module (which we will utilize in the next step). Now, let\u2019s build a new image and see these changes in effect: docker image build -t linkextractor:step2 . We have used a new tag linkextractor:step2 for this image so that we don\u2019t overwrite the image from the step0 to illustrate that they can co-exist and containers can be run using either of these images. docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE linkextractor step2 be2939eada96 3 seconds ago 931MB linkextractor step1 673d045a822f About a minute ago 931MB python 3 a9d071760c82 2 weeks ago 923MB Running a one-off container using the linkextractor:step2 image should now yield an improved output: docker container run -it --rm linkextractor:step2 https://training.play-with-docker.com/ [ Play with Docker classroom ]( https://training.play-with-docker.com/ ) [ About ]( https://training.play-with-docker.com/about/ ) [ IT Pros and System Administrators ]( https://training.play-with-docker.com/#ops ) [ Developers ]( https://training.play-with-docker.com/#dev ) [ Stage 1 : The Basics ]( https://training.play-with-docker.com/ops-stage1 ) [ Stage 2 : Digging Deeper ]( https://training.play-with-docker.com/ops-stage2 ) [ Stage 3 : Moving to Production ]( https://training.play-with-docker.com/ops-stage3 ) [ Stage 1 : The Basics ]( https://training.play-with-docker.com/dev-stage1 ) [ Stage 2 : Digging Deeper ]( https://training.play-with-docker.com/dev-stage2 ) [ Stage 3 : Moving to Staging ]( https://training.play-with-docker.com/dev-stage3 ) [ Full list of individual labs ]( https://training.play-with-docker.com/alacart ) [[ IMG ]]( https://twitter.com/intent/tweet?text = Play with Docker Classroom & url = https://training.play-with-docker.com/ & via = docker & related = docker ) [[ IMG ]]( https://facebook.com/sharer.php?u = https://training.play-with-docker.com/ ) [[ IMG ]]( https://plus.google.com/share?url = https://training.play-with-docker.com/ ) [[ IMG ]]( http://www.linkedin.com/shareArticle?mini = true & url = https://training.play-with-docker.com/ & title = Play%20with%20Docker%20Classroom & source = https://training.play-with-docker.com ) [[ IMG ]]( https://2018.dockercon.com/ ) [ DockerCon 2018 in San Francisco ]( https://2018.dockercon.com/ ) [ training.docker.com ]( https://success.docker.com/training/ ) [ Register here ]( https://community.docker.com/registrations/groups/4316 ) [ Docker, Inc. ]( https://docker.com ) [[ IMG ]]( https://www.docker.com ) [[ IMG ]]( https://www.facebook.com/docker.run ) [[ IMG ]]( https://twitter.com/docker ) [[ IMG ]]( https://www.github.com/play-with-docker/play-with-docker.github.io ) Running a container using the previous image linkextractor:step1 should still result in the old output: docker container run -it --rm linkextractor:step1 https://training.play-with-docker.com/ So far, we have learned how to containerize a script with its necessary dependencies to make it more portable. We have also learned how to make changes in the application and build different variants of Docker images that can co-exist. In the next step we will build a web service that will utilize this script and will make the service run inside a Docker container.","title":"Step 2: Link Extractor Module with Full URI and Anchor Text"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-3-link-extractor-api-service","text":"Checkout the step3 branch and list files in it. git checkout step3 tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 linkextractor.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt 0 directories, 5 files The following changes have been made in this step: Added a server script main.py that utilizes the link extraction module written in the last step The Dockerfile is updated to refer to the main.py file instead Server is accessible as a WEB API at http://<hostname>[:<prt>]/api/<url> Dependencies are moved to the requirements.txt file Needs port mapping to make the service accessible outside of the container (the Flask server used here listens on port 5000 by default) Let\u2019s first look at the Dockerfile for changes: cat Dockerfile FROM python:3 LABEL maintainer = \"Sawood Alam <@ibnesayeed>\" WORKDIR /app COPY requirements.txt /app/ RUN pip install -r requirements.txt COPY *.py /app/ RUN chmod a+x *.py CMD [ \"./main.py\" ] Since we have started using requirements.txt for dependencies, we no longer need to run pip install command for individual packages. The ENTRYPOINT directive is replaced with the CMD and it is referring to the main.py script that has the server code it because we do not want to use this image for one-off commands now. The linkextractor.py module remains unchanged in this step, so let\u2019s look into the newly added main.py file: cat main.py #!/usr/bin/env python from flask import Flask from flask import request from flask import jsonify from linkextractor import extract_links app = Flask ( __name__ ) @app.route ( \"/\" ) def index () : return \"Usage: http://<hostname>[:<prt>]/api/<url>\" @app.route ( \"/api/<path:url>\" ) def api ( url ) : qs = request.query_string.decode ( \"utf-8\" ) if qs ! = \"\" : url += \"?\" + qs links = extract_links ( url ) return jsonify ( links ) app.run ( host = \"0.0.0.0\" ) Here, we are importing extract_links function from the linkextractor module and converting the returned list of objects into a JSON response. It\u2019s time to build a new image with these changes in place: docker image build -t linkextractor:step3 . Then run the container in detached mode ( -d flag) so that the terminal is available for other commands while the container is still running. Note that we are mapping the port 5000 of the container with the 5000 of the host (using -p 5000:5000 argument) to make it accessible from the host. We are also assigning a name ( --name=linkextractor ) to the container to make it easier to see logs and kill or remove the container. docker container run -d -p 5000:5000 --name=linkextractor linkextractor:step3 If things go well, we should be able to see the container being listed in Up condition: docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUSPORTS NAMES d69c0150a754 linkextractor:step3 \"./main.py\" 9 seconds ago Up 8 seconds0.0.0.0:5000->5000/tcp linkextractor We can now make an HTTP request in the form /api/<url> to talk to this server and fetch the response containing extracted links: curl -i http://localhost:5000/api/http://example.com/ HTTP/1.0 200 OK Content-Type: application/json Content-Length: 78 Server: Werkzeug/0.14.1 Python/3.7.0 Date: Sun, 23 Sep 2018 20:52:56 GMT [{\"href\":\"http://www.iana.org/domains/example\",\"text\":\"More information...\"}] Now, we have the API service running that accepts requests in the form /api/<url> and responds with a JSON containing hyperlinks and anchor texts of all the links present in the web page at give <url> . Since the container is running in detached mode, so we can\u2019t see what\u2019s happening inside, but we can see logs using the name linkextractor we assigned to our container: docker container logs linkextractor * Serving Flask app \"main\" ( lazy loading ) * Environment: production WARNING: Do not use the development server in a production environment. Use a production WSGI server instead. * Debug mode: off * Running on http://0.0.0.0:5000/ ( Press CTRL+C to quit ) 172 .17.0.1 - - [ 23 /Sep/2018 20 :52:56 ] \"GET /api/http://example.com/ HTTP/1.1\" 200 - We can see the messages logged when the server came up, and an entry of the request log when we ran the curl command. Now we can kill and remove this container: docker container rm -f linkextractor In this step we have successfully ran an API service listening on port 5000 . This is great, but APIs and JSON responses are for machines, so in the next step we will run a web service with a human-friendly web interface in addition to this API service.","title":"Step 3: Link Extractor API Service"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-4-link-extractor-api-and-web-front-end-services","text":"Checkout the step4 branch and list files in it. git checkout step4 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 linkextractor.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 www \u2514\u2500\u2500 index.php 2 directories, 7 files In this step the following changes have been made since the last step: The link extractor JSON API service (written in Python) is moved in a separate ./api folder that has the exact same code as in the previous step A web front-end application is written in PHP under ./www folder that talks to the JSON API The PHP application is mounted inside the official php:7-apache Docker image for easier modification during the development The web application is made accessible at http://<hostname>[:<prt>]/?url=<url-encoded-url> An environment variable API_ENDPOINT is used inside the PHP application to configure it to talk to the JSON API server A docker-compose.yml file is written to build various components and glue them together In this step we are planning to run two separate containers, one for the API and the other for the web interface. The latter needs a way to talk to the API server. For the two containers to be able to talk to each other, we can either map their ports on the host machine and use that for request routing or we can place the containers in a single private network and access directly. Docker has an excellent support of networking and provides helpful commands to deal with networks. Additionally, in a Docker network containers identify themselves using their names as hostnames to avoid hunting for their IP addresses in the private network. However, we are not going to do any of this manually, instead we will be using Docker Compose to automate many of these tasks. So let\u2019s look at the docker-compose.yml file we have: cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step4-python build: ./api ports: - \"5000:5000\" web: image: php:7-apache ports: - \"80:80\" environment: - API_ENDPOINT = http://api:5000/api/ volumes: - ./www:/var/www/html This is a simple YAML file that describes the two services api and web . The api service will use the linkextractor-api:step4-python image that is not built yet, but will be built on-demand using the Dockerfile from the ./api directory. This service will be exposed on the port 5000 of the host. The second service named web will use official php:7-apache image directly from the DockerHub, that\u2019s why we do not have a Dockerfile for it. The service will be exposed on the default HTTP port (i.e., 80 ). We will supply an environment variable named API_ENDPOINT with the value http://api:5000/api/ to tell the PHP script where to connect to for the API access. Notice that we are not using an IP address here, instead, api:5000 is being used because we will have a dynamic hostname entry in the private network for the API service matching its service name. Finally, we will bind mount the ./www folder to make the index.php file available inside of the web service container at /var/www/html , which is the default web root for the Apache web server. Now, let\u2019s have a look at the user-facing www/index.php file: cat www/index.php This is a long file that mainly contains all the markup and styles of the page. However, the important block of code is in the beginning of the file as illustrated below: $api_endpoint = $_ENV [ \"API_ENDPOINT\" ] ?: \"http://localhost:5000/api/\" ; $url = \"\" ; if ( isset ( $_GET [ \"url\" ]) && $_GET [ \"url\" ] ! = \"\" ) { $url = $_GET [ \"url\" ] ; $json = @file_get_contents ( $api_endpoint . $url ) ; if ( $json == false ) { $err = \"Something is wrong with the URL: \" . $url ; } else { $links = json_decode ( $json , true ) ; $domains = [] ; foreach ( $links as $link ) { array_push ( $domains , parse_url ( $link [ \"href\" ] , PHP_URL_HOST )) ; } $domainct = @array_count_values ( $domains ) ; arsort ( $domainct ) ; } } The $api_endpoint variable is initialized with the value of the environment variable supplied from the docker-compose.yml file as $_ENV[\"API_ENDPOINT\"] (otherwise falls back to a default value of http://localhost:5000/api/ ). The request is made using file_get_contents function that uses the $api_endpoint variable and user supplied URL from $_GET[\"url\"] . Some analysis and transformations are performed on the received response that are later used in the markup to populate the page. Let\u2019s bring these services up in detached mode using docker-compose utility: docker-compose up -d --build Creating network \"linkextractor_default\" with the default driver Pulling web (php:7-apache)... 7-apache: Pulling from library/php ... [OUTPUT REDACTED] ... Status: Downloaded newer image for php:7-apache Building api Step 1/8 : FROM python:3 ... [OUTPUT REDACTED] ... Successfully built 1f419be1c2bf Successfully tagged linkextractor-api:step4-python Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done This output shows that Docker Compose automatically created a network named linkextractor_default , pulled php:7-apache image from DockerHub, built api:python image using our local Dockerfile , and finally, spun two containers linkextractor_web_1 and linkextractor_api_1 that correspond to the two services we have defined in the YAML file above. Checking for the list of running containers confirms that the two services are indeed running: docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 268b021b5a2c php:7-apache \"docker-php-entrypoi\u2026\" 3 minutes ago Up 3 minutes 0.0.0.0:80->80/tcp linkextractor_web_1 5bc266b4e43d linkextractor-api:step4-python \"./main.py\" 3 minutes ago Up 3 minutes 0.0.0.0:5000->5000/tcp linkextractor_api_1 We should now be able to talk to the API service as before: curl -i http://localhost:5000/api/http://example.com/ To access the web interface click to open the Link Extractor . Then fill the form with https://training.play-with-docker.com/ (or any HTML page URL of your choice) and submit to extract links from it. We have just created an application with microservice architecture, isolating individual tasks in separate services as opposed to monolithic applications where everything is put together in a single unit. Microservice applications are relatively easier to scale, maintains, and move around. They also allow easy swapping of components with an equivalent service. More on that later. Now, let\u2019s modify the www/index.php file to replace all occurrences of Link Extractor with Super Link Extractor : sed -i 's/Link Extractor/Super Link Extractor/g' www/index.php Reloading the web interface of the application (or clicking here ) should now reflect this change in the title, header, and footer. This is happening because the ./www folder is bind mounted inside of the container, so any changes made outside will reflect inside the container or the vice versa. This approach is very helpful in development, but in the production environment we would prefer our Docker images to be self-contained. Let\u2019s revert these changes now to clean the Git tracking: git reset --hard Before we move on to the next step we need to shut these services down, but Docker Compose can help us take care of it very easily: docker-compose down Stopping linkextractor_api_1 ... done Stopping linkextractor_web_1 ... done Removing linkextractor_api_1 ... done Removing linkextractor_web_1 ... done Removing network linkextractor_default In the next step we will add one more service to our stack and will build a self-contained custom image for our web interface service.","title":"Step 4: Link Extractor API and Web Front End Services"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-5-redis-service-for-caching","text":"Checkout the step5 branch and list files in it. git checkout step5 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 linkextractor.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 docker-compose.yml \u2514\u2500\u2500 www \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.php 2 directories, 8 files Some noticeable changes from the previous step are as following: Another Dockerfile is added in the ./www folder for the PHP web application to build a self-contained image and avoid live file mounting A Redis container is added for caching using the official Redis Docker image The API service talks to the Redis service to avoid downloading and parsing pages that were already scraped before A REDIS_URL environment variable is added to the API service to allow it to connect to the Redis cache Let\u2019s first inspect the newly added Dockerfile under the ./www folder: cat www/Dockerfile FROM php:7-apache LABEL maintainer=\"Sawood Alam <@ibnesayeed>\" ENV API_ENDPOINT=\"http://localhost:5000/api/\" COPY . /var/www/html/ This is a rather simple Dockerfile that uses the official php:7-apache image as the base and copies all the files from the ./www folder into the /var/www/html/ folder of the image. This is exactly what was happening in the previous step, but that was bind mounted using a volume, while here we are making the code part of the self-contained image. We have also added the API_ENDPOINT environment variable here with a default value, which implicitly suggests that this is an important information that needs to be present in order for the service to function properly (and should be customized at run time with an appropriate value). Next, we will look at the API server\u2019s api/main.py file where we are utilizing the Redis cache: cat api/main.py The file has many lines, but the important bits are as illustrated below: redis_conn = redis.from_url(os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")) # ... jsonlinks = redis.get(url) if not jsonlinks: links = extract_links(url) jsonlinks = json.dumps(links, indent=2) redis.set(url, jsonlinks) This time the API service needs to know how to connect to the Redis instance as it is going to use it for caching. This information can be made available at run time using the REDIS_URL environment variable. A corresponding ENV entry is also added in the Dockerfile of the API service with a default value. A redis client instance is created using the hostname redis (same as the name of the service as we will see later) and the default Redis port 6379 . We are first trying to see if a cache is present in the Redis store for a given URL, if not then we use the extract_links function as before and populate the cache for future attempts. Now, let\u2019s look into the updated docker-compose.yml file: cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step5-python build: ./api ports: - \"5000:5000\" environment: - REDIS_URL=redis://redis:6379 web: image: linkextractor-web:step5-php build: ./www ports: - \"80:80\" environment: - API_ENDPOINT=http://api:5000/api/ redis: image: redis The api service configuration largely remains the same as before, except the updated image tag and added environment variable REDIS_URL that points to the Redis service. For the web service, we are using the custom linkextractor-web:step5-php image that will be built using the newly added Dockerfile in the ./www folder. We are no longer mounting the ./www folder using the volumes config. Finally, a new service named redis is added that will use the official image from DockerHub and needs no specific configurations for now. This service is accessible to the Python API using its service name, the same way the API service is accessible to the PHP front-end service. Let\u2019s boot these services up: docker-compose up -d --build ... [OUTPUT REDACTED] ... Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done Creating linkextractor_redis_1 ... done Now, that all three services are up, access the web interface by clicking the Link Extractor . There should be no visual difference from the previous step. However, if you extract links from a page with a lot of links, the first time it should take longer, but the successive attempts to the same page should return the response fairly quickly. To check whether or not the Redis service is being utilized, we can use docker-compose exec followed by the redis service name and the Redis CLI\u2019s monitor command: docker-compose exec redis redis-cli monitor Now, try to extract links from some web pages using the web interface and see the difference in Redis log entries for pages that are scraped the first time and those that are repeated. Before continuing further with the tutorial, stop the interactive monitor stream as a result of the above redis-cli command by pressing Ctrl + C keys while the interactive terminal is in focus. Now that we are not mounting the /www folder inside the container, local changes should not reflect in the running service: sed -i 's/Link Extractor/Super Link Extractor/g' www/index.php Verify that the changes made locally do not reflect in the running service by reloading the web interface and then revert changes: git reset --hard Now, shut these services down and get ready for the next step: docker-compose down Stopping linkextractor_web_1 ... done Stopping linkextractor_redis_1 ... done Stopping linkextractor_api_1 ... done Removing linkextractor_web_1 ... done Removing linkextractor_redis_1 ... done Removing linkextractor_api_1 ... done Removing network linkextractor_default We have successfully orchestrated three microservices to compose our Link Extractor application. We now have an application stack that represents the architecture illustrated in the figure shown in the introduction of this tutorial. In the next step we will explore how easy it is to swap components from an application with the microservice architecture.","title":"Step 5: Redis Service for Caching"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#step-6-swap-python-api-service-with-ruby","text":"Checkout the step6 branch and list files in it. git checkout step6 tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 Gemfile \u2502 \u2514\u2500\u2500 linkextractor.rb \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2514\u2500\u2500 www \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.php 3 directories, 7 files Some significant changes from the previous step include: The API service written in Python is replaced with a similar Ruby implementation The API_ENDPOINT environment variable is updated to point to the new Ruby API service The link extraction cache event (HIT/MISS) is logged and is persisted using volumes Notice that the ./api folder does not contain any Python scripts, instead, it now has a Ruby file and a Gemfile to manage dependencies. Let\u2019s have a quick walk through the changed files: cat api/linkextractor.rb #!/usr/bin/env ruby # encoding: utf-8 require \"sinatra\" require \"open-uri\" require \"uri\" require \"nokogiri\" require \"json\" require \"redis\" set :protection, :except=>:path_traversal redis = Redis.new(url: ENV[\"REDIS_URL\"] || \"redis://localhost:6379\") Dir.mkdir(\"logs\") unless Dir.exist?(\"logs\") cache_log = File.new(\"logs/extraction.log\", \"a\") get \"/\" do \"Usage: http://<hostname>[:<prt>]/api/<url>\" end get \"/api/*\" do url = [params['splat'].first, request.query_string].reject(&:empty?).join(\"?\") cache_status = \"HIT\" jsonlinks = redis.get(url) if jsonlinks.nil? cache_status = \"MISS\" jsonlinks = JSON.pretty_generate(extract_links(url)) redis.set(url, jsonlinks) end cache_log.puts \"#{Time.now.to_i}\\t#{cache_status}\\t#{url}\" status 200 headers \"content-type\" => \"application/json\" body jsonlinks end def extract_links(url) links = [] doc = Nokogiri::HTML(open(url)) doc.css(\"a\").each do |link| text = link.text.strip.split.join(\" \") begin links.push({ text: text.empty? ? \"[IMG]\" : text, href: URI.join(url, link[\"href\"]) }) rescue end end links end This Ruby file is almost equivalent to what we had in Python before, except, in addition to that it also logs the link extraction requests and corresponding cache events. In a microservice architecture application swapping components with an equivalent one is easy as long as the expectations of consumers of the component are maintained. cat api/Dockerfile FROM ruby:2.6 LABEL maintainer=\"Sawood Alam <@ibnesayeed>\" ENV LANG C.UTF-8 ENV REDIS_URL=\"redis://localhost:6379\" WORKDIR /app COPY Gemfile /app/ RUN bundle install COPY linkextractor.rb /app/ RUN chmod a+x linkextractor.rb CMD [\"./linkextractor.rb\", \"-o\", \"0.0.0.0\"] Above Dockerfile is written for the Ruby script and it is pretty much self-explanatory. cat docker-compose.yml version: '3' services: api: image: linkextractor-api:step6-ruby build: ./api ports: - \"4567:4567\" environment: - REDIS_URL=redis://redis:6379 volumes: - ./logs:/app/logs web: image: linkextractor-web:step6-php build: ./www ports: - \"80:80\" environment: - API_ENDPOINT=http://api:4567/api/ redis: image: redis The docker-compose.yml file has a few minor changes in it. The api service image is now named linkextractor-api:step6-ruby , the port mapping is changed from 5000 to 4567 (which is the default port for Sinatra server), and the API_ENDPOINT environment variable in the web service is updated accordingly so that the PHP code can talk to it. With these in place, let\u2019s boot our service stack: docker-compose up -d --build ... [OUTPUT REDACTED] ... Successfully built b713eef49f55 Successfully tagged linkextractor-api:step6-ruby Creating linkextractor_web_1 ... done Creating linkextractor_api_1 ... done Creating linkextractor_redis_1 ... done We should now be able to access the API (using the updated port number): curl -i http://localhost:4567/api/http://example.com/ HTTP/1.1 200 OK Content-Type: application/json Content-Length: 96 X-Content-Type-Options: nosniff Server: WEBrick/1.4.2 (Ruby/2.5.1/2018-03-29) Date: Mon, 24 Sep 2018 01:41:35 GMT Connection: Keep-Alive [ { \"text\": \"More information...\", \"href\": \"http://www.iana.org/domains/example\" } ] Now, open the web interface by clicking the Link Extractor and extract links of a few URLs. Also, try to repeat these attempts for some URLs. If everything is alright, the web application should behave as before without noticing any changes in the API service (which is completely replaced). We can shut the stack down now: docker-compose down Since we have persisted logs, they should still be available after the services are gone: cat logs/extraction.log 1537753295 MISS http://example.com/ 1537753600 HIT http://example.com/ 1537753635 MISS https://training.play-with-docker.com/ This illustrates that the caching is functional as the second attempt to the http://example.com/ resulted in a cache HIT . In this step we explored the possibility of swapping components of an application with microservice architecture with their equivalents without impacting rest of the parts of the stack. We have also explored data persistence using bind mount volumes that persists even after the containers writing to the volume are gone. So far, we have used docker-compose utility to orchestrate the application stack, which is good for development environment, but for production environment we use docker stack deploy command to run the application in a Docker Swarm Cluster . It is left for you as an assignment to deploy this application in a Docker Swarm Cluster.","title":"Step 6: Swap Python API Service with Ruby"},{"location":"2.Docker/Docker-For-Developers/02Application%20Containerization%20and%20Microservice%20Orchestration.html#conclusions","text":"We started this tutorial with a simple Python script that scrapes links from a give web page URL. We demonstrated various difficulties in running the script. We then illustrated how easy to run and portable the script becomes onces it is containerized. In the later steps we gradually evolved the script into a multi-service application stack. In the process we explored various concepts of microservice architecture and how Docker tools can be helpful in orchestrating a multi-service stack. Finally, we demonstrated the ease of microservice component swapping and data persistence. The next step would be to learn how to deploy such service stacks in a Docker Swarm Cluster . As an aside, here are some introductory Docker slides. Introducing Docker - Application Containerization & Service Orchestration by Sawood Alam","title":"Conclusions"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html","text":"Docker\u5b89\u88c5-\u5378\u8f7d \u00b6 \u4e00\u3001\u73af\u5883 \u00b6 ECS\uff081\u68382G1M\uff09+centOS7 \u4e8c\u3001\u5378\u8f7d\u65e7\u7684\u5b89\u88c5\u5305 \u00b6 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine yum remove docker-ce docker-ce-cli containerd.io #\u5378\u8f7d\u4f9d\u8d56 rm -rf /var/lib/docker #\u5220\u9664\u8d44\u6e90 \u4e09\u3001\u5b89\u88c5 \u00b6 1 \u5b89\u88c5\u5de5\u5177\u5305 \u00b6 yum install -y yum-utils 2 \u8bbe\u7f6e\u955c\u50cf\u4ed3\u5e93 \u00b6 yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo --\u9ed8\u8ba4\u662f\u56fd\u5916\u7684 \u5982\u679c\u6ca1\u6709vpn \u5efa\u8bae\u5b89\u88c5\u963f\u91cc\u4e91\u7684 \u00b6 yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #\u66f4\u65b0yum \u7d22\u5f15\u5b89\u88c5\u5305 yum makecache fast 3 \u5b89\u88c5\u542f\u52a8docker \u00b6 yum install docker-ce docker-ce-cli containerd.io #\u5b89\u88c5\uff0c\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u591a\u8bd5\u51e0\u6b21 systemctl start docker #\u542f\u52a8 docker --version #\u67e5\u770bdocker \u662f\u5426\u5b89\u88c5\u5b8c\u6210 4 Hello world \u00b6 docker run hello-world #\u521d\u6b21\u81ea\u52a8\u4e0b\u8f7d\u955c\u50cf Docker\u57fa\u672c\u64cd\u4f5c \u00b6 Docker\u955c\u50cf\u64cd\u4f5c \u00b6 docker images #\u67e5\u770b\u5168\u90e8\u955c\u50cf docker pull \u540d\u79f0 docker search httpd docker rmi \u955c\u50cfname/\u955c\u50cfid (-f) docker build #\u521b\u5efa\u955c\u50cf Docker \u5bb9\u5668\u64cd\u4f5c \u00b6 \u67e5\u770b\u6240\u6709\u5bb9\u5668 docker ps -a \u67e5\u770b\u5bb9\u5668\u8fd0\u884c\u65e5\u5fd7 docker logs \u5bb9\u5668\u540d\u79f0/\u5bb9\u5668id \u505c\u6b62\u5bb9\u5668\u8fd0\u884c docker stop \u5bb9\u5668name/\u5bb9\u5668id \u7ec8\u6b62\u5bb9\u5668\u540e\u8fd0\u884c docker start \u5bb9\u5668name/\u5bb9\u5668id \u5bb9\u5668\u91cd\u542f docker restart \u5bb9\u5668name/\u5bb9\u5668id \u5220\u9664\u5bb9\u5668 docker rm -f \u5bb9\u5668name/\u5bb9\u5668id docker-compose \u00b6 \u7b80\u4ecb \u00b6 Compose \u662f\u7528\u4e8e\u5b9a\u4e49\u548c\u8fd0\u884c\u591a\u5bb9\u5668 Docker \u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\u3002\u901a\u8fc7 Compose\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 YML \u6587\u4ef6\u6765\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u6240\u6709\u670d\u52a1\u3002\u7136\u540e\uff0c\u4f7f\u7528\u4e00\u4e2a\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4ece YML \u6587\u4ef6\u914d\u7f6e\u4e2d\u521b\u5efa\u5e76\u542f\u52a8\u6240\u6709\u670d\u52a1\u3002 YAML\u6559\u7a0b https://www.runoob.com/w3cnote/yaml-intro.html Compose \u4f7f\u7528\u7684\u4e09\u4e2a\u6b65\u9aa4\uff1a \u00b7 \u4f7f\u7528 Dockerfile \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u7684\u73af\u5883\u3002 \u00b7 \u4f7f\u7528 docker-compose.yml \u5b9a\u4e49\u6784\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\uff0c\u8fd9\u6837\u5b83\u4eec\u53ef\u4ee5\u5728\u9694\u79bb\u73af\u5883\u4e2d\u4e00\u8d77\u8fd0\u884c\u3002 \u00b7 \u6700\u540e\uff0c\u6267\u884c docker-compose up \u547d\u4ee4\u6765\u542f\u52a8\u5e76\u8fd0\u884c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002 \u5b89\u88c5 \u00b6 \u4e0b\u8f7d Docker Compose \u7684\u5f53\u524d\u7a33\u5b9a\u7248\u672c\uff1a $ sudo curl -L \" https://github.com/docker/compose/releases/download/1.24.1/docker-compose- (uname -s)- (uname -s)- (uname -m)\" -o /usr/local/bin/docker-compose \u8981\u5b89\u88c5\u5176\u4ed6\u7248\u672c\u7684 Compose\uff0c\u8bf7\u66ff\u6362 1.24.1\u3002 \u5c06\u53ef\u6267\u884c\u6743\u9650\u5e94\u7528\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a $ sudo chmod +x /usr/local/bin/docker-compose \u521b\u5efa\u8f6f\u94fe\uff1a $ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \u6d4b\u8bd5\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a $ docker-compose --version cker-compose version 1.24.1, build 4667896b \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff1a docker-compose up -d \u8bfe\u5802\u7528\u547d\u4ee4 \u00b6 \u521d\u59cb\u5316\u4e00\u6ce2\u73af\u5883 docker search netcore docker pull microsoft/dotnet #\u4e0b\u8f7d\u57fa\u7840\u955c\u50cf docker stop $(docker ps -q) & docker rm $(docker ps -aq) #\u505c\u7528\u5e76\u5220\u9664\u5168\u90e8\u5bb9\u5668 build\u955c\u50cf\uff1a docker build -t core31v1.813 -f Dockerfile . docker run -itd -p 8082:80 core31v1.813 docker exec -it fd2c868cadlc /bin/bash ls----cd----cat--exit docker run -d -p 8081:80 -v /0813/project/publish:/app --workdir /app mcr.microsoft.com/dotnet/core/aspnet dotnet /app/Zhaoxi.AspNetCore31.DemoProject.dll docker run -d -p 8086:80 -v /0813/enginx/:/var/log/nginx/ -v /0813/enginx/nginx.conf:/etc/nginx/nginx.conf --name elnginx nginx","title":"\u671d\u5915\u7b14\u8bb0"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#docker-","text":"","title":"Docker\u5b89\u88c5-\u5378\u8f7d"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_1","text":"ECS\uff081\u68382G1M\uff09+centOS7","title":"\u4e00\u3001\u73af\u5883"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_2","text":"yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine yum remove docker-ce docker-ce-cli containerd.io #\u5378\u8f7d\u4f9d\u8d56 rm -rf /var/lib/docker #\u5220\u9664\u8d44\u6e90","title":"\u4e8c\u3001\u5378\u8f7d\u65e7\u7684\u5b89\u88c5\u5305"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_3","text":"","title":"\u4e09\u3001\u5b89\u88c5"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#1","text":"yum install -y yum-utils","title":"1 \u5b89\u88c5\u5de5\u5177\u5305"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#2","text":"yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo --\u9ed8\u8ba4\u662f\u56fd\u5916\u7684","title":"2 \u8bbe\u7f6e\u955c\u50cf\u4ed3\u5e93"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#vpn","text":"yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #\u66f4\u65b0yum \u7d22\u5f15\u5b89\u88c5\u5305 yum makecache fast","title":"\u5982\u679c\u6ca1\u6709vpn \u5efa\u8bae\u5b89\u88c5\u963f\u91cc\u4e91\u7684"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#3-docker","text":"yum install docker-ce docker-ce-cli containerd.io #\u5b89\u88c5\uff0c\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u591a\u8bd5\u51e0\u6b21 systemctl start docker #\u542f\u52a8 docker --version #\u67e5\u770bdocker \u662f\u5426\u5b89\u88c5\u5b8c\u6210","title":"3  \u5b89\u88c5\u542f\u52a8docker"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#4-hello-world","text":"docker run hello-world #\u521d\u6b21\u81ea\u52a8\u4e0b\u8f7d\u955c\u50cf","title":"4 Hello world"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#docker","text":"","title":"Docker\u57fa\u672c\u64cd\u4f5c"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#docker_1","text":"docker images #\u67e5\u770b\u5168\u90e8\u955c\u50cf docker pull \u540d\u79f0 docker search httpd docker rmi \u955c\u50cfname/\u955c\u50cfid (-f) docker build #\u521b\u5efa\u955c\u50cf","title":"Docker\u955c\u50cf\u64cd\u4f5c"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#docker_2","text":"\u67e5\u770b\u6240\u6709\u5bb9\u5668 docker ps -a \u67e5\u770b\u5bb9\u5668\u8fd0\u884c\u65e5\u5fd7 docker logs \u5bb9\u5668\u540d\u79f0/\u5bb9\u5668id \u505c\u6b62\u5bb9\u5668\u8fd0\u884c docker stop \u5bb9\u5668name/\u5bb9\u5668id \u7ec8\u6b62\u5bb9\u5668\u540e\u8fd0\u884c docker start \u5bb9\u5668name/\u5bb9\u5668id \u5bb9\u5668\u91cd\u542f docker restart \u5bb9\u5668name/\u5bb9\u5668id \u5220\u9664\u5bb9\u5668 docker rm -f \u5bb9\u5668name/\u5bb9\u5668id","title":"Docker \u5bb9\u5668\u64cd\u4f5c"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#docker-compose","text":"","title":"docker-compose"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_4","text":"Compose \u662f\u7528\u4e8e\u5b9a\u4e49\u548c\u8fd0\u884c\u591a\u5bb9\u5668 Docker \u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\u3002\u901a\u8fc7 Compose\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 YML \u6587\u4ef6\u6765\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u6240\u6709\u670d\u52a1\u3002\u7136\u540e\uff0c\u4f7f\u7528\u4e00\u4e2a\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4ece YML \u6587\u4ef6\u914d\u7f6e\u4e2d\u521b\u5efa\u5e76\u542f\u52a8\u6240\u6709\u670d\u52a1\u3002 YAML\u6559\u7a0b https://www.runoob.com/w3cnote/yaml-intro.html Compose \u4f7f\u7528\u7684\u4e09\u4e2a\u6b65\u9aa4\uff1a \u00b7 \u4f7f\u7528 Dockerfile \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u7684\u73af\u5883\u3002 \u00b7 \u4f7f\u7528 docker-compose.yml \u5b9a\u4e49\u6784\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\uff0c\u8fd9\u6837\u5b83\u4eec\u53ef\u4ee5\u5728\u9694\u79bb\u73af\u5883\u4e2d\u4e00\u8d77\u8fd0\u884c\u3002 \u00b7 \u6700\u540e\uff0c\u6267\u884c docker-compose up \u547d\u4ee4\u6765\u542f\u52a8\u5e76\u8fd0\u884c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u7b80\u4ecb"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_5","text":"\u4e0b\u8f7d Docker Compose \u7684\u5f53\u524d\u7a33\u5b9a\u7248\u672c\uff1a $ sudo curl -L \" https://github.com/docker/compose/releases/download/1.24.1/docker-compose- (uname -s)- (uname -s)- (uname -m)\" -o /usr/local/bin/docker-compose \u8981\u5b89\u88c5\u5176\u4ed6\u7248\u672c\u7684 Compose\uff0c\u8bf7\u66ff\u6362 1.24.1\u3002 \u5c06\u53ef\u6267\u884c\u6743\u9650\u5e94\u7528\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a $ sudo chmod +x /usr/local/bin/docker-compose \u521b\u5efa\u8f6f\u94fe\uff1a $ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \u6d4b\u8bd5\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a $ docker-compose --version cker-compose version 1.24.1, build 4667896b \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff1a docker-compose up -d","title":"\u5b89\u88c5"},{"location":"2.Docker/%E7%AC%94%E8%AE%B0/%E6%9C%9D%E5%A4%95%E7%AC%94%E8%AE%B0.html#_6","text":"\u521d\u59cb\u5316\u4e00\u6ce2\u73af\u5883 docker search netcore docker pull microsoft/dotnet #\u4e0b\u8f7d\u57fa\u7840\u955c\u50cf docker stop $(docker ps -q) & docker rm $(docker ps -aq) #\u505c\u7528\u5e76\u5220\u9664\u5168\u90e8\u5bb9\u5668 build\u955c\u50cf\uff1a docker build -t core31v1.813 -f Dockerfile . docker run -itd -p 8082:80 core31v1.813 docker exec -it fd2c868cadlc /bin/bash ls----cd----cat--exit docker run -d -p 8081:80 -v /0813/project/publish:/app --workdir /app mcr.microsoft.com/dotnet/core/aspnet dotnet /app/Zhaoxi.AspNetCore31.DemoProject.dll docker run -d -p 8086:80 -v /0813/enginx/:/var/log/nginx/ -v /0813/enginx/nginx.conf:/etc/nginx/nginx.conf --name elnginx nginx","title":"\u8bfe\u5802\u7528\u547d\u4ee4"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html","text":"CentOS7 \u5bb9\u5668\u73af\u5883\u5220\u9664\u9ed8\u8ba4\u7f51\u6865Docker0\uff0c\u91c7\u7528\u81ea\u5b9a\u4e49\u7f51\u6865\u8fdb\u884c\u901a\u8baf \u00b6 \u4f5c\u8005 lyc 2020 \u5e74 07\u6708 03\u65e5 \u524d\u8a00 \u00b6 Docker\u5728\u542f\u52a8\u5bb9\u5668\u955c\u50cf\u5b9e\u4f8b\u4e4b\u540e\uff0c\u9ed8\u8ba4\u662f\u91c7\u7528\u7f51\u6865\u7684\u6a21\u5f0f\u4e0e\u5916\u754c\u8fdb\u884c\u901a\u8baf\uff0c\u8be6\u7ec6\u53c2\u8003\u5b98\u7f51\u8bf4\u660e 1 \u9002\u7528\u573a\u666f. \u00b6 1.Docker\u5bb9\u5668\u5b89\u88c5\u5230VMware \u865a\u62df\u673a\u7684CentOS7\u4e4b\u540e,\u542f\u52a8\u7684\u5bb9\u5668\u5b9e\u4f8b\u65e0\u6cd5\u8bbf\u95ee\u5bbf\u4e3b\u4e3b\u673aIP\uff0c\u66f4\u65e0\u6cd5\u8bbf\u95ee\u5916\u7f51\uff0c\u5bbf\u4e3b\u4e3b\u673a\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u5bb9\u5668IP\u3002\u901a\u8fc7\u5821\u5792\u673a\u8bbf\u95eeDocker\u4e5f\u6709\u53ef\u80fd\u51fa\u73b0\u7c7b\u4f3c\u95ee\u9898\u3002(CentOS7\u7269\u7406\u4e3b\u673a\u53ca\u4e91\u4e3b\u673a\u6682\u65f6\u6ca1\u6709\u53d1\u73b0\u6b64\u95ee\u9898) 2.\u4e1a\u52a1\u573a\u666f\u9700\u8981\u91c7\u7528\u81ea\u5b9a\u4e49\u7f51\u6865\u8fdb\u884c\u5bb9\u5668\u7f51\u7edc\u7ba1\u7406 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 1.\u5148\u5220\u9664\u9ed8\u8ba4\u7f51\u6865docker0 \u00b6 \u67e5\u770b\u7cfb\u7edf\u7f51\u6865(Linux\u7f51\u6865\u76f8\u5173\u64cd\u4f5c\u9700\u8981\u7528\u5230\u5de5\u5177bridge-utils) brctl show \u63d0\u793a \u5982\u679c\u63d0\u793abrctl\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u5b89\u88c5\u6b64\u5de5\u5177: yum install bridge-utils ,\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7 brctl show \u67e5\u770b\u5230\u9ed8\u8ba4\u7f51\u6865docker0 \u7136\u540e\u901a\u8fc7 ip link set dev \u547d\u4ee4\u5148\u5173\u95eddocker0,\u518d\u901a\u8fc7 brctl delbr \u547d\u4ee4\u8fdb\u884c\u5220\u9664\u5373\u53ef ip link set dev docker0 down brctl delbr docker0 2.\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7f51\u6865bridge0 \u00b6 \u5148\u505c\u6b62\u5bb9\u5668 service docker stop \u518d\u6dfb\u52a0\u7f51\u6865bridge0\u5e76\u8bbe\u7f6eIP\u5730\u5740\u6bb5 brctl addbr bridge0 ip addr add 172 .16.100.1/24 dev bridge0 \u542f\u52a8\u7f51\u6865\uff0c\u67e5\u770b\u81ea\u5b9a\u4e49\u7f51\u6865\u4fe1\u606f ip link set dev bridge0 up ifconfig bridge0 3.\u4fee\u6539Docker\u5b88\u62a4\u8fdb\u7a0b\u914d\u7f6e \u00b6 \u63d0\u793a docker\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e3a/etc/docker/daemon.json,\u5982\u679c\u6ca1\u6709\u6b64\u6587\u4ef6,\u5219\u9700\u8981\u521b\u5efa\u5b83vim /etc/docker/daemon.json \u6dfb\u52a0\u914d\u7f6e\u9879 \"bridge\":\"bridge0\" \u914d\u7f6e\u7ed3\u679c\u5982\u4e0b(\u672c\u673a\u4e4b\u524d\u914d\u7f6e\u8fc7\u52a0\u901f\u955c\u50cf\u548c\u79c1\u6709\u4ed3\u5e93\u5730\u5740) \u67e5\u770b\u6700\u65b0\u7f51\u6865\u540d\u79f0\uff0c\u518d\u6ca1\u6709\u542f\u52a8\u5bb9\u5668\u4e4b\u524dbridge id \u4e3a 8000.00000000000 brctl show 4.\u68c0\u67e5\u7f51\u6865IP\u7f51\u5173 \u00b6 \u91cd\u65b0\u542f\u52a8docker\u670d\u52a1 service docker start \u67e5\u770bdocker bridge\u7f51\u7edc\u8be6\u60c5 docker network inspect bridge \u68c0\u67e5\u7f51\u6865\u914d\u7f6e\u662f\u5426\u4e3a\u540d\u79f0 bridge.name:\"bridge0\" \u7f51\u7edc\u6bb5 subnet\uff1a172.16.100.0/24 \u7f51\u5173 Gateawy:172.16.100.1 5.\u6d4b\u8bd5\u8054\u8c03\u5bb9\u5668\u7f51\u7edc\u662f\u5426\u6b63\u5e38 \u00b6 \u542f\u52a8\u4e00\u4e2a\u955c\u50cf\u8fdb\u884c\u5bb9\u5668\u7f51\u7edc\u8c03\u8bd5\uff0c\u8fd9\u91cc\u4f7f\u7528netshoot 2 \u955c\u50cf docker run -it --rm --name testnet nicolaka/netshoot \u8fd0\u884c\u5bb9\u5668\u4e4b\u540e\uff0c\u53ef\u76f4\u63a5\u8fdb\u884c\u5bf9\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\u5f0f\u547d\u4ee4\u64cd\u4f5c\uff0c\u9996\u5148\u83b7\u53d6\u7684ip\u5730\u5740\u4fe1\u606f ifconfig \u63a5\u4e0b\u6765\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c \u4e09\u8fdeping ,\u9a8c\u8bc1\u7f51\u7edc\u662f\u5426\u6b63\u5e38\u901a\u8baf \u4e00ping \u7f51\u6865\u7f51\u5173 ping 172.16.100.1 \u4e8cping \u5bbf\u4e3b\u4e3b\u673aIP\u6216\u7f51\u5173 ping 192.168.10.20 (\u5728VMware\u4e2d\u7684CentOS\u4e0e\u771f\u5b9e\u673a\u662fNAT\u8054\u7f51\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5ping\u672c\u7269\u7406\u673a\u7684ip\u6216\u7f51\u5173) \u4e09ping \u5916\u7f51\u5730\u5740 www.baidu.com \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff0c\u5bb9\u5668\u5185\u7f51\u548c\u5916\u7f51\u5168\u90e8\u901a\u8baf\u6b63\u5e38 \u9000\u51fa\u5bb9\u5668(\u8f93\u5165 exit ),\u6700\u540e\u5728\u5bbf\u4e3b\u4e3b\u673aCentOS7\u4e2d\u6d4b\u8bd5\u662f\u5426\u53ef\u4ee5\u4e0e\u5bb9\u5668\u5b9e\u4f8b\u901a\u8baf ping 172.16.100.1 \u7f51\u6865\u7f51\u5173 ping172.16.100.2 \u5bb9\u5668\u5b9e\u4f8bIP \u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770bbridge0\u7684id\uff0c\u67e5\u770b\u521a\u521a\u542f\u52a8\u7684\u5bb9\u5668\u5b9e\u4f8b\u662f\u5426\u5173\u8054\u7f51\u6865 brctl show \u6ce8\u610f \u5982\u4e0b\u56fe\u6240\u793abridge id 8000.ae723e9584f0 , \u5982\u679cbridge id \u4ecd\u7136\u662f8000.00000\uff0c\u5219\u8981\u4e48\u6ca1\u6709\u542f\u52a8\u5bb9\u5668\u5b9e\u4f8b\uff0c\u8981\u4e48\u4e0a\u9762\u7684\u6b65\u9aa4\u6709\u8bef\u3002 \u67e5\u770b\u5bb9\u5668IP\u7684\u65b9\u6cd5\uff0c\u9664\u4e86\u8fdb\u5165\u5bb9\u5668\u5185\u90e8\u6267\u884c ifconfig \u67e5\u770b ip \u4ee5\u5916(\u6ce8\u610f\uff1a\u6709\u4e9b\u5bb9\u5668\u955c\u50cf\u662f\u6ca1\u6709\u96c6\u6210\u7f51\u7edc\u547d\u4ee4\u7684)\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6211\u4eec\u901a\u8fc7 docker network inspect \u5b50\u547d\u4ee4\u67e5\u770b\u4e0e\u7f51\u6865\u5173\u8054\u7684\u6240\u6709\u5bb9\u5668\u5b9e\u4f8bip\u6216 docker inspect [\u5bb9\u5668id/name] \u67e5\u770b\u67d0\u4e2a\u5bb9\u5668\u5b9e\u4f8b\u7684ip docker network inspect bridge 6.\u5916\u7f51\u4e0d\u80fd\u8bbf\u95ee\u5bb9\u5668\u5185\u7f51\u7684\u60c5\u51b5 \u00b6 \u8c03\u6574\u9632\u706b\u5899\u8bbf\u95ee\u89c4\u5219\u6216\u5173\u95ed\u9632\u706b\u5899 \u5982\u679c\u5bbf\u4e3b\u4e3b\u673a\u5f00\u542f\u4e86\u9632\u706b\u5899,\u5916\u7f51\u53ef\u80fd\u65e0\u6cd5\u8bbf\u95ee\u5bb9\u5668\u6240\u66b4\u9732\u7684\u7aef\u53e3\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u5f00\u542f\u9632\u706b\u5899\u76f8\u5173\u7aef\u53e3\u5373\u53ef,\u6bd4\u5982\u5bb9\u5668\u662f\u4e00\u4e2aweb\u670d\u52a1\u5b9e\u4f8b\uff0c\u5916\u90e8\u4e0e\u5185\u90e8\u7684\u7aef\u53e3\u6620\u5c04\u5173\u7cfb\u4e3a 8080:80 ,\u5219\u5bbf\u4e3b\u4e3b\u673a\u5e94\u8be5\u5f00\u542f 8080 \u7aef\u53e3\u8bbf\u95ee\u89c4\u5219\uff0c\u5916\u7f51\u624d\u53ef\u4ee5\u8bbf\u95ee\u5bb9\u5668\u5185\u90e8\u7684web\u670d\u52a1. \u603b\u7ed3 \u00b6 \u4ee5\u4e0a\u6838\u5fc3\u547d\u4ee4\u603b\u7ed3\u5982\u4e0b ip link set dev docker0 down brctl delbr docker0 service docker stop brctl addbr bridge0 ip addr add 172.16.100.1/24 dev bridge0 ip link set dev bridge0 up ifconfig bridge0 vim /etc/docker/daemon.json \"bridge\":\"bridge0\" service docker start docker network inspect bridge docker run -it --rm --name testnet nicolaka/netshoot brctl show docker network inspect bridge \u672c\u6587\u5206\u4eab\u5185\u5bb9\u9002\u5408\u5f00\u53d1\u5de5\u7a0b\u5e08\u901a\u8fc7VMware\u6765\u8fdb\u884cDocker\u5bb9\u5668\u5316\u96c6\u6210\u6216\u6d4b\u8bd5\u73af\u5883\u90e8\u7f72\uff0c\u6240\u9047\u5230\u7684\u95ee\u9898\u4e5f\u662f\u672c\u4eba\u53cd\u590d\u67e5\u8d44\u6599\u548c\u4e0d\u65ad\u6298\u817e\u603b\u7ed3\u800c\u6765\u3002\u4e13\u4e1a\u7684\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3 \u5728VMware CentOS7\u4e2d\u539f\u6709\u9ed8\u8ba4\u7f51\u6865docker0\u4e0dwork\u7684\u60c5\u51b5 \uff0c\u671f\u5f85\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4ee5\u4e0b\u662f\u53c2\u8003\u5f15\u7528\u5730\u5740\uff1a docker\u5b98\u65b9\u7f51\u7edc\u914d\u7f6e\u8bf4\u660e Networking overview , Use bridge networks \u21a9 \u5f00\u6e90Docker and Kubernetes network t\u7edc\u8c03\u8bd5\u8bca\u65ad\u5de5\u5177 nicolaka/netshoot \u21a9 Docker\u7f51\u6865\u6a21\u5f0fping\u4e0d\u901a\u5bbf\u4e3b\u673a \u5730\u5740 \u21a9","title":"CentOS7 \u5bb9\u5668\u73af\u5883\u5220\u9664\u9ed8\u8ba4\u7f51\u6865Docker0\uff0c\u91c7\u7528\u81ea\u5b9a\u4e49\u7f51\u6865\u8fdb\u884c\u901a\u8baf"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#centos7-docker0","text":"\u4f5c\u8005 lyc 2020 \u5e74 07\u6708 03\u65e5","title":"CentOS7 \u5bb9\u5668\u73af\u5883\u5220\u9664\u9ed8\u8ba4\u7f51\u6865Docker0\uff0c\u91c7\u7528\u81ea\u5b9a\u4e49\u7f51\u6865\u8fdb\u884c\u901a\u8baf"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#_1","text":"Docker\u5728\u542f\u52a8\u5bb9\u5668\u955c\u50cf\u5b9e\u4f8b\u4e4b\u540e\uff0c\u9ed8\u8ba4\u662f\u91c7\u7528\u7f51\u6865\u7684\u6a21\u5f0f\u4e0e\u5916\u754c\u8fdb\u884c\u901a\u8baf\uff0c\u8be6\u7ec6\u53c2\u8003\u5b98\u7f51\u8bf4\u660e 1","title":"\u524d\u8a00"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#_2","text":"1.Docker\u5bb9\u5668\u5b89\u88c5\u5230VMware \u865a\u62df\u673a\u7684CentOS7\u4e4b\u540e,\u542f\u52a8\u7684\u5bb9\u5668\u5b9e\u4f8b\u65e0\u6cd5\u8bbf\u95ee\u5bbf\u4e3b\u4e3b\u673aIP\uff0c\u66f4\u65e0\u6cd5\u8bbf\u95ee\u5916\u7f51\uff0c\u5bbf\u4e3b\u4e3b\u673a\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u5bb9\u5668IP\u3002\u901a\u8fc7\u5821\u5792\u673a\u8bbf\u95eeDocker\u4e5f\u6709\u53ef\u80fd\u51fa\u73b0\u7c7b\u4f3c\u95ee\u9898\u3002(CentOS7\u7269\u7406\u4e3b\u673a\u53ca\u4e91\u4e3b\u673a\u6682\u65f6\u6ca1\u6709\u53d1\u73b0\u6b64\u95ee\u9898) 2.\u4e1a\u52a1\u573a\u666f\u9700\u8981\u91c7\u7528\u81ea\u5b9a\u4e49\u7f51\u6865\u8fdb\u884c\u5bb9\u5668\u7f51\u7edc\u7ba1\u7406","title":"\u9002\u7528\u573a\u666f."},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#_3","text":"","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#1docker0","text":"\u67e5\u770b\u7cfb\u7edf\u7f51\u6865(Linux\u7f51\u6865\u76f8\u5173\u64cd\u4f5c\u9700\u8981\u7528\u5230\u5de5\u5177bridge-utils) brctl show \u63d0\u793a \u5982\u679c\u63d0\u793abrctl\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u5b89\u88c5\u6b64\u5de5\u5177: yum install bridge-utils ,\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7 brctl show \u67e5\u770b\u5230\u9ed8\u8ba4\u7f51\u6865docker0 \u7136\u540e\u901a\u8fc7 ip link set dev \u547d\u4ee4\u5148\u5173\u95eddocker0,\u518d\u901a\u8fc7 brctl delbr \u547d\u4ee4\u8fdb\u884c\u5220\u9664\u5373\u53ef ip link set dev docker0 down brctl delbr docker0","title":"1.\u5148\u5220\u9664\u9ed8\u8ba4\u7f51\u6865docker0"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#2bridge0","text":"\u5148\u505c\u6b62\u5bb9\u5668 service docker stop \u518d\u6dfb\u52a0\u7f51\u6865bridge0\u5e76\u8bbe\u7f6eIP\u5730\u5740\u6bb5 brctl addbr bridge0 ip addr add 172 .16.100.1/24 dev bridge0 \u542f\u52a8\u7f51\u6865\uff0c\u67e5\u770b\u81ea\u5b9a\u4e49\u7f51\u6865\u4fe1\u606f ip link set dev bridge0 up ifconfig bridge0","title":"2.\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7f51\u6865bridge0"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#3docker","text":"\u63d0\u793a docker\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e3a/etc/docker/daemon.json,\u5982\u679c\u6ca1\u6709\u6b64\u6587\u4ef6,\u5219\u9700\u8981\u521b\u5efa\u5b83vim /etc/docker/daemon.json \u6dfb\u52a0\u914d\u7f6e\u9879 \"bridge\":\"bridge0\" \u914d\u7f6e\u7ed3\u679c\u5982\u4e0b(\u672c\u673a\u4e4b\u524d\u914d\u7f6e\u8fc7\u52a0\u901f\u955c\u50cf\u548c\u79c1\u6709\u4ed3\u5e93\u5730\u5740) \u67e5\u770b\u6700\u65b0\u7f51\u6865\u540d\u79f0\uff0c\u518d\u6ca1\u6709\u542f\u52a8\u5bb9\u5668\u4e4b\u524dbridge id \u4e3a 8000.00000000000 brctl show","title":"3.\u4fee\u6539Docker\u5b88\u62a4\u8fdb\u7a0b\u914d\u7f6e"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#4ip","text":"\u91cd\u65b0\u542f\u52a8docker\u670d\u52a1 service docker start \u67e5\u770bdocker bridge\u7f51\u7edc\u8be6\u60c5 docker network inspect bridge \u68c0\u67e5\u7f51\u6865\u914d\u7f6e\u662f\u5426\u4e3a\u540d\u79f0 bridge.name:\"bridge0\" \u7f51\u7edc\u6bb5 subnet\uff1a172.16.100.0/24 \u7f51\u5173 Gateawy:172.16.100.1","title":"4.\u68c0\u67e5\u7f51\u6865IP\u7f51\u5173"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#5","text":"\u542f\u52a8\u4e00\u4e2a\u955c\u50cf\u8fdb\u884c\u5bb9\u5668\u7f51\u7edc\u8c03\u8bd5\uff0c\u8fd9\u91cc\u4f7f\u7528netshoot 2 \u955c\u50cf docker run -it --rm --name testnet nicolaka/netshoot \u8fd0\u884c\u5bb9\u5668\u4e4b\u540e\uff0c\u53ef\u76f4\u63a5\u8fdb\u884c\u5bf9\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\u5f0f\u547d\u4ee4\u64cd\u4f5c\uff0c\u9996\u5148\u83b7\u53d6\u7684ip\u5730\u5740\u4fe1\u606f ifconfig \u63a5\u4e0b\u6765\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c \u4e09\u8fdeping ,\u9a8c\u8bc1\u7f51\u7edc\u662f\u5426\u6b63\u5e38\u901a\u8baf \u4e00ping \u7f51\u6865\u7f51\u5173 ping 172.16.100.1 \u4e8cping \u5bbf\u4e3b\u4e3b\u673aIP\u6216\u7f51\u5173 ping 192.168.10.20 (\u5728VMware\u4e2d\u7684CentOS\u4e0e\u771f\u5b9e\u673a\u662fNAT\u8054\u7f51\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5ping\u672c\u7269\u7406\u673a\u7684ip\u6216\u7f51\u5173) \u4e09ping \u5916\u7f51\u5730\u5740 www.baidu.com \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff0c\u5bb9\u5668\u5185\u7f51\u548c\u5916\u7f51\u5168\u90e8\u901a\u8baf\u6b63\u5e38 \u9000\u51fa\u5bb9\u5668(\u8f93\u5165 exit ),\u6700\u540e\u5728\u5bbf\u4e3b\u4e3b\u673aCentOS7\u4e2d\u6d4b\u8bd5\u662f\u5426\u53ef\u4ee5\u4e0e\u5bb9\u5668\u5b9e\u4f8b\u901a\u8baf ping 172.16.100.1 \u7f51\u6865\u7f51\u5173 ping172.16.100.2 \u5bb9\u5668\u5b9e\u4f8bIP \u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770bbridge0\u7684id\uff0c\u67e5\u770b\u521a\u521a\u542f\u52a8\u7684\u5bb9\u5668\u5b9e\u4f8b\u662f\u5426\u5173\u8054\u7f51\u6865 brctl show \u6ce8\u610f \u5982\u4e0b\u56fe\u6240\u793abridge id 8000.ae723e9584f0 , \u5982\u679cbridge id \u4ecd\u7136\u662f8000.00000\uff0c\u5219\u8981\u4e48\u6ca1\u6709\u542f\u52a8\u5bb9\u5668\u5b9e\u4f8b\uff0c\u8981\u4e48\u4e0a\u9762\u7684\u6b65\u9aa4\u6709\u8bef\u3002 \u67e5\u770b\u5bb9\u5668IP\u7684\u65b9\u6cd5\uff0c\u9664\u4e86\u8fdb\u5165\u5bb9\u5668\u5185\u90e8\u6267\u884c ifconfig \u67e5\u770b ip \u4ee5\u5916(\u6ce8\u610f\uff1a\u6709\u4e9b\u5bb9\u5668\u955c\u50cf\u662f\u6ca1\u6709\u96c6\u6210\u7f51\u7edc\u547d\u4ee4\u7684)\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6211\u4eec\u901a\u8fc7 docker network inspect \u5b50\u547d\u4ee4\u67e5\u770b\u4e0e\u7f51\u6865\u5173\u8054\u7684\u6240\u6709\u5bb9\u5668\u5b9e\u4f8bip\u6216 docker inspect [\u5bb9\u5668id/name] \u67e5\u770b\u67d0\u4e2a\u5bb9\u5668\u5b9e\u4f8b\u7684ip docker network inspect bridge","title":"5.\u6d4b\u8bd5\u8054\u8c03\u5bb9\u5668\u7f51\u7edc\u662f\u5426\u6b63\u5e38"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#6","text":"\u8c03\u6574\u9632\u706b\u5899\u8bbf\u95ee\u89c4\u5219\u6216\u5173\u95ed\u9632\u706b\u5899 \u5982\u679c\u5bbf\u4e3b\u4e3b\u673a\u5f00\u542f\u4e86\u9632\u706b\u5899,\u5916\u7f51\u53ef\u80fd\u65e0\u6cd5\u8bbf\u95ee\u5bb9\u5668\u6240\u66b4\u9732\u7684\u7aef\u53e3\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u5f00\u542f\u9632\u706b\u5899\u76f8\u5173\u7aef\u53e3\u5373\u53ef,\u6bd4\u5982\u5bb9\u5668\u662f\u4e00\u4e2aweb\u670d\u52a1\u5b9e\u4f8b\uff0c\u5916\u90e8\u4e0e\u5185\u90e8\u7684\u7aef\u53e3\u6620\u5c04\u5173\u7cfb\u4e3a 8080:80 ,\u5219\u5bbf\u4e3b\u4e3b\u673a\u5e94\u8be5\u5f00\u542f 8080 \u7aef\u53e3\u8bbf\u95ee\u89c4\u5219\uff0c\u5916\u7f51\u624d\u53ef\u4ee5\u8bbf\u95ee\u5bb9\u5668\u5185\u90e8\u7684web\u670d\u52a1.","title":"6.\u5916\u7f51\u4e0d\u80fd\u8bbf\u95ee\u5bb9\u5668\u5185\u7f51\u7684\u60c5\u51b5"},{"location":"2.Docker/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/CentOS7%20%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E7%BD%91%E6%A1%A5Docker0%EF%BC%8C%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E6%A1%A5%E8%BF%9B%E8%A1%8C%E9%80%9A%E8%AE%AF.html#_4","text":"\u4ee5\u4e0a\u6838\u5fc3\u547d\u4ee4\u603b\u7ed3\u5982\u4e0b ip link set dev docker0 down brctl delbr docker0 service docker stop brctl addbr bridge0 ip addr add 172.16.100.1/24 dev bridge0 ip link set dev bridge0 up ifconfig bridge0 vim /etc/docker/daemon.json \"bridge\":\"bridge0\" service docker start docker network inspect bridge docker run -it --rm --name testnet nicolaka/netshoot brctl show docker network inspect bridge \u672c\u6587\u5206\u4eab\u5185\u5bb9\u9002\u5408\u5f00\u53d1\u5de5\u7a0b\u5e08\u901a\u8fc7VMware\u6765\u8fdb\u884cDocker\u5bb9\u5668\u5316\u96c6\u6210\u6216\u6d4b\u8bd5\u73af\u5883\u90e8\u7f72\uff0c\u6240\u9047\u5230\u7684\u95ee\u9898\u4e5f\u662f\u672c\u4eba\u53cd\u590d\u67e5\u8d44\u6599\u548c\u4e0d\u65ad\u6298\u817e\u603b\u7ed3\u800c\u6765\u3002\u4e13\u4e1a\u7684\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3 \u5728VMware CentOS7\u4e2d\u539f\u6709\u9ed8\u8ba4\u7f51\u6865docker0\u4e0dwork\u7684\u60c5\u51b5 \uff0c\u671f\u5f85\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4ee5\u4e0b\u662f\u53c2\u8003\u5f15\u7528\u5730\u5740\uff1a docker\u5b98\u65b9\u7f51\u7edc\u914d\u7f6e\u8bf4\u660e Networking overview , Use bridge networks \u21a9 \u5f00\u6e90Docker and Kubernetes network t\u7edc\u8c03\u8bd5\u8bca\u65ad\u5de5\u5177 nicolaka/netshoot \u21a9 Docker\u7f51\u6865\u6a21\u5f0fping\u4e0d\u901a\u5bbf\u4e3b\u673a \u5730\u5740 \u21a9","title":"\u603b\u7ed3"},{"location":"2.SpringBoot/index.html","text":"Spring\u76ee\u5f55 \u00b6 \u5b98\u65b9\u8d44\u6e90 \u00b6 spring\u5b98\u7f51 spring-boot\u6e90\u7801 quickstart \u521d\u59cb\u5316springboot\u9879\u76ee Guides Spring Boot Reference Documentation Spring Boot Docs","title":"Spring\u76ee\u5f55"},{"location":"2.SpringBoot/index.html#spring","text":"","title":"Spring\u76ee\u5f55"},{"location":"2.SpringBoot/index.html#_1","text":"spring\u5b98\u7f51 spring-boot\u6e90\u7801 quickstart \u521d\u59cb\u5316springboot\u9879\u76ee Guides Spring Boot Reference Documentation Spring Boot Docs","title":"\u5b98\u65b9\u8d44\u6e90"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html","text":"Accessing Data with JPA \u00b6 Accessing Data with JPA This guide walks you through the process of building an application that uses Spring Data JPA to store and retrieve data in a relational database. What You Will build \u00b6 You will build an application that stores Customer POJOs (Plain Old Java Objects) in a memory-based database. What You need \u00b6 About 15 minutes A favorite text editor or IDE JDK 1.8 or later Gradle 4+ or Maven 3.2+ You can also import the code straight into your IDE: Spring Tool Suite (STS) IntelliJ IDEA How to complete this guide \u00b6 Like most Spring Getting Started guides , you can start from scratch and complete each step or you can bypass basic setup steps that are already familiar to you. Either way, you end up with working code. To start from scratch , move on to Starting with Spring Initializr . To skip the basics , do the following: Download and unzip the source repository for this guide, or clone it using Git : git clone https://github.com/spring-guides/gs-accessing-data-jpa.git cd into gs-accessing-data-jpa/initial Jump ahead to Define a Simple Entity . When you finish , you can check your results against the code in gs-accessing-data-jpa/complete . Starting with Spring Initializr \u00b6 For all Spring applications, you should start with the Spring Initializr . The Initializr offers a fast way to pull in all the dependencies you need for an application and does a lot of the set up for you. This example needs the JPA and H2 dependencies. The following listing shows the pom.xml file created when you choose Maven: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.2.RELEASE </version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId> com.example </groupId> <artifactId> accessing-data-jpa </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> accessing-data-jpa </name> <description> Demo project for Spring Boot </description> <properties> <java.version> 1.8 </java.version> </properties> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-jpa </artifactId> </dependency> <dependency> <groupId> com.h2database </groupId> <artifactId> h2 </artifactId> <scope> runtime </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> <exclusions> <exclusion> <groupId> org.junit.vintage </groupId> <artifactId> junit-vintage-engine </artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> </project> The following listing shows the build.gradle file created when you choose Gradle: plugins { id ' org.springframework.boot ' version ' 2 .3.2.RELEASE ' id ' io.spring.dependency-management ' version ' 1 .0.8.RELEASE ' id ' java ' } group = ' com.example ' version = ' 0 .0.1-SNAPSHOT ' sourceCompatibility = ' 1 .8 ' rep ositories { mavenCentral () } dependencies { implementation ' org.springframework.boot : spring-boot-starter-data-jpa ' runtimeOnly ' com.h2database : h2 ' testImplementation ( ' org.springframework.boot : spring-boot-starter-test ' ) { exclude group : ' org.junit.vintage ' , module : ' junit-vintage-engine ' } } test { useJUnitPlatform () } Define a Simple Entity \u00b6 In this example, you store Customer objects, each annotated as a JPA entity. The following listing shows the Customer class (in src/main/java/com/example/accessingdatajpa/Customer.java ): package com.example.accessingdatajpa ; import javax.persistence.Entity ; import javax.persistence.GeneratedValue ; import javax.persistence.GenerationType ; import javax.persistence.Id ; @Entity public class Customer { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Long id ; private String firstName ; private String lastName ; protected Customer () {} public Customer ( String firstName , String lastName ) { this . firstName = firstName ; this . lastName = lastName ; } @Override public String toString () { return String . format ( \"Customer[id=%d, firstName='%s', lastName='%s']\" , id , firstName , lastName ); } public Long getId () { return id ; } public String getFirstName () { return firstName ; } public String getLastName () { return lastName ; } } COPY Here you have a Customer class with three attributes: id , firstName , and lastName . You also have two constructors. The default constructor exists only for the sake of JPA. You do not use it directly, so it is designated as protected . The other constructor is the one you use to create instances of Customer to be saved to the database. The Customer class is annotated with @Entity , indicating that it is a JPA entity. (Because no @Table annotation exists, it is assumed that this entity is mapped to a table named Customer .) The Customer object\u2019s id property is annotated with @Id so that JPA recognizes it as the object\u2019s ID. The id property is also annotated with @GeneratedValue to indicate that the ID should be generated automatically. The other two properties, firstName and lastName , are left unannotated. It is assumed that they are mapped to columns that share the same names as the properties themselves. The convenient toString() method print outs the customer\u2019s properties. Create Simple Queries \u00b6 Spring Data JPA focuses on using JPA to store data in a relational database. Its most compelling feature is the ability to create repository implementations automatically, at runtime, from a repository interface. To see how this works, create a repository interface that works with Customer entities as the following listing (in src/main/java/com/example/accessingdatajpa/CustomerRepository.java ) shows: package com.example.accessingdatajpa ; import java.util.List ; import org.springframework.data.repository.CrudRepository ; public interface CustomerRepository extends CrudRepository < Customer , Long > { List < Customer > findByLastName ( String lastName ); Customer findById ( long id ); } COPY CustomerRepository extends the CrudRepository interface. The type of entity and ID that it works with, Customer and Long , are specified in the generic parameters on CrudRepository . By extending CrudRepository , CustomerRepository inherits several methods for working with Customer persistence, including methods for saving, deleting, and finding Customer entities. Spring Data JPA also lets you define other query methods by declaring their method signature. For example, CustomerRepository includes the findByLastName() method. In a typical Java application, you might expect to write a class that implements CustomerRepository . However, that is what makes Spring Data JPA so powerful: You need not write an implementation of the repository interface. Spring Data JPA creates an implementation when you run the application. Now you can wire up this example and see what it looks like! Create an Application Class \u00b6 Spring Initializr creates a simple class for the application. The following listing shows the class that Initializr created for this example (in src/main/java/com/example/accessingdatajpa/AccessingDataJpaApplication.java ): package com.example.accessingdatajpa ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class AccessingDataJpaApplication { public static void main ( String [] args ) { SpringApplication . run ( AccessingDataJpaApplication . class , args ); } } COPY @SpringBootApplication is a convenience annotation that adds all of the following: @Configuration : Tags the class as a source of bean definitions for the application context. @EnableAutoConfiguration : Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet . @ComponentScan : Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers. The main() method uses Spring Boot\u2019s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure. Now you need to modify the simple class that the Initializr created for you. To get output (to the console, in this example), you need to set up a logger. Then you need to set up some data and use it to generate output. The following listing shows the finished AccessingDataJpaApplication class (in src/main/java/com/example/accessingdatajpa/AccessingDataJpaApplication.java ): package com.example.accessingdatajpa ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.boot.CommandLineRunner ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.Bean ; @SpringBootApplication public class AccessingDataJpaApplication { private static final Logger log = LoggerFactory . getLogger ( AccessingDataJpaApplication . class ); public static void main ( String [] args ) { SpringApplication . run ( AccessingDataJpaApplication . class ); } @Bean public CommandLineRunner demo ( CustomerRepository repository ) { return ( args ) -> { // save a few customers repository . save ( new Customer ( \"Jack\" , \"Bauer\" )); repository . save ( new Customer ( \"Chloe\" , \"O'Brian\" )); repository . save ( new Customer ( \"Kim\" , \"Bauer\" )); repository . save ( new Customer ( \"David\" , \"Palmer\" )); repository . save ( new Customer ( \"Michelle\" , \"Dessler\" )); // fetch all customers log . info ( \"Customers found with findAll():\" ); log . info ( \"-------------------------------\" ); for ( Customer customer : repository . findAll ()) { log . info ( customer . toString ()); } log . info ( \"\" ); // fetch an individual customer by ID Customer customer = repository . findById ( 1L ); log . info ( \"Customer found with findById(1L):\" ); log . info ( \"--------------------------------\" ); log . info ( customer . toString ()); log . info ( \"\" ); // fetch customers by last name log . info ( \"Customer found with findByLastName('Bauer'):\" ); log . info ( \"--------------------------------------------\" ); repository . findByLastName ( \"Bauer\" ). forEach ( bauer -> { log . info ( bauer . toString ()); }); // for (Customer bauer : repository.findByLastName(\"Bauer\")) { // log.info(bauer.toString()); // } log . info ( \"\" ); }; } } COPY The AccessingDataJpaApplication class includes a demo() method that puts the CustomerRepository through a few tests. First, it fetches the CustomerRepository from the Spring application context. Then it saves a handful of Customer objects, demonstrating the save() method and setting up some data to work with. Next, it calls findAll() to fetch all Customer objects from the database. Then it calls findById() to fetch a single Customer by its ID. Finally, it calls findByLastName() to find all customers whose last name is \"Bauer\". The demo() method returns a CommandLineRunner bean that automatically runs the code when the application launches. By default, Spring Boot enables JPA repository support and looks in the package (and its subpackages) where @SpringBootApplication is located. If your configuration has JPA repository interface definitions located in a package that is not visible, you can point out alternate packages by using @EnableJpaRepositories and its type-safe basePackageClasses=MyRepository.class parameter. Build an executable JAR \u00b6 You can run the application from the command line with Gradle or Maven. You can also build a single executable JAR file that contains all the necessary dependencies, classes, and resources and run that. Building an executable jar makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth. If you use Gradle, you can run the application by using ./gradlew bootRun . Alternatively, you can build the JAR file by using ./gradlew build and then run the JAR file, as follows: java -jar build/libs/gs-accessing-data-jpa-0.1.0.jar If you use Maven, you can run the application by using ./mvnw spring-boot:run . Alternatively, you can build the JAR file with ./mvnw clean package and then run the JAR file, as follows: java -jar target/gs-accessing-data-jpa-0.1.0.jar The steps described here create a runnable JAR. You can also build a classic WAR file . When you run your application, you should see output similar to the following: == Customers found with findAll(): Customer[id=1, firstName='Jack', lastName='Bauer'] Customer[id=2, firstName='Chloe', lastName='O'Brian'] Customer[id=3, firstName='Kim', lastName='Bauer'] Customer[id=4, firstName='David', lastName='Palmer'] Customer[id=5, firstName='Michelle', lastName='Dessler'] == Customer found with findById(1L): Customer[id=1, firstName='Jack', lastName='Bauer'] == Customer found with findByLastName('Bauer'): Customer[id=1, firstName='Jack', lastName='Bauer'] Customer[id=3, firstName='Kim', lastName='Bauer'] Summary \u00b6 Congratulations! You have written a simple application that uses Spring Data JPA to save objects to and fetch them from a database, all without writing a concrete repository implementation. If you want to expose JPA repositories with a hypermedia-based RESTful front end with little effort, you might want to read Accessing JPA Data with REST . See Also \u00b6 The following guides may also be helpful: Accessing JPA Data with REST Accessing Data with Gemfire Accessing Data with MongoDB Accessing data with MySQL Accessing Data with Neo4j Want to write a new guide or contribute to an existing one? Check out our contribution guidelines . All guides are released with an ASLv2 license for the code, and an Attribution, NoDerivatives creative commons license for the writing.","title":"Accessing Data with JPA"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#accessing-data-with-jpa","text":"Accessing Data with JPA This guide walks you through the process of building an application that uses Spring Data JPA to store and retrieve data in a relational database.","title":"Accessing Data with JPA"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#what-you-will-build","text":"You will build an application that stores Customer POJOs (Plain Old Java Objects) in a memory-based database.","title":"What You Will build"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#what-you-need","text":"About 15 minutes A favorite text editor or IDE JDK 1.8 or later Gradle 4+ or Maven 3.2+ You can also import the code straight into your IDE: Spring Tool Suite (STS) IntelliJ IDEA","title":"What You need"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#how-to-complete-this-guide","text":"Like most Spring Getting Started guides , you can start from scratch and complete each step or you can bypass basic setup steps that are already familiar to you. Either way, you end up with working code. To start from scratch , move on to Starting with Spring Initializr . To skip the basics , do the following: Download and unzip the source repository for this guide, or clone it using Git : git clone https://github.com/spring-guides/gs-accessing-data-jpa.git cd into gs-accessing-data-jpa/initial Jump ahead to Define a Simple Entity . When you finish , you can check your results against the code in gs-accessing-data-jpa/complete .","title":"How to complete this guide"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#starting-with-spring-initializr","text":"For all Spring applications, you should start with the Spring Initializr . The Initializr offers a fast way to pull in all the dependencies you need for an application and does a lot of the set up for you. This example needs the JPA and H2 dependencies. The following listing shows the pom.xml file created when you choose Maven: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.2.RELEASE </version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId> com.example </groupId> <artifactId> accessing-data-jpa </artifactId> <version> 0.0.1-SNAPSHOT </version> <name> accessing-data-jpa </name> <description> Demo project for Spring Boot </description> <properties> <java.version> 1.8 </java.version> </properties> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-jpa </artifactId> </dependency> <dependency> <groupId> com.h2database </groupId> <artifactId> h2 </artifactId> <scope> runtime </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> <exclusions> <exclusion> <groupId> org.junit.vintage </groupId> <artifactId> junit-vintage-engine </artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> </project> The following listing shows the build.gradle file created when you choose Gradle: plugins { id ' org.springframework.boot ' version ' 2 .3.2.RELEASE ' id ' io.spring.dependency-management ' version ' 1 .0.8.RELEASE ' id ' java ' } group = ' com.example ' version = ' 0 .0.1-SNAPSHOT ' sourceCompatibility = ' 1 .8 ' rep ositories { mavenCentral () } dependencies { implementation ' org.springframework.boot : spring-boot-starter-data-jpa ' runtimeOnly ' com.h2database : h2 ' testImplementation ( ' org.springframework.boot : spring-boot-starter-test ' ) { exclude group : ' org.junit.vintage ' , module : ' junit-vintage-engine ' } } test { useJUnitPlatform () }","title":"Starting with Spring Initializr"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#define-a-simple-entity","text":"In this example, you store Customer objects, each annotated as a JPA entity. The following listing shows the Customer class (in src/main/java/com/example/accessingdatajpa/Customer.java ): package com.example.accessingdatajpa ; import javax.persistence.Entity ; import javax.persistence.GeneratedValue ; import javax.persistence.GenerationType ; import javax.persistence.Id ; @Entity public class Customer { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Long id ; private String firstName ; private String lastName ; protected Customer () {} public Customer ( String firstName , String lastName ) { this . firstName = firstName ; this . lastName = lastName ; } @Override public String toString () { return String . format ( \"Customer[id=%d, firstName='%s', lastName='%s']\" , id , firstName , lastName ); } public Long getId () { return id ; } public String getFirstName () { return firstName ; } public String getLastName () { return lastName ; } } COPY Here you have a Customer class with three attributes: id , firstName , and lastName . You also have two constructors. The default constructor exists only for the sake of JPA. You do not use it directly, so it is designated as protected . The other constructor is the one you use to create instances of Customer to be saved to the database. The Customer class is annotated with @Entity , indicating that it is a JPA entity. (Because no @Table annotation exists, it is assumed that this entity is mapped to a table named Customer .) The Customer object\u2019s id property is annotated with @Id so that JPA recognizes it as the object\u2019s ID. The id property is also annotated with @GeneratedValue to indicate that the ID should be generated automatically. The other two properties, firstName and lastName , are left unannotated. It is assumed that they are mapped to columns that share the same names as the properties themselves. The convenient toString() method print outs the customer\u2019s properties.","title":"Define a Simple Entity"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#create-simple-queries","text":"Spring Data JPA focuses on using JPA to store data in a relational database. Its most compelling feature is the ability to create repository implementations automatically, at runtime, from a repository interface. To see how this works, create a repository interface that works with Customer entities as the following listing (in src/main/java/com/example/accessingdatajpa/CustomerRepository.java ) shows: package com.example.accessingdatajpa ; import java.util.List ; import org.springframework.data.repository.CrudRepository ; public interface CustomerRepository extends CrudRepository < Customer , Long > { List < Customer > findByLastName ( String lastName ); Customer findById ( long id ); } COPY CustomerRepository extends the CrudRepository interface. The type of entity and ID that it works with, Customer and Long , are specified in the generic parameters on CrudRepository . By extending CrudRepository , CustomerRepository inherits several methods for working with Customer persistence, including methods for saving, deleting, and finding Customer entities. Spring Data JPA also lets you define other query methods by declaring their method signature. For example, CustomerRepository includes the findByLastName() method. In a typical Java application, you might expect to write a class that implements CustomerRepository . However, that is what makes Spring Data JPA so powerful: You need not write an implementation of the repository interface. Spring Data JPA creates an implementation when you run the application. Now you can wire up this example and see what it looks like!","title":"Create Simple Queries"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#create-an-application-class","text":"Spring Initializr creates a simple class for the application. The following listing shows the class that Initializr created for this example (in src/main/java/com/example/accessingdatajpa/AccessingDataJpaApplication.java ): package com.example.accessingdatajpa ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class AccessingDataJpaApplication { public static void main ( String [] args ) { SpringApplication . run ( AccessingDataJpaApplication . class , args ); } } COPY @SpringBootApplication is a convenience annotation that adds all of the following: @Configuration : Tags the class as a source of bean definitions for the application context. @EnableAutoConfiguration : Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet . @ComponentScan : Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers. The main() method uses Spring Boot\u2019s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure. Now you need to modify the simple class that the Initializr created for you. To get output (to the console, in this example), you need to set up a logger. Then you need to set up some data and use it to generate output. The following listing shows the finished AccessingDataJpaApplication class (in src/main/java/com/example/accessingdatajpa/AccessingDataJpaApplication.java ): package com.example.accessingdatajpa ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.boot.CommandLineRunner ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.Bean ; @SpringBootApplication public class AccessingDataJpaApplication { private static final Logger log = LoggerFactory . getLogger ( AccessingDataJpaApplication . class ); public static void main ( String [] args ) { SpringApplication . run ( AccessingDataJpaApplication . class ); } @Bean public CommandLineRunner demo ( CustomerRepository repository ) { return ( args ) -> { // save a few customers repository . save ( new Customer ( \"Jack\" , \"Bauer\" )); repository . save ( new Customer ( \"Chloe\" , \"O'Brian\" )); repository . save ( new Customer ( \"Kim\" , \"Bauer\" )); repository . save ( new Customer ( \"David\" , \"Palmer\" )); repository . save ( new Customer ( \"Michelle\" , \"Dessler\" )); // fetch all customers log . info ( \"Customers found with findAll():\" ); log . info ( \"-------------------------------\" ); for ( Customer customer : repository . findAll ()) { log . info ( customer . toString ()); } log . info ( \"\" ); // fetch an individual customer by ID Customer customer = repository . findById ( 1L ); log . info ( \"Customer found with findById(1L):\" ); log . info ( \"--------------------------------\" ); log . info ( customer . toString ()); log . info ( \"\" ); // fetch customers by last name log . info ( \"Customer found with findByLastName('Bauer'):\" ); log . info ( \"--------------------------------------------\" ); repository . findByLastName ( \"Bauer\" ). forEach ( bauer -> { log . info ( bauer . toString ()); }); // for (Customer bauer : repository.findByLastName(\"Bauer\")) { // log.info(bauer.toString()); // } log . info ( \"\" ); }; } } COPY The AccessingDataJpaApplication class includes a demo() method that puts the CustomerRepository through a few tests. First, it fetches the CustomerRepository from the Spring application context. Then it saves a handful of Customer objects, demonstrating the save() method and setting up some data to work with. Next, it calls findAll() to fetch all Customer objects from the database. Then it calls findById() to fetch a single Customer by its ID. Finally, it calls findByLastName() to find all customers whose last name is \"Bauer\". The demo() method returns a CommandLineRunner bean that automatically runs the code when the application launches. By default, Spring Boot enables JPA repository support and looks in the package (and its subpackages) where @SpringBootApplication is located. If your configuration has JPA repository interface definitions located in a package that is not visible, you can point out alternate packages by using @EnableJpaRepositories and its type-safe basePackageClasses=MyRepository.class parameter.","title":"Create an Application Class"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#build-an-executable-jar","text":"You can run the application from the command line with Gradle or Maven. You can also build a single executable JAR file that contains all the necessary dependencies, classes, and resources and run that. Building an executable jar makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth. If you use Gradle, you can run the application by using ./gradlew bootRun . Alternatively, you can build the JAR file by using ./gradlew build and then run the JAR file, as follows: java -jar build/libs/gs-accessing-data-jpa-0.1.0.jar If you use Maven, you can run the application by using ./mvnw spring-boot:run . Alternatively, you can build the JAR file with ./mvnw clean package and then run the JAR file, as follows: java -jar target/gs-accessing-data-jpa-0.1.0.jar The steps described here create a runnable JAR. You can also build a classic WAR file . When you run your application, you should see output similar to the following: == Customers found with findAll(): Customer[id=1, firstName='Jack', lastName='Bauer'] Customer[id=2, firstName='Chloe', lastName='O'Brian'] Customer[id=3, firstName='Kim', lastName='Bauer'] Customer[id=4, firstName='David', lastName='Palmer'] Customer[id=5, firstName='Michelle', lastName='Dessler'] == Customer found with findById(1L): Customer[id=1, firstName='Jack', lastName='Bauer'] == Customer found with findByLastName('Bauer'): Customer[id=1, firstName='Jack', lastName='Bauer'] Customer[id=3, firstName='Kim', lastName='Bauer']","title":"Build an executable JAR"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#summary","text":"Congratulations! You have written a simple application that uses Spring Data JPA to save objects to and fetch them from a database, all without writing a concrete repository implementation. If you want to expose JPA repositories with a hypermedia-based RESTful front end with little effort, you might want to read Accessing JPA Data with REST .","title":"Summary"},{"location":"2.SpringBoot/Accessing%20Data%20with%20JPA.html#see-also","text":"The following guides may also be helpful: Accessing JPA Data with REST Accessing Data with Gemfire Accessing Data with MongoDB Accessing data with MySQL Accessing Data with Neo4j Want to write a new guide or contribute to an existing one? Check out our contribution guidelines . All guides are released with an ASLv2 license for the code, and an Attribution, NoDerivatives creative commons license for the writing.","title":"See Also"},{"location":"2.SpringBoot/QuickStart.html","text":"Spring Quickstart Guide \u00b6 What you'll build \u00b6 You will build a classic \u201cHello World!\u201d endpoint which any browser can connect to. You can even tell it your name, and it will respond in a more friendly way. What you\u2019ll need \u00b6 An Integrated Developer Environment (IDE) Popular choices include IntelliJ IDEA , Spring Tools , Visual Studio Code , or Eclipse , and many more. A Java\u2122 Development Kit (JDK) We recommend AdoptOpenJDK version 8 or version 11. Step 1: Start a new Spring Boot project \u00b6 Use start.spring.io to create a \u201cweb\u201d project. In the \u201cDependencies\u201d dialog search for and add the \u201cweb\u201d dependency as shown in the screenshot. Hit the \u201cGenerate\u201d button, download the zip, and unpack it into a folder on your computer. Projects created by start.spring.io contain Spring Boot , a framework that makes Spring ready to work inside your app, but without much code or configuration required. Spring Boot is the quickest and most popular way to start Spring projects. Step 2: Add your code \u00b6 Open up the project in your IDE and locate the DemoApplication.java file in the src/main/java/com/example/demo folder. Now change the contents of the file by adding the extra method and annotations shown in the code below. You can copy and paste the code or just type it. package com.example.demo ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @SpringBootApplication @RestController public class DemoApplication { public static void main ( String [] args ) { SpringApplication . run ( DemoApplication . class , args ); } @GetMapping ( \"/hello\" ) public String hello ( @RequestParam ( value = \"name\" , defaultValue = \"World\" ) String name ) { return String . format ( \"Hello %s!\" , name ); } } COPY This is all the code required to create a simple \u201cHello World\u201d web service in Spring Boot. The hello() method we\u2019ve added is designed to take a String parameter called name , and then combine this parameter with the word \"Hello\" in the code. This means that if you set your name to \u201cAmy\u201d in the request, the response would be \u201cHello Amy\u201d . The @RestController annotation tells Spring that this code describes an endpoint that should be made available over the web. The @GetMapping(\u201c/hello\u201d) tells Spring to use our hello() method to answer requests that get sent to the http://localhost:8080/hello address. Finally, the @RequestParam is telling Spring to expect a name value in the request, but if it\u2019s not there, it will use the word \u201cWorld\u201d by default. Step 3: Try it \u00b6 Let\u2019s build and run the program. Open a command line (or terminal) and navigate to the folder where you have the project files. We can build and run the application by issuing the following command: MacOS/Linux: ./mvnw spring-boot:run Windows: mvnw spring-boot:run You should see some output that looks very similar to this: IDEA: The last couple of lines here tell us that Spring has started. Spring Boot\u2019s embedded Apache Tomcat server is acting as a webserver and is listening for requests on localhost port 8080 . Open your browser and in the address bar at the top enter http://localhost:8080/hello . You should get a nice friendly response like this: Pop quiz \u00b6 What should happen if you add ?name=Amy to the end of the URL?","title":"Spring Quickstart Guide"},{"location":"2.SpringBoot/QuickStart.html#spring-quickstart-guide","text":"","title":"Spring Quickstart Guide"},{"location":"2.SpringBoot/QuickStart.html#what-youll-build","text":"You will build a classic \u201cHello World!\u201d endpoint which any browser can connect to. You can even tell it your name, and it will respond in a more friendly way.","title":"What you'll build"},{"location":"2.SpringBoot/QuickStart.html#what-youll-need","text":"An Integrated Developer Environment (IDE) Popular choices include IntelliJ IDEA , Spring Tools , Visual Studio Code , or Eclipse , and many more. A Java\u2122 Development Kit (JDK) We recommend AdoptOpenJDK version 8 or version 11.","title":"What you\u2019ll need"},{"location":"2.SpringBoot/QuickStart.html#step-1-start-a-new-spring-boot-project","text":"Use start.spring.io to create a \u201cweb\u201d project. In the \u201cDependencies\u201d dialog search for and add the \u201cweb\u201d dependency as shown in the screenshot. Hit the \u201cGenerate\u201d button, download the zip, and unpack it into a folder on your computer. Projects created by start.spring.io contain Spring Boot , a framework that makes Spring ready to work inside your app, but without much code or configuration required. Spring Boot is the quickest and most popular way to start Spring projects.","title":"Step 1: Start a new Spring Boot project"},{"location":"2.SpringBoot/QuickStart.html#step-2-add-your-code","text":"Open up the project in your IDE and locate the DemoApplication.java file in the src/main/java/com/example/demo folder. Now change the contents of the file by adding the extra method and annotations shown in the code below. You can copy and paste the code or just type it. package com.example.demo ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RequestParam ; import org.springframework.web.bind.annotation.RestController ; @SpringBootApplication @RestController public class DemoApplication { public static void main ( String [] args ) { SpringApplication . run ( DemoApplication . class , args ); } @GetMapping ( \"/hello\" ) public String hello ( @RequestParam ( value = \"name\" , defaultValue = \"World\" ) String name ) { return String . format ( \"Hello %s!\" , name ); } } COPY This is all the code required to create a simple \u201cHello World\u201d web service in Spring Boot. The hello() method we\u2019ve added is designed to take a String parameter called name , and then combine this parameter with the word \"Hello\" in the code. This means that if you set your name to \u201cAmy\u201d in the request, the response would be \u201cHello Amy\u201d . The @RestController annotation tells Spring that this code describes an endpoint that should be made available over the web. The @GetMapping(\u201c/hello\u201d) tells Spring to use our hello() method to answer requests that get sent to the http://localhost:8080/hello address. Finally, the @RequestParam is telling Spring to expect a name value in the request, but if it\u2019s not there, it will use the word \u201cWorld\u201d by default.","title":"Step 2: Add your code"},{"location":"2.SpringBoot/QuickStart.html#step-3-try-it","text":"Let\u2019s build and run the program. Open a command line (or terminal) and navigate to the folder where you have the project files. We can build and run the application by issuing the following command: MacOS/Linux: ./mvnw spring-boot:run Windows: mvnw spring-boot:run You should see some output that looks very similar to this: IDEA: The last couple of lines here tell us that Spring has started. Spring Boot\u2019s embedded Apache Tomcat server is acting as a webserver and is listening for requests on localhost port 8080 . Open your browser and in the address bar at the top enter http://localhost:8080/hello . You should get a nice friendly response like this:","title":"Step 3: Try it"},{"location":"2.SpringBoot/QuickStart.html#pop-quiz","text":"What should happen if you add ?name=Amy to the end of the URL?","title":"Pop quiz"},{"location":"3.K8S/home.html","text":"K8S\u4e3b\u9875","title":"Home"},{"location":"4.CI%26CD/Jenkins.html","text":"Jenkins \u00b6 \u76ee\u5f55 \u00b6 \u6587\u6863\u4e2d\u5fc3 \u5165\u95e8\u6307\u5357 \u5b89\u88c5Jenkins Build a Java app with Maven \u00b6 Red Hat / CentOS \u00b6 sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.8.0-openjdk-devel sudo systemctl daemon-reload Start Jenkins \u00b6 You can start the Jenkins service with the command: sudo systemctl start jenkins You can check the status of the Jenkins service using the command: sudo systemctl status jenkins If everything has been set up correctly, you should see an output like this: Loaded: loaded (/etc/rc.d/init.d/jenkins; generated) Active: active (running) since Tue 2018-11-13 16:19:01 +03; 4min 57s ago ... If you have a firewall installed, you must add Jenkins as an exception. You must change YOURPORT in the script below to the port you want to use. Port 8080 is the most common. YOURPORT=8080 PERM=\"--permanent\" SERV=\"$PERM --service=jenkins\" firewall-cmd $PERM --new-service=jenkins firewall-cmd $SERV --set-short=\"Jenkins ports\" firewall-cmd $SERV --set-description=\"Jenkins port exceptions\" firewall-cmd $SERV --add-port=$YOURPORT/tcp firewall-cmd $PERM --add-service=jenkins firewall-cmd --zone=public --add-service=http --permanent firewall-cmd --reload Downloading and running Jenkins in Docker \u00b6 Open up a terminal window. Create a bridge network in Docker using the following docker network create command: docker network create jenkins Create the following volumes to share the Docker client TLS certificates needed to connect to the Docker daemon and persist the Jenkins data using the following docker volume create commands: docker volume create jenkins-docker-certs docker volume create jenkins-data In order to execute Docker commands inside Jenkins nodes, download and run the docker:dind Docker image using the following docker container run command: docker container run --name jenkins-docker --restart always --detach --privileged --network jenkins --network-alias docker --env DOCKER_TLS_CERTDIR = /certs --volume jenkins-docker-certs:/certs/client --volume jenkins-data:/var/jenkins_home --volume \"%HOMEDRIVE%%HOMEPATH%\" :/home docker:dind Run the jenkinsci/blueocean image as a container in Docker using the following docker container run command (bearing in mind that this command automatically downloads the image if this hasn\u2019t been done): docker container run --name jenkins-blueocean --restart always --detach --network jenkins --env DOCKER_HOST = tcp://docker:2376 --env DOCKER_CERT_PATH = /certs/client --env DOCKER_TLS_VERIFY = 1 --publish 8880 :8080 --publish 50000 :50000 --volume jenkins-data:/var/jenkins_home --volume jenkins-docker-certs:/certs/client:ro jenkinsci/blueocean Unlocking Jenkins \u00b6 When you first access a new Jenkins instance, you are asked to unlock it using an automatically-generated password. After the 2 sets of asterisks appear in the terminal/command prompt window, browse to http://localhost:8080 and wait until the Unlock Jenkins page appears. Display the Jenkins console log with the command: docker logs jenkins-tutorial From your terminal/command prompt window again, copy the automatically-generated alphanumeric password (between the 2 sets of asterisks). On the Unlock Jenkins page, paste this password into the Administrator password field and click Continue . \u601d\u7ef4\u5bfc\u56fe \u00b6 \u53c2\u8003\u5f15\u7528","title":"Jenkins"},{"location":"4.CI%26CD/Jenkins.html#jenkins","text":"","title":"Jenkins"},{"location":"4.CI%26CD/Jenkins.html#_1","text":"\u6587\u6863\u4e2d\u5fc3 \u5165\u95e8\u6307\u5357 \u5b89\u88c5Jenkins","title":"\u76ee\u5f55"},{"location":"4.CI%26CD/Jenkins.html#build-a-java-app-with-maven","text":"","title":"Build a Java app with Maven"},{"location":"4.CI%26CD/Jenkins.html#red-hat-centos","text":"sudo wget -O /etc/yum.repos.d/jenkins.repo \\ https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key sudo yum upgrade sudo yum install jenkins java-1.8.0-openjdk-devel sudo systemctl daemon-reload","title":"Red Hat / CentOS"},{"location":"4.CI%26CD/Jenkins.html#start-jenkins","text":"You can start the Jenkins service with the command: sudo systemctl start jenkins You can check the status of the Jenkins service using the command: sudo systemctl status jenkins If everything has been set up correctly, you should see an output like this: Loaded: loaded (/etc/rc.d/init.d/jenkins; generated) Active: active (running) since Tue 2018-11-13 16:19:01 +03; 4min 57s ago ... If you have a firewall installed, you must add Jenkins as an exception. You must change YOURPORT in the script below to the port you want to use. Port 8080 is the most common. YOURPORT=8080 PERM=\"--permanent\" SERV=\"$PERM --service=jenkins\" firewall-cmd $PERM --new-service=jenkins firewall-cmd $SERV --set-short=\"Jenkins ports\" firewall-cmd $SERV --set-description=\"Jenkins port exceptions\" firewall-cmd $SERV --add-port=$YOURPORT/tcp firewall-cmd $PERM --add-service=jenkins firewall-cmd --zone=public --add-service=http --permanent firewall-cmd --reload","title":"Start Jenkins"},{"location":"4.CI%26CD/Jenkins.html#downloading-and-running-jenkins-in-docker","text":"Open up a terminal window. Create a bridge network in Docker using the following docker network create command: docker network create jenkins Create the following volumes to share the Docker client TLS certificates needed to connect to the Docker daemon and persist the Jenkins data using the following docker volume create commands: docker volume create jenkins-docker-certs docker volume create jenkins-data In order to execute Docker commands inside Jenkins nodes, download and run the docker:dind Docker image using the following docker container run command: docker container run --name jenkins-docker --restart always --detach --privileged --network jenkins --network-alias docker --env DOCKER_TLS_CERTDIR = /certs --volume jenkins-docker-certs:/certs/client --volume jenkins-data:/var/jenkins_home --volume \"%HOMEDRIVE%%HOMEPATH%\" :/home docker:dind Run the jenkinsci/blueocean image as a container in Docker using the following docker container run command (bearing in mind that this command automatically downloads the image if this hasn\u2019t been done): docker container run --name jenkins-blueocean --restart always --detach --network jenkins --env DOCKER_HOST = tcp://docker:2376 --env DOCKER_CERT_PATH = /certs/client --env DOCKER_TLS_VERIFY = 1 --publish 8880 :8080 --publish 50000 :50000 --volume jenkins-data:/var/jenkins_home --volume jenkins-docker-certs:/certs/client:ro jenkinsci/blueocean","title":"Downloading and running Jenkins in Docker"},{"location":"4.CI%26CD/Jenkins.html#unlocking-jenkins","text":"When you first access a new Jenkins instance, you are asked to unlock it using an automatically-generated password. After the 2 sets of asterisks appear in the terminal/command prompt window, browse to http://localhost:8080 and wait until the Unlock Jenkins page appears. Display the Jenkins console log with the command: docker logs jenkins-tutorial From your terminal/command prompt window again, copy the automatically-generated alphanumeric password (between the 2 sets of asterisks). On the Unlock Jenkins page, paste this password into the Administrator password field and click Continue .","title":"Unlocking Jenkins"},{"location":"4.CI%26CD/Jenkins.html#_2","text":"\u53c2\u8003\u5f15\u7528","title":"\u601d\u7ef4\u5bfc\u56fe"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html","text":"Markdown\u4ecb\u7ecd \u00b6 \u5927\u5bb6\u597d,\u6b22\u8fce\u6765\u5230Markdown\u7684\u4e16\u754c\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u4e00\u611f\u53d7Markdown \u5e26\u6765\u7684\u7eaf\u6587\u672c\u683c\u5f0f\u7f16\u5199\u6587\u6863\u7684\u9b45\u529b\u3002 MD\u4ecb\u7ecd \u00b6 Markdown(\u7b80\u79f0MD) \u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u6807\u8bb0\u8bed\u8a00\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u6807\u8bb0\u8bed\u6cd5\uff0c\u64b0\u5199\u5177\u6709\u53ef\u8bfb\u6027\u6587\u7ae0\u3001\u535a\u5ba2\u548c\u6280\u672f\u6587\u6863\uff0c\u8fd9\u79cd\u683c\u5f0f\u7684\u6587\u6863\u7f16\u5199\u65b9\u4fbf\uff0c\u8ba9\u4eba\u66f4\u52a0\u4e13\u6ce8\u5185\u5bb9\u7684\u540c\u65f6\uff0c\u4e5f\u80fd\u8f7b\u677e\u6392\u7248\u3002 Markdown \u8bed\u8a00\u5728 2004 \u7531\u7ea6\u7ff0\u00b7\u683c\u9c81\u4f2f\uff08\u82f1\u6587\u535a\u5ba2\uff1a[John Gruber][0]\uff09\u521b\u5efa\u3002 MD\u7279\u70b9 \u00b6 Markdown \u7f16\u5199\u7684\u6587\u6863\u540e\u7f00\u4e3a .md , .markdown \u3002 Markdown \u7f16\u5199\u7684\u6587\u6863\u53ef\u4ee5\u5bfc\u51fa HTML \u3001Word\u3001\u56fe\u50cf\u3001PDF\u3001Epub \u7b49\u591a\u79cd\u683c\u5f0f\u7684\u6587\u6863\u3002 Markdown\u7b80\u6d01\u7684\u8bed\u6cd5\uff0c\u8f7b\u677e\u7f16\u5199\u5e26\u683c\u5f0f\u7684\u6587\u5b57\uff0c\u5148\u611f\u53d7\u4e00\u4e0b\uff1a 1. \u659c\u4f53\u548c\u7c97\u4f53 \u00b6 \u4f7f\u7528 * \u548c ** \u8868\u793a\u659c\u4f53\u548c\u7c97\u4f53\u3002 \u793a\u4f8b\uff1a \u8fd9\u662f \u659c\u4f53 \uff0c\u8fd9\u662f \u7c97\u4f53 \u3002 2. \u5206\u7ea7\u6807\u9898 \u00b6 \u4f7f\u7528 === \u8868\u793a\u4e00\u7ea7\u6807\u9898\uff0c\u4f7f\u7528 --- \u8868\u793a\u4e8c\u7ea7\u6807\u9898\u3002 \u793a\u4f8b\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e00\u7ea7\u6807\u9898","title":"Markdown\u4ecb\u7ecd"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html#markdown","text":"\u5927\u5bb6\u597d,\u6b22\u8fce\u6765\u5230Markdown\u7684\u4e16\u754c\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u4e00\u611f\u53d7Markdown \u5e26\u6765\u7684\u7eaf\u6587\u672c\u683c\u5f0f\u7f16\u5199\u6587\u6863\u7684\u9b45\u529b\u3002","title":"Markdown\u4ecb\u7ecd"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html#md","text":"Markdown(\u7b80\u79f0MD) \u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u6807\u8bb0\u8bed\u8a00\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u6807\u8bb0\u8bed\u6cd5\uff0c\u64b0\u5199\u5177\u6709\u53ef\u8bfb\u6027\u6587\u7ae0\u3001\u535a\u5ba2\u548c\u6280\u672f\u6587\u6863\uff0c\u8fd9\u79cd\u683c\u5f0f\u7684\u6587\u6863\u7f16\u5199\u65b9\u4fbf\uff0c\u8ba9\u4eba\u66f4\u52a0\u4e13\u6ce8\u5185\u5bb9\u7684\u540c\u65f6\uff0c\u4e5f\u80fd\u8f7b\u677e\u6392\u7248\u3002 Markdown \u8bed\u8a00\u5728 2004 \u7531\u7ea6\u7ff0\u00b7\u683c\u9c81\u4f2f\uff08\u82f1\u6587\u535a\u5ba2\uff1a[John Gruber][0]\uff09\u521b\u5efa\u3002","title":"MD\u4ecb\u7ecd"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html#md_1","text":"Markdown \u7f16\u5199\u7684\u6587\u6863\u540e\u7f00\u4e3a .md , .markdown \u3002 Markdown \u7f16\u5199\u7684\u6587\u6863\u53ef\u4ee5\u5bfc\u51fa HTML \u3001Word\u3001\u56fe\u50cf\u3001PDF\u3001Epub \u7b49\u591a\u79cd\u683c\u5f0f\u7684\u6587\u6863\u3002 Markdown\u7b80\u6d01\u7684\u8bed\u6cd5\uff0c\u8f7b\u677e\u7f16\u5199\u5e26\u683c\u5f0f\u7684\u6587\u5b57\uff0c\u5148\u611f\u53d7\u4e00\u4e0b\uff1a","title":"MD\u7279\u70b9"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html#1","text":"\u4f7f\u7528 * \u548c ** \u8868\u793a\u659c\u4f53\u548c\u7c97\u4f53\u3002 \u793a\u4f8b\uff1a \u8fd9\u662f \u659c\u4f53 \uff0c\u8fd9\u662f \u7c97\u4f53 \u3002","title":"1. \u659c\u4f53\u548c\u7c97\u4f53"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/index.html#2","text":"\u4f7f\u7528 === \u8868\u793a\u4e00\u7ea7\u6807\u9898\uff0c\u4f7f\u7528 --- \u8868\u793a\u4e8c\u7ea7\u6807\u9898\u3002 \u793a\u4f8b\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e00\u7ea7\u6807\u9898","title":"2. \u5206\u7ea7\u6807\u9898"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html","text":"Markdown\u6559\u7a0b \u00b6 \u5de5\u5177\u51c6\u5907 \u00b6 \u9996\u5148\u51c6\u5907\u4e00\u6b3emarkdown\u7f16\u8f91\u5668\uff0c\u5728\u7f51\u4e0a\u641c\u7d22\u4e00\u4e0b\u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u641c\u7d22\u5230\u5f88\u591a\uff0c\u767e\u5ea6\u767e\u79d1\u5df2\u6709\u4eba\u5217\u51fa\u6e05\u5355 \uff1a \u5e38\u7528\u7684Markdown \u7f16\u8f91\u5668 VSCode (\u5f00\u53d1\u5fc5\u5907) HBuilderX Atom Byword Mou Typora (\u4e2a\u4eba\u63a8\u8350\u7528\u8fd9\u6b3e) MacDown RStudio Cmd Markdown \u5e38\u7528\u8bed\u6cd5 \u00b6 \u6700\u5e38\u89c1\u7684Markdown\u683c\u5f0f\u9009\u9879\u548c\u952e\u76d8\u5feb\u6377\u952e: \u4ee5\u4e0b\u662f\u6e90\u793a\u4f8b | \u8f93\u51fa\u540e\u7684\u6548\u679c | Markdown | \u5feb\u6377\u952e | | ------------ | ---------------- | ------------------ | | Bold | **text** | Ctrl/\u2318 + B | | *Emphasize* | *text* | Ctrl/\u2318 + I | | Link | [title](http://xx) | Ctrl/\u2318 + K | | Inline Code | `code js html` | Ctrl/\u2318 + Shift + K | | Image | ![alt](https://xxx.png)| Ctrl/\u2318 + Shift + I | | List | * item | Ctrl + L | | Blockquote | > quote | Ctrl + Q | | H1 | # Heading | | | H2 | ## Heading | Ctrl/\u2318 + H | | H3 | ### Heading | Ctrl/\u2318 + H (x2) | \u7ed3\u679c\u793a\u4f8b\uff1a \u8f93\u51fa\u540e\u7684\u6548\u679c Markdown \u5feb\u6377\u952e Bold \u52a0\u7c97 text Ctrl/\u2318 + B Emphasize \u503e\u659c text Ctrl/\u2318 + I Link \u8d85\u8fde\u63a5 title Ctrl/\u2318 + K Inline Code \u4ee3\u7801\u5757 code js html Ctrl/\u2318 + Shift + K Image \u56fe\u7247 Ctrl/\u2318 + Shift + I List \u5217\u8868 * item Ctrl + L Blockquote \u5f15\u7528 > quote Ctrl + Q H1\u4e00\u7ea7\u6807\u9898 # Heading H2\u4e8c\u7ea7\u6807\u9898 ## Heading Ctrl/\u2318 + H H3\u4e09\u7ea7\u6807\u9898 ### Heading Ctrl/\u2318 + H (x2) \u6587\u672c\u6837\u5f0f \u00b6 \uff08\u5e26 * \u661f\u53f7\u7684\u6587\u672c\u6837\u5f0f\uff0c\u5728\u539f\u7248Markdown\u6807\u51c6\u4e2d\u4e0d\u5b58\u5728\uff0c\u4f46\u5728\u5176\u5927\u90e8\u5206\u884d\u751f\u6807\u51c6\u4e2d\u88ab\u6dfb\u52a0\uff09 \u6b63\u5e38\u65e0\u6807\u8bb0\u6587\u5b57 \u94fe\u63a5 : Title \u52a0\u7c97 : Bold \u659c\u4f53\u5b57 : Italics * \u9ad8\u4eae : text \u6bb5\u843d : \u6bb5\u843d\u4e4b\u95f4\u7a7a\u4e00\u884c \u6362\u884c\u7b26 : \u4e00\u884c\u7ed3\u675f\u65f6\u8f93\u5165\u4e24\u4e2a\u7a7a\u683c \u5217\u8868 :* \u6dfb\u52a0\u661f\u53f7\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u9879\u3002 \u5f15\u7528\u5185\u5bb9 : > \u5f15\u7528\u5185\u5bb9 \u5185\u5d4c\u4ee3\u7801 : alert('Hello World'); \u753b\u6c34\u5e73\u7ebf (HR) : -----(\u6216\u8fde\u7eed\u8f93\u5165\u4e09\u4e2a\u661f\u53f7 *** \u5373\u53ef) \u65b9\u6846checkbox\uff1a- [ ] \u5b57\u4f53\u4e0e\u6548\u679c \u00b6 \u6807\u8bb0\uff1a \u7c97\u5b57\u4f53 \u548c \u659c\u4f53 \u548c \u6dfb\u52a0\u6807\u7b7e \u6dfb\u52a0\u6807\u7b7e\u7c97\u4f53 \u6dfb\u52a0\u6807\u7b7e\u659c\u4f53 \u6211\u8981\u5220\u9664\u4e4b\u524d\u5199\u8fc7\u7684\u9519\u8bef\u4fe1\u606f\uff1a \u6211\u5199\u9519\u5566\uff0c\u5220\u6389\u5220\u6389 \u6211\u662f\u539f\u8c05\u7eff,\u6211\u662f\u548cHtml\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\u7684 \u6211\u662f\u52a0\u7c97\u539f\u8c05\u7eff \u6b63\u6587\u65e0\u6807\u8bb0\u7684\u6587\u5b57 \u6211\u662f\u659c\u659c\u7684\u539f\u8c05\u7eff \u6807\u7b7e\u5185\u6dfb\u52a0 Html \u4e5f\u6709\u6548\u679c \u6807\u8bb0\uff1a **\u7c97\u5b57\u4f53** \u548c *\u659c\u4f53* \u548c `\u6dfb\u52a0\u6807\u7b7e` **`\u6dfb\u52a0\u6807\u7b7e\u7c97\u4f53`** *`\u6dfb\u52a0\u6807\u7b7e\u659c\u4f53`* \u6211\u8981\u5220\u9664\u4e4b\u524d\u5199\u8fc7\u7684\u9519\u8bef\u4fe1\u606f\uff1a~~\u6211\u5199\u9519\u5566\uff0c\u5220\u6389\u5220\u6389~~ <font color=\"green\">\u6211\u662f\u539f\u8c05\u7eff,\u6211\u662f\u548cHtml\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\u7684</font> **<font color=\"green\">\u6211\u662f\u52a0\u7c97\u539f\u8c05\u7eff</font>** \u6b63\u6587\u65e0\u6807\u8bb0\u7684\u6587\u5b57 *<font color=\"green\">\u6211\u662f\u659c\u659c\u7684\u539f\u8c05\u7eff</font>* <font color=\"green\">\u6807\u7b7e\u5185\u6dfb\u52a0<font color=\"red\">Html</font>\u4e5f\u6709\u6548\u679c</font> \u6807\u9898 \u00b6 \u6807\u9898\u80fd\u663e\u793a\u51fa\u6587\u7ae0\u7684\u7ed3\u6784\u3002\u884c\u9996\u63d2\u51651-6\u4e2a # \uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a # \u8868\u793a\u66f4\u6df1\u5165\u5c42\u6b21\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u5230\u6807\u9898\u7684\u6df1\u5ea6\u7531 1-6 \u9636\u3002 H1 : # Header 1 H2 : ## Header 2 H3 : ### Header 3 H4 : #### Header 4 H5 : ##### Header 5 H6 : ###### Header 6 \u6807\u9898\u6548\u679c \u00b6 \u5171\u67096\u4e2a\u7ea7\u522b\u7684\u6807\u9898 \u6807\u8bb0\uff1a #\u4e00\u7ea7\u6807\u9898 ##\u4e8c\u7ea7\u6807\u9898 ###\u4e09\u7ea7\u6807\u9898 ####\u56db\u7ea7\u6807\u9898 #####\u4e94\u7ea7\u6807\u9898 ######\u516d\u7ea7\u6807\u9898 \u751f\u6210\u76ee\u5f55 \u00b6 \u6807\u8bb0\uff1a [TOC] \u6587\u5b57\u5f15\u7528 \u00b6 \u9c81\u8fc5\u8bf4\u8fc7\uff0c\u5403\u996d\u62cc\u8089\u6c41\uff0c\u5403\u561b\u561b\u9999 \u62ff\u7834\u4ed1\u8bf4\u8fc7\uff0c\u4e0d\u559c\u6b22\u5403\u9ebb\u8fa3\u70eb\u7684\u58eb\u5175\u4e0d\u662f\u597d\u58eb\u5175 \u6807\u8bb0\uff1a >\u9c81\u8fc5\u8bf4\u8fc7\uff0c\u5403\u996d\u62cc\u8089\u6c41\uff0c\u5403\u561b\u561b\u9999 >\u62ff\u7834\u4ed1\u8bf4\u8fc7\uff0c\u4e0d\u559c\u6b22\u5403\u9ebb\u8fa3\u70eb\u7684\u58eb\u5175\u4e0d\u662f\u597d\u58eb\u5175 \u53e6\u5916\u5f15\u7528\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u4e00\u4e2a > \u7b26\u53f7\u662f\u6700\u5916\u5c42\uff0c\u4e24\u4e2a > \u7b26\u53f7\u662f\u7b2c\u4e00\u5c42\u5d4c\u5957\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1a > \u6700\u5916\u5c42 > > \u7b2c\u4e00\u5c42\u5d4c\u5957 > > > \u7b2c\u4e8c\u5c42\u5d4c\u5957 \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a \u6700\u5916\u5c42 \u7b2c\u4e00\u5c42\u5d4c\u5957 \u7b2c\u4e8c\u5c42\u5d4c\u5957 \u6bb5\u843d\u9996\u884c\u7f29\u8fdb \u00b6 \u9996\u884c\u7f29\u8fdb\u8fd9\u4e2a\u6709\u5fc5\u8981\u8bf4\u4e00\u8bf4\uff0cmarkdown\u4e3b\u8981\u9762\u5411\u82f1\u6587\u6587\u6863\uff0c\u6240\u4ee5\u6ca1\u6709\u7279\u6b8a\u7684'\u9996\u884c\u7f29\u8fdb'\u8bed\u6cd5\u3002\u5728\u6587\u672c\u7f16\u8f91\u5668\u91cc\u9762\u6211\u4eec\u4e00\u822c\u7528\u4e00\u4e2a Tab \u952e\uff0c\u518d\u4e0d\u6d4e\u5c31\u7528 \u7a7a\u683c \uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b Tab \u548c \u7a7a\u683c \u5728markdown\u4e2d\u7684\u6548\u679c\u3002 Tab\u952e\u7684\u6548\u679c\uff1a \u8fd9\u662f Tab \u952e\u4ea7\u751f\u7684\u6548\u679c;\u4e0d\u8981\u6000\u7591\uff0c\u6211\u786e\u5b9e\u52a0\u4e86\u4e00\u4e2aTab\u952e\uff0c\u4f46\u662f\u4ed6\u55b5\u7684\u600e\u4e48\u770b\u4e0d\u5230\u6548\u679c\u5462\u3002\u8fd8\u6709\uff0c\u8bf7\u52ff\u4e71\u75282\u4e2a Tab \u952e\uff0c2\u4e2a Tab \u952e\u7edd\u4e0d\u4f1a\u51fa\u73b0\u7f29\u8fdb\u7684\u6548\u679c\uff0c\u4e0b\u9762\u4f1a\u8bf4\u52302\u4e2a Tab \u952e\u662f\u4ee3\u7801\u5757\u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a \u5982\u679c\u4f60\u79bb\u4e0a\u4e00\u884c\u4e4b\u95f4\u6709\u4e00\u884c\u7a7a\u884c\uff0c\u90a3\u4e482\u4e2a Tab \u952e\u5c31\u662f\u4e00\u5757\u4ee3\u7801\u5757\u3002\u4e0d\u8981\u6000\u7591\uff0c\u8fd9\u5c31\u662f\u4e00\u5757\u4ee3\u7801\u5757\uff0c\u8fd9\u5757\u4ee3\u7801\u5757\u7684\u80cc\u666f\u662f\u6709\u6de1\u6de1\u7684\u7070\u8272\u7684\uff0c\u5982\u679c\u4f60\u770b\u4e0d\u5230\uff0c\u90a3\u53ef\u80fd\u662f\u4f60\u663e\u793a\u5668\u592a\u4eae\u4e86\uff0c\u4ee3\u7801\u5757\u91cc\u9762``(\u4e5f\u5c31\u662f\u6211\u4eec\u6dfb\u52a0\u6807\u7b7e\u7684\u6548\u679c\uff0c\u4e5f\u4e0d\u4f1a\u751f\u6548\u7684) \u7a7a\u683c\u952e\u7684\u6548\u679c\uff1a \u8fd9\u662f\u7a7a\u683c\u952e\u7684\u6548\u679c;\u597d\u50cf\u4e5f\u6ca1\u6709\u6548\u679c \u4e0a\u9762\u7684\u4e24\u79cd\u65b9\u6cd5\u90fd\u6ca1\u6709\u6548\u679c\uff0c\u73b0\u5728\u544a\u8bc9\u5927\u5bb6\u4e00\u4e2a\u65b9\u6cd5\u3002\u5f88\u7b80\u5355\uff0c\u52a0\u4e0a``\u5c31\u597d(\u7b80\u4e66\u4e0d\u652f\u6301\uff0c\u5f88\u591ablog\u90fd\u4e0d\u652f\u6301) \u771f\u6b63\u7684\u9996\u884c\u7f29\u8fdb \u8fd9\u662f\u771f\u7684\u9996\u884c\u7f29\u8fdb\u54e6\u3002 \u6807\u8bb0\uff1a \u8fd9\u662f\u771f\u7684\u9996\u884c\u7f29\u8fdb\u54e6\u3002 \u94fe\u63a5 \u00b6 1\u3001\u94fe\u63a5\u5230\u7f51\u7ad9` \u5982\u679c\u60f3\u8981\u8c03\u7528\u94fe\u63a5[\u767e\u5ea6](http://www.baidu.com),\u683c\u5f0f\u662f`[\u663e\u793a\u5185\u5bb9](\u94fe\u63a5\u5730\u5740) \u767e\u5ea6 2 \u3001\u56fe\u7247\u8fde\u63a5 \u5c55\u793a\u56fe\u7247\u7684\u6807\u8bb0\u683c\u5f0f\u4e5f\u548c\u94fe\u63a5\u5230\u7f51\u7ad9\u7684\u6807\u8bb0\u683c\u5f0f\u5dee\u4e0d\u591a \u6807\u8bb0 ! [ alt \u5c5e\u6027\u6587\u672c ]( \u56fe\u7247\u5730\u5740 ) ! [ alt \u5c5e\u6027\u6587\u672c ]( \u56fe\u7247\u5730\u5740 \"\u53ef\u9009\u6807\u9898\" ) ! [ \u56fe\u7247\u5c5e\u6027 ]( http : //pic4.zhimg.com/v2-2a56e92cf72cd1268d299f47b8d2cf14_r.jpg \"\u793a\u4f8b\u56fe\u7247\") \u5f00\u5934\u4e00\u4e2a\u611f\u53f9\u53f7 ! \u63a5\u7740\u4e00\u4e2a\u65b9\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u66ff\u4ee3\u6587\u5b57 \u63a5\u7740\u4e00\u4e2a\u666e\u901a\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u7f51\u5740\uff0c\u6700\u540e\u8fd8\u53ef\u4ee5\u7528\u5f15\u53f7\u5305\u4f4f\u5e76\u52a0\u4e0a\u9009\u62e9\u6027\u7684 'title' \u5c5e\u6027\u7684\u6587\u5b57\u3002 Markdown \u8fd8\u6ca1\u6709\u529e\u6cd5\u6307\u5b9a\u56fe\u7247\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 \u6807\u7b7e\u3002 < img src = \"http://img3.imgtn.bdimg.com/it/u=1750208429,1514486128&fm=26&gp=0.jpg\" width = \"50%\" > 3\u3001\u8fde\u63a5\u5f15\u7528\u53d8\u91cf \u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [Google][1] \u8fd9\u4e2a\u94fe\u63a5\u7528 baidu \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [baidu][baidu] \u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09 [1]: http://www.google.com/ [baidu]: http://www.baidu.com/ \u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf Google \u8fd9\u4e2a\u94fe\u63a5\u7528 baidu\u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf baidu \u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09 \u5217\u8868 \u00b6 1\u3001\u65e0\u5e8f\u7684\u5217\u8868 \u00b6 -\u751f\u6210\u7684\u5217\u8868 \u5b50\u5217\u88681(\u524d\u9762\u6709\u4e00\u4e2aTab) \u6211(\u524d\u9762\u6709\u4e00\u4e2aTab) \u5f88(\u524d\u9762\u6709\u4e24\u4e2aTab) \u597d(\u524d\u9762\u6709\u4e09\u4e2aTab) \u770b(\u524d\u9762\u6709\u56db\u4e2aTab) \u4e0d\u597d\u770b \u5b50\u5217\u88682 *\u751f\u6210\u7684\u5217\u88681 *\u751f\u6210\u7684\u5217\u88682 +\u751f\u6210\u7684\u5217\u88681 +\u751f\u6210\u7684\u5217\u88682 -\u3001*\u3001+`\u53ef\u4ee5\u751f\u6210\u5217\u8868\u7684\u7b26\u53f7,`-\u3001*\u3001+`\u540e\u8981\u52a0\u4e0a`\u7a7a\u683c`\u624d\u4f1a\u751f\u6548\uff0c\u5b50\u5217\u8868\u524d\u9762\u8981\u52a0\u4e0a`Tab`\u952e,\u751f\u6210\u5b50\u5217\u8868\u7684\u5173\u952e\u5c31\u662f\u52a0\u4e0a`Tab \u6807\u8bb0\uff1a - -\u751f\u6210\u7684\u5217\u8868 - \u5b50\u5217\u88681(\u524d\u9762\u6709\u4e00\u4e2aTab) - \u6211(\u524d\u9762\u6709\u4e00\u4e2aTab) - \u5f88(\u524d\u9762\u6709\u4e24\u4e2aTab) - \u597d(\u524d\u9762\u6709\u4e09\u4e2aTab) - \u770b(\u524d\u9762\u6709\u56db\u4e2aTab) - \u4e0d\u597d\u770b - \u5b50\u5217\u88682 * *\u751f\u6210\u7684\u5217\u88681 * *\u751f\u6210\u7684\u5217\u88682 + +\u751f\u6210\u7684\u5217\u88681 + +\u751f\u6210\u7684\u5217\u88682 2\u3001\u6709\u5e8f\u7684\u5217\u8868 \u00b6 \u6709\u5e8f\u5217\u8868\u4e00(\u6587\u5b57\u524d\u9762\u6709\u7a7a\u683c\u54e6) (1).\u6211\u662f\u5b50\u5217\u8868\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5c42\u7ea7\u6548\u679c \u6709\u5e8f\u5217\u8868\u4e8c \u6709\u5e8f\u5217\u8868\u4e09 \u6570\u5b57\u52a0\u4e0a . \u518d\u52a0\u4e0a \u7a7a\u683c \uff0c\u5c31\u53d8\u6210\u4e86\u6709\u5e8f\u7684\u5217\u8868\u3002 \u6807\u8bb0\uff1a 1. \u6709\u5e8f\u5217\u8868\u4e00(\u6587\u5b57\u524d\u9762\u6709\u7a7a\u683c\u54e6) (1).\u6211\u662f\u5b50\u5217\u8868\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5c42\u7ea7\u6548\u679c 2. \u6709\u5e8f\u5217\u8868\u4e8c 3. \u6709\u5e8f\u5217\u8868\u4e09 3\u3001\u6709\u5e8f\u6709\u5c42\u7ea7\u5217\u8868 \u00b6 1.\u6709\u5e8f\u5217\u8868\u4e00 1.1 \u6211\u662f\u5b50\u5217\u8868\uff0c\u6211\u6709\u5c42\u7ea7\u6548\u679c 1.2 2.\u6709\u5e8f\u5217\u8868\u4e8c 3.\u6709\u5e8f\u5217\u8868\u4e09 \u54c8\u54c8\uff0c\u8fd9\u662f\u6211\u81ea\u5df1\u60f3\u51fa\u6765\u7684\uff0c\u65e0\u5e8f\u5217\u8868\u4e0a\u52a0\u4e0a\u6570\u5b57\uff1b\u5982\u679c\u771f\u7684\u662f\u8981\u6570\u5b57\u533a\u5206\u5c31\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002 \u6807\u8bb0 \uff1a - 1 . \u6709\u5e8f\u5217\u8868\u4e00 - 1 . 1 \u6211\u662f\u5b50\u5217\u8868 \uff0c \u6211\u6709\u5c42\u7ea7\u6548\u679c - 1 . 2 - 2 . \u6709\u5e8f\u5217\u8868\u4e8c - 3 . \u6709\u5e8f\u5217\u8868\u4e09 \u8868\u683c \u00b6 \u661f\u671f 1 2 3 4 5 6 7 \u65e9\u9910 \u9999\u8549\u725b\u5976\u71d5\u9ea6\u7ca5 \u76ae\u86cb\u7626\u8089\u7ca5 \u8702\u871c\u5c0f\u86cb\u7cd5 \u704c\u6c64\u5305 \u5357\u74dc\u997c \u8089\u672b\u86cb\u7fb9 \u8c46\u6d46\u6cb9\u6761 \u4e2d\u9910 \u7206\u7092\u9e21\u809d \u7b0b\u5e72\u7092\u8089 \u7ba9\u535c\u7092\u8089 \u5241\u6912\u9c7c\u5934 \u8471\u6cb9\u86cf\u5b50 \u98ce\u5473\u8e44\u7b4b \u73cd\u73e0\u4e38\u5b50 \u665a\u9910 \u725b\u8089\u7802\u9505 \u867e\u76ae\u7092\u6d77\u5e26 \u725b\u8089\u7092\u897f\u82b9 \u829d\u9ebb\u8c46\u8150 \u9999\u83c7\u7092\u8089 \u571f\u8c46\u4e1d\u997c \u53c9\u70e7\u8089 \u6807\u8bb0\uff1a | \u661f\u671f | 1 | 2 | 3 | 4 | 5 | 6 | 7 | |---|---|---|---|---|---|---|---| | \u65e9\u9910 | \u9999\u8549\u725b\u5976\u71d5\u9ea6\u7ca5 | \u76ae\u86cb\u7626\u8089\u7ca5 | \u8702\u871c\u5c0f\u86cb\u7cd5 | \u704c\u6c64\u5305 | \u5357\u74dc\u997c | \u8089\u672b\u86cb\u7fb9 | \u8c46\u6d46\u6cb9\u6761 | | \u4e2d\u9910 | \u7206\u7092\u9e21\u809d | \u7b0b\u5e72\u7092\u8089 | \u7ba9\u535c\u7092\u8089 | \u5241\u6912\u9c7c\u5934 | \u8471\u6cb9\u86cf\u5b50 | \u98ce\u5473\u8e44\u7b4b | \u73cd\u73e0\u4e38\u5b50 | | \u665a\u9910 | \u725b\u8089\u7802\u9505 | \u867e\u76ae\u7092\u6d77\u5e26 | \u725b\u8089\u7092\u897f\u82b9 | \u829d\u9ebb\u8c46\u8150 | \u9999\u83c7\u7092\u8089 | \u571f\u8c46\u4e1d\u997c | \u53c9\u70e7\u8089 | \u8f6c\u4e49 \u00b6 Markdown \u4f7f\u7528\u4e86\u5f88\u591a\u7279\u6b8a\u7b26\u53f7\u6765\u8868\u793a\u7279\u5b9a\u7684\u610f\u4e49\uff0c\u5982\u679c\u9700\u8981\u663e\u793a\u7279\u5b9a\u7684\u7b26\u53f7\u5219\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26\uff0cMarkdown \u4f7f\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff1a **\u6587\u672c\u52a0\u7c97** \\*\\* \u6b63\u5e38\u663e\u793a\u661f\u53f7 \\*\\* \u6587\u672c\u52a0\u7c97 ** \u6b63\u5e38\u663e\u793a\u661f\u53f7 ** \u4ee3\u7801\u5757 \u00b6 \u4ee3\u7801\u5757\u53ef\u80fd\u7531\u4e8e\u7f51\u7ad9\u7684\u652f\u6301\u4e0d\u540c\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u6548\u679c\uff0c\u4f46\u662f\u4ee3\u7801\u5757\u6709\u4e09\u79cd\u4e66\u5199\u7684\u65b9\u5f0f 1\u3001Tab\u4ee3\u7801\u5757 \u00b6 \u4ee3\u7801\u533a\u5757\u4f7f\u7528 4 \u4e2a\u7a7a\u683c \u6216\u8005\u4e00\u4e2a \u5236\u8868\u7b26\uff08Tab \u952e\uff09 \u3002 \u5b9e\u4f8b\u5982\u4e0b\uff1a \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a \u00b6 2\u3001\u52a0\u5f3a\u4ee3\u7801\u5757 \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u7528 ``` \u5305\u88f9\u4e00\u6bb5\u4ee3\u7801\uff0c\u5e76\u6307\u5b9a\u4e00\u79cd\u8bed\u8a00\uff08\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\uff09\uff0c\u6280\u672f\u4eba\u7f16\u5199\u793a\u4f8b\u4ee3\u7801\u7684\u5fc5\u5907\u6807\u7b7e \u6807\u8bb0 \u200b ``` \u52a0\u5f3a\u7684\u975e\u7279\u5b9a\u8bed\u8a00\u7684\u4ee3\u7801\u5757 HTML JS C# JAVA \u200b``` \u52a0\u5f3a\u7684\u975e\u7279\u5b9a\u8bed\u8a00\u7684\u4ee3\u7801\u5757 HTML JS C# JAVA \u7279\u5b9a\u7684\u7684\u4ee3\u7801\u5757\u4e5f\u53ef\u80fd\u7531\u4e8e\u7f51\u7ad9\u7684\u652f\u6301\u4e0d\u540c\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u989c\u8272\u9ad8\u4eae\u6548\u679c\uff0c\u4e5f\u5c31\u662f\u52a0\u4e0a\u4ee3\u7801\u5757\u7684\u540d\u5b57\u5982 ```java \u200b``` java public static void main ( String [] args ){ System . out . println ( \"\u8fd9\u662fjava\u8bed\u8a00\u4ee3\u7801\u5757\" ); } \u200b``` \u6548\u679c public static void main ( String [] args ){ System . out . println ( \"\u8fd9\u662fjava\u8bed\u8a00\u4ee3\u7801\u5757\" ); } 3\u3001\u6269\u5c55\u4ee3\u7801\u5757 \u00b6 \u5176\u5b83\u6269\u5c55\u683c\u5f0f\u5757,\u5982 ```flow \uff0c\u8fd9\u662f\u6d41\u7a0b\u56fe\u7684\u4ee3\u7801\u5757\uff0c\u76f4\u63a5\u751f\u6210\u6d41\u7a0b\u56fe(\u9700\u8981\u7b2c\u4e09\u65b9\u652f\u6301) \u6d41\u7a0b\u56fe\u6837\u4f8b ```flow st=>start: \u5f00\u59cb\u6846 op=>operation: \u5904\u7406\u6846 cond=>condition: \u5224\u65ad\u6846(\u662f\u6216\u5426?) sub1=>subroutine: \u5b50\u6d41\u7a0b io=>inputoutput: \u8f93\u5165\u8f93\u51fa\u6846 e=>end: \u7ed3\u675f\u6846 st->op->cond cond(yes)->io->e cond(no)->sub1(right)->op ``` st=>start: \u5f00\u59cb\u6846 op=>operation: \u5904\u7406\u6846 cond=>condition: \u5224\u65ad\u6846(\u662f\u6216\u5426?) sub1=>subroutine: \u5b50\u6d41\u7a0b io=>inputoutput: \u8f93\u5165\u8f93\u51fa\u6846 e=>end: \u7ed3\u675f\u6846 st->op->cond cond(yes)->io->e cond(no)->sub1(right)->op UML\u6807\u51c6\u65f6\u5e8f\u56fe\u6837\u4f8b ```mermaid %% \u65f6\u5e8f\u56fe\u4f8b\u5b50,-> \u76f4\u7ebf\uff0c-->\u865a\u7ebf\uff0c->>\u5b9e\u7ebf\u7bad\u5934 sequenceDiagram participant \u5f20\u4e09 participant \u674e\u56db \u5f20\u4e09->\u738b\u4e94: \u738b\u4e94\u4f60\u597d\u5417\uff1f loop \u5065\u5eb7\u68c0\u67e5 \u738b\u4e94->\u738b\u4e94: \u4e0e\u75be\u75c5\u6218\u6597 end Note right of \u738b\u4e94: \u5408\u7406 \u98df\u7269 <br/>\u770b\u533b\u751f... \u674e\u56db-->>\u5f20\u4e09: \u5f88\u597d! \u738b\u4e94->\u674e\u56db: \u4f60\u600e\u4e48\u6837? \u674e\u56db-->\u738b\u4e94: \u5f88\u597d! ``` %% \u65f6\u5e8f\u56fe\u4f8b\u5b50,-> \u76f4\u7ebf\uff0c-->\u865a\u7ebf\uff0c->>\u5b9e\u7ebf\u7bad\u5934 sequenceDiagram participant \u5f20\u4e09 participant \u674e\u56db \u5f20\u4e09->\u738b\u4e94: \u738b\u4e94\u4f60\u597d\u5417\uff1f loop \u5065\u5eb7\u68c0\u67e5 \u738b\u4e94->\u738b\u4e94: \u4e0e\u75be\u75c5\u6218\u6597 end Note right of \u738b\u4e94: \u5408\u7406 \u98df\u7269 <br/>\u770b\u533b\u751f... \u674e\u56db-->>\u5f20\u4e09: \u5f88\u597d! \u738b\u4e94->\u674e\u56db: \u4f60\u600e\u4e48\u6837? \u674e\u56db-->\u738b\u4e94: \u5f88\u597d! UML\u65f6\u5e8f\u56fe\u6e90\u7801\u590d\u6742\u6837\u4f8b\uff1a \u200b```sequence Title: \u6807\u9898\uff1a\u590d\u6742\u4f7f\u7528 \u5bf9\u8c61A->\u5bf9\u8c61B: \u5bf9\u8c61B\u4f60\u597d\u5417?\uff08\u8bf7\u6c42\uff09 Note right of \u5bf9\u8c61B: \u5bf9\u8c61B\u7684\u63cf\u8ff0 Note left of \u5bf9\u8c61A: \u5bf9\u8c61A\u7684\u63cf\u8ff0(\u63d0\u793a) \u5bf9\u8c61B-->\u5bf9\u8c61A: \u6211\u5f88\u597d(\u54cd\u5e94) \u5bf9\u8c61B->\u5c0f\u4e09: \u4f60\u597d\u5417 \u5c0f\u4e09-->>\u5bf9\u8c61A: \u5bf9\u8c61B\u627e\u6211\u4e86 \u5bf9\u8c61A->\u5bf9\u8c61B: \u4f60\u771f\u7684\u597d\u5417\uff1f Note over \u5c0f\u4e09,\u5bf9\u8c61B: \u6211\u4eec\u662f\u670b\u53cb participant C Note right of C: \u6ca1\u4eba\u966a\u6211\u73a9 \u200b``` Title: \u6807\u9898\uff1a\u590d\u6742\u4f7f\u7528 \u5bf9\u8c61A->\u5bf9\u8c61B: \u5bf9\u8c61B\u4f60\u597d\u5417?\uff08\u8bf7\u6c42\uff09 Note right of \u5bf9\u8c61B: \u5bf9\u8c61B\u7684\u63cf\u8ff0 Note left of \u5bf9\u8c61A: \u5bf9\u8c61A\u7684\u63cf\u8ff0(\u63d0\u793a) \u5bf9\u8c61B-->\u5bf9\u8c61A: \u6211\u5f88\u597d(\u54cd\u5e94) \u5bf9\u8c61B->\u5c0f\u4e09: \u4f60\u597d\u5417 \u5c0f\u4e09-->>\u5bf9\u8c61A: \u5bf9\u8c61B\u627e\u6211\u4e86 \u5bf9\u8c61A->\u5bf9\u8c61B: \u4f60\u771f\u7684\u597d\u5417\uff1f Note over \u5c0f\u4e09,\u5bf9\u8c61B: \u6211\u4eec\u662f\u670b\u53cb participant C Note right of C: \u6ca1\u4eba\u966a\u6211\u73a9 \u7518\u7279\u56fe\u6837\u4f8b ```mermaid %% \u8bed\u6cd5\u793a\u4f8b gantt dateFormat YYYY-MM-DD title \u8f6f\u4ef6\u5f00\u53d1\u7518\u7279\u56fe section \u8bbe\u8ba1 \u9700\u6c42 :done, des1, 2014-01-06,2014-01-08 \u539f\u578b :active, des2, 2014-01-09, 3d UI\u8bbe\u8ba1 : des3, after des2, 5d \u672a\u6765\u4efb\u52a1 : des4, after des3, 5d section \u5f00\u53d1 \u5b66\u4e60\u51c6\u5907\u7406\u89e3\u9700\u6c42 :crit, done, 2014-01-06,24h \u8bbe\u8ba1\u6846\u67b6 :crit, done, after des2, 2d \u5f00\u53d1 :crit, active, 3d \u672a\u6765\u4efb\u52a1 :crit, 5d \u800d :2d section \u6d4b\u8bd5 \u529f\u80fd\u6d4b\u8bd5 :active, a1, after des3, 3d \u538b\u529b\u6d4b\u8bd5 :after a1 , 20h \u6d4b\u8bd5\u62a5\u544a : 48h ``` %% \u8bed\u6cd5\u793a\u4f8b gantt dateFormat YYYY-MM-DD title \u8f6f\u4ef6\u5f00\u53d1\u7518\u7279\u56fe section \u8bbe\u8ba1 \u9700\u6c42 :done, des1, 2014-01-06,2014-01-08 \u539f\u578b :active, des2, 2014-01-09, 3d UI\u8bbe\u8ba1 : des3, after des2, 5d \u672a\u6765\u4efb\u52a1 : des4, after des3, 5d section \u5f00\u53d1 \u5b66\u4e60\u51c6\u5907\u7406\u89e3\u9700\u6c42 :crit, done, 2014-01-06,24h \u8bbe\u8ba1\u6846\u67b6 :crit, done, after des2, 2d \u5f00\u53d1 :crit, active, 3d \u672a\u6765\u4efb\u52a1 :crit, 5d \u800d :2d section \u6d4b\u8bd5 \u529f\u80fd\u6d4b\u8bd5 :active, a1, after des3, 3d \u538b\u529b\u6d4b\u8bd5 :after a1 , 20h \u6d4b\u8bd5\u62a5\u544a : 48h \u66f4\u591a\u8bed\u6cd5\u53c2\u8003\uff1a \u6d41\u7a0b\u56fe\u8bed\u6cd5\u53c2\u8003 \u7279\u5b9a\u7684\u4ee3\u7801\u5757\u80fd\u751f\u6210\u5f88\u591a\u56fe\u5f62\u5982 \u5e8f\u5217\u56fe \u3001 \u7518\u7279\u56fe \u7b49\u7b49\uff0c\u8bf7\u770b Cmd Markdown \u3001 mdadvance \u516c\u5f0f \u00b6 \u5f53\u4f60\u9700\u8981\u5728\u7f16\u8f91\u5668\u4e2d\u63d2\u5165\u6570\u5b66\u516c\u5f0f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u7f8e\u5143\u7b26 $$ \u5305\u88f9 TeX \u6216 LaTeX \u683c\u5f0f\u7684\u6570\u5b66\u516c\u5f0f\u6765\u5b9e\u73b0\u3002\u63d0\u4ea4\u540e\uff0c\u95ee\u7b54\u548c\u6587\u7ae0\u9875\u4f1a\u6839\u636e\u9700\u8981\u52a0\u8f7d Mathjax \u5bf9\u6570\u5b66\u516c\u5f0f\u8fdb\u884c\u6e32\u67d3\u3002\u5982\uff1a $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} \u672c\u6587\u53c2\u8003\u5f15\u7528\u7f51\u5740\uff1a https://www.jianshu.com/p/9219979a33e1 https://www.runoob.com/markdown","title":"Markdown\u6559\u7a0b"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#markdown","text":"","title":"Markdown\u6559\u7a0b"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_1","text":"\u9996\u5148\u51c6\u5907\u4e00\u6b3emarkdown\u7f16\u8f91\u5668\uff0c\u5728\u7f51\u4e0a\u641c\u7d22\u4e00\u4e0b\u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u641c\u7d22\u5230\u5f88\u591a\uff0c\u767e\u5ea6\u767e\u79d1\u5df2\u6709\u4eba\u5217\u51fa\u6e05\u5355 \uff1a \u5e38\u7528\u7684Markdown \u7f16\u8f91\u5668 VSCode (\u5f00\u53d1\u5fc5\u5907) HBuilderX Atom Byword Mou Typora (\u4e2a\u4eba\u63a8\u8350\u7528\u8fd9\u6b3e) MacDown RStudio Cmd Markdown","title":"\u5de5\u5177\u51c6\u5907"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_2","text":"\u6700\u5e38\u89c1\u7684Markdown\u683c\u5f0f\u9009\u9879\u548c\u952e\u76d8\u5feb\u6377\u952e: \u4ee5\u4e0b\u662f\u6e90\u793a\u4f8b | \u8f93\u51fa\u540e\u7684\u6548\u679c | Markdown | \u5feb\u6377\u952e | | ------------ | ---------------- | ------------------ | | Bold | **text** | Ctrl/\u2318 + B | | *Emphasize* | *text* | Ctrl/\u2318 + I | | Link | [title](http://xx) | Ctrl/\u2318 + K | | Inline Code | `code js html` | Ctrl/\u2318 + Shift + K | | Image | ![alt](https://xxx.png)| Ctrl/\u2318 + Shift + I | | List | * item | Ctrl + L | | Blockquote | > quote | Ctrl + Q | | H1 | # Heading | | | H2 | ## Heading | Ctrl/\u2318 + H | | H3 | ### Heading | Ctrl/\u2318 + H (x2) | \u7ed3\u679c\u793a\u4f8b\uff1a \u8f93\u51fa\u540e\u7684\u6548\u679c Markdown \u5feb\u6377\u952e Bold \u52a0\u7c97 text Ctrl/\u2318 + B Emphasize \u503e\u659c text Ctrl/\u2318 + I Link \u8d85\u8fde\u63a5 title Ctrl/\u2318 + K Inline Code \u4ee3\u7801\u5757 code js html Ctrl/\u2318 + Shift + K Image \u56fe\u7247 Ctrl/\u2318 + Shift + I List \u5217\u8868 * item Ctrl + L Blockquote \u5f15\u7528 > quote Ctrl + Q H1\u4e00\u7ea7\u6807\u9898 # Heading H2\u4e8c\u7ea7\u6807\u9898 ## Heading Ctrl/\u2318 + H H3\u4e09\u7ea7\u6807\u9898 ### Heading Ctrl/\u2318 + H (x2)","title":"\u5e38\u7528\u8bed\u6cd5"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_3","text":"\uff08\u5e26 * \u661f\u53f7\u7684\u6587\u672c\u6837\u5f0f\uff0c\u5728\u539f\u7248Markdown\u6807\u51c6\u4e2d\u4e0d\u5b58\u5728\uff0c\u4f46\u5728\u5176\u5927\u90e8\u5206\u884d\u751f\u6807\u51c6\u4e2d\u88ab\u6dfb\u52a0\uff09 \u6b63\u5e38\u65e0\u6807\u8bb0\u6587\u5b57 \u94fe\u63a5 : Title \u52a0\u7c97 : Bold \u659c\u4f53\u5b57 : Italics * \u9ad8\u4eae : text \u6bb5\u843d : \u6bb5\u843d\u4e4b\u95f4\u7a7a\u4e00\u884c \u6362\u884c\u7b26 : \u4e00\u884c\u7ed3\u675f\u65f6\u8f93\u5165\u4e24\u4e2a\u7a7a\u683c \u5217\u8868 :* \u6dfb\u52a0\u661f\u53f7\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u9879\u3002 \u5f15\u7528\u5185\u5bb9 : > \u5f15\u7528\u5185\u5bb9 \u5185\u5d4c\u4ee3\u7801 : alert('Hello World'); \u753b\u6c34\u5e73\u7ebf (HR) : -----(\u6216\u8fde\u7eed\u8f93\u5165\u4e09\u4e2a\u661f\u53f7 *** \u5373\u53ef) \u65b9\u6846checkbox\uff1a- [ ]","title":"\u6587\u672c\u6837\u5f0f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_4","text":"\u6807\u8bb0\uff1a \u7c97\u5b57\u4f53 \u548c \u659c\u4f53 \u548c \u6dfb\u52a0\u6807\u7b7e \u6dfb\u52a0\u6807\u7b7e\u7c97\u4f53 \u6dfb\u52a0\u6807\u7b7e\u659c\u4f53 \u6211\u8981\u5220\u9664\u4e4b\u524d\u5199\u8fc7\u7684\u9519\u8bef\u4fe1\u606f\uff1a \u6211\u5199\u9519\u5566\uff0c\u5220\u6389\u5220\u6389 \u6211\u662f\u539f\u8c05\u7eff,\u6211\u662f\u548cHtml\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\u7684 \u6211\u662f\u52a0\u7c97\u539f\u8c05\u7eff \u6b63\u6587\u65e0\u6807\u8bb0\u7684\u6587\u5b57 \u6211\u662f\u659c\u659c\u7684\u539f\u8c05\u7eff \u6807\u7b7e\u5185\u6dfb\u52a0 Html \u4e5f\u6709\u6548\u679c \u6807\u8bb0\uff1a **\u7c97\u5b57\u4f53** \u548c *\u659c\u4f53* \u548c `\u6dfb\u52a0\u6807\u7b7e` **`\u6dfb\u52a0\u6807\u7b7e\u7c97\u4f53`** *`\u6dfb\u52a0\u6807\u7b7e\u659c\u4f53`* \u6211\u8981\u5220\u9664\u4e4b\u524d\u5199\u8fc7\u7684\u9519\u8bef\u4fe1\u606f\uff1a~~\u6211\u5199\u9519\u5566\uff0c\u5220\u6389\u5220\u6389~~ <font color=\"green\">\u6211\u662f\u539f\u8c05\u7eff,\u6211\u662f\u548cHtml\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\u7684</font> **<font color=\"green\">\u6211\u662f\u52a0\u7c97\u539f\u8c05\u7eff</font>** \u6b63\u6587\u65e0\u6807\u8bb0\u7684\u6587\u5b57 *<font color=\"green\">\u6211\u662f\u659c\u659c\u7684\u539f\u8c05\u7eff</font>* <font color=\"green\">\u6807\u7b7e\u5185\u6dfb\u52a0<font color=\"red\">Html</font>\u4e5f\u6709\u6548\u679c</font>","title":"\u5b57\u4f53\u4e0e\u6548\u679c"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_5","text":"\u6807\u9898\u80fd\u663e\u793a\u51fa\u6587\u7ae0\u7684\u7ed3\u6784\u3002\u884c\u9996\u63d2\u51651-6\u4e2a # \uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a # \u8868\u793a\u66f4\u6df1\u5165\u5c42\u6b21\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u5230\u6807\u9898\u7684\u6df1\u5ea6\u7531 1-6 \u9636\u3002 H1 : # Header 1 H2 : ## Header 2 H3 : ### Header 3 H4 : #### Header 4 H5 : ##### Header 5 H6 : ###### Header 6","title":"\u6807\u9898"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_6","text":"\u5171\u67096\u4e2a\u7ea7\u522b\u7684\u6807\u9898 \u6807\u8bb0\uff1a #\u4e00\u7ea7\u6807\u9898 ##\u4e8c\u7ea7\u6807\u9898 ###\u4e09\u7ea7\u6807\u9898 ####\u56db\u7ea7\u6807\u9898 #####\u4e94\u7ea7\u6807\u9898 ######\u516d\u7ea7\u6807\u9898","title":"\u6807\u9898\u6548\u679c"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_7","text":"\u6807\u8bb0\uff1a [TOC]","title":"\u751f\u6210\u76ee\u5f55"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_8","text":"\u9c81\u8fc5\u8bf4\u8fc7\uff0c\u5403\u996d\u62cc\u8089\u6c41\uff0c\u5403\u561b\u561b\u9999 \u62ff\u7834\u4ed1\u8bf4\u8fc7\uff0c\u4e0d\u559c\u6b22\u5403\u9ebb\u8fa3\u70eb\u7684\u58eb\u5175\u4e0d\u662f\u597d\u58eb\u5175 \u6807\u8bb0\uff1a >\u9c81\u8fc5\u8bf4\u8fc7\uff0c\u5403\u996d\u62cc\u8089\u6c41\uff0c\u5403\u561b\u561b\u9999 >\u62ff\u7834\u4ed1\u8bf4\u8fc7\uff0c\u4e0d\u559c\u6b22\u5403\u9ebb\u8fa3\u70eb\u7684\u58eb\u5175\u4e0d\u662f\u597d\u58eb\u5175 \u53e6\u5916\u5f15\u7528\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u4e00\u4e2a > \u7b26\u53f7\u662f\u6700\u5916\u5c42\uff0c\u4e24\u4e2a > \u7b26\u53f7\u662f\u7b2c\u4e00\u5c42\u5d4c\u5957\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1a > \u6700\u5916\u5c42 > > \u7b2c\u4e00\u5c42\u5d4c\u5957 > > > \u7b2c\u4e8c\u5c42\u5d4c\u5957 \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a \u6700\u5916\u5c42 \u7b2c\u4e00\u5c42\u5d4c\u5957 \u7b2c\u4e8c\u5c42\u5d4c\u5957","title":"\u6587\u5b57\u5f15\u7528"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_9","text":"\u9996\u884c\u7f29\u8fdb\u8fd9\u4e2a\u6709\u5fc5\u8981\u8bf4\u4e00\u8bf4\uff0cmarkdown\u4e3b\u8981\u9762\u5411\u82f1\u6587\u6587\u6863\uff0c\u6240\u4ee5\u6ca1\u6709\u7279\u6b8a\u7684'\u9996\u884c\u7f29\u8fdb'\u8bed\u6cd5\u3002\u5728\u6587\u672c\u7f16\u8f91\u5668\u91cc\u9762\u6211\u4eec\u4e00\u822c\u7528\u4e00\u4e2a Tab \u952e\uff0c\u518d\u4e0d\u6d4e\u5c31\u7528 \u7a7a\u683c \uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b Tab \u548c \u7a7a\u683c \u5728markdown\u4e2d\u7684\u6548\u679c\u3002 Tab\u952e\u7684\u6548\u679c\uff1a \u8fd9\u662f Tab \u952e\u4ea7\u751f\u7684\u6548\u679c;\u4e0d\u8981\u6000\u7591\uff0c\u6211\u786e\u5b9e\u52a0\u4e86\u4e00\u4e2aTab\u952e\uff0c\u4f46\u662f\u4ed6\u55b5\u7684\u600e\u4e48\u770b\u4e0d\u5230\u6548\u679c\u5462\u3002\u8fd8\u6709\uff0c\u8bf7\u52ff\u4e71\u75282\u4e2a Tab \u952e\uff0c2\u4e2a Tab \u952e\u7edd\u4e0d\u4f1a\u51fa\u73b0\u7f29\u8fdb\u7684\u6548\u679c\uff0c\u4e0b\u9762\u4f1a\u8bf4\u52302\u4e2a Tab \u952e\u662f\u4ee3\u7801\u5757\u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a \u5982\u679c\u4f60\u79bb\u4e0a\u4e00\u884c\u4e4b\u95f4\u6709\u4e00\u884c\u7a7a\u884c\uff0c\u90a3\u4e482\u4e2a Tab \u952e\u5c31\u662f\u4e00\u5757\u4ee3\u7801\u5757\u3002\u4e0d\u8981\u6000\u7591\uff0c\u8fd9\u5c31\u662f\u4e00\u5757\u4ee3\u7801\u5757\uff0c\u8fd9\u5757\u4ee3\u7801\u5757\u7684\u80cc\u666f\u662f\u6709\u6de1\u6de1\u7684\u7070\u8272\u7684\uff0c\u5982\u679c\u4f60\u770b\u4e0d\u5230\uff0c\u90a3\u53ef\u80fd\u662f\u4f60\u663e\u793a\u5668\u592a\u4eae\u4e86\uff0c\u4ee3\u7801\u5757\u91cc\u9762``(\u4e5f\u5c31\u662f\u6211\u4eec\u6dfb\u52a0\u6807\u7b7e\u7684\u6548\u679c\uff0c\u4e5f\u4e0d\u4f1a\u751f\u6548\u7684) \u7a7a\u683c\u952e\u7684\u6548\u679c\uff1a \u8fd9\u662f\u7a7a\u683c\u952e\u7684\u6548\u679c;\u597d\u50cf\u4e5f\u6ca1\u6709\u6548\u679c \u4e0a\u9762\u7684\u4e24\u79cd\u65b9\u6cd5\u90fd\u6ca1\u6709\u6548\u679c\uff0c\u73b0\u5728\u544a\u8bc9\u5927\u5bb6\u4e00\u4e2a\u65b9\u6cd5\u3002\u5f88\u7b80\u5355\uff0c\u52a0\u4e0a``\u5c31\u597d(\u7b80\u4e66\u4e0d\u652f\u6301\uff0c\u5f88\u591ablog\u90fd\u4e0d\u652f\u6301) \u771f\u6b63\u7684\u9996\u884c\u7f29\u8fdb \u8fd9\u662f\u771f\u7684\u9996\u884c\u7f29\u8fdb\u54e6\u3002 \u6807\u8bb0\uff1a \u8fd9\u662f\u771f\u7684\u9996\u884c\u7f29\u8fdb\u54e6\u3002","title":"\u6bb5\u843d\u9996\u884c\u7f29\u8fdb"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_10","text":"1\u3001\u94fe\u63a5\u5230\u7f51\u7ad9` \u5982\u679c\u60f3\u8981\u8c03\u7528\u94fe\u63a5[\u767e\u5ea6](http://www.baidu.com),\u683c\u5f0f\u662f`[\u663e\u793a\u5185\u5bb9](\u94fe\u63a5\u5730\u5740) \u767e\u5ea6 2 \u3001\u56fe\u7247\u8fde\u63a5 \u5c55\u793a\u56fe\u7247\u7684\u6807\u8bb0\u683c\u5f0f\u4e5f\u548c\u94fe\u63a5\u5230\u7f51\u7ad9\u7684\u6807\u8bb0\u683c\u5f0f\u5dee\u4e0d\u591a \u6807\u8bb0 ! [ alt \u5c5e\u6027\u6587\u672c ]( \u56fe\u7247\u5730\u5740 ) ! [ alt \u5c5e\u6027\u6587\u672c ]( \u56fe\u7247\u5730\u5740 \"\u53ef\u9009\u6807\u9898\" ) ! [ \u56fe\u7247\u5c5e\u6027 ]( http : //pic4.zhimg.com/v2-2a56e92cf72cd1268d299f47b8d2cf14_r.jpg \"\u793a\u4f8b\u56fe\u7247\") \u5f00\u5934\u4e00\u4e2a\u611f\u53f9\u53f7 ! \u63a5\u7740\u4e00\u4e2a\u65b9\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u66ff\u4ee3\u6587\u5b57 \u63a5\u7740\u4e00\u4e2a\u666e\u901a\u62ec\u53f7\uff0c\u91cc\u9762\u653e\u4e0a\u56fe\u7247\u7684\u7f51\u5740\uff0c\u6700\u540e\u8fd8\u53ef\u4ee5\u7528\u5f15\u53f7\u5305\u4f4f\u5e76\u52a0\u4e0a\u9009\u62e9\u6027\u7684 'title' \u5c5e\u6027\u7684\u6587\u5b57\u3002 Markdown \u8fd8\u6ca1\u6709\u529e\u6cd5\u6307\u5b9a\u56fe\u7247\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 \u6807\u7b7e\u3002 < img src = \"http://img3.imgtn.bdimg.com/it/u=1750208429,1514486128&fm=26&gp=0.jpg\" width = \"50%\" > 3\u3001\u8fde\u63a5\u5f15\u7528\u53d8\u91cf \u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [Google][1] \u8fd9\u4e2a\u94fe\u63a5\u7528 baidu \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf [baidu][baidu] \u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09 [1]: http://www.google.com/ [baidu]: http://www.baidu.com/ \u8fd9\u4e2a\u94fe\u63a5\u7528 1 \u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf Google \u8fd9\u4e2a\u94fe\u63a5\u7528 baidu\u4f5c\u4e3a\u7f51\u5740\u53d8\u91cf baidu \u7136\u540e\u5728\u6587\u6863\u7684\u7ed3\u5c3e\u4e3a\u53d8\u91cf\u8d4b\u503c\uff08\u7f51\u5740\uff09","title":"\u94fe\u63a5"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_11","text":"","title":"\u5217\u8868"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#1","text":"-\u751f\u6210\u7684\u5217\u8868 \u5b50\u5217\u88681(\u524d\u9762\u6709\u4e00\u4e2aTab) \u6211(\u524d\u9762\u6709\u4e00\u4e2aTab) \u5f88(\u524d\u9762\u6709\u4e24\u4e2aTab) \u597d(\u524d\u9762\u6709\u4e09\u4e2aTab) \u770b(\u524d\u9762\u6709\u56db\u4e2aTab) \u4e0d\u597d\u770b \u5b50\u5217\u88682 *\u751f\u6210\u7684\u5217\u88681 *\u751f\u6210\u7684\u5217\u88682 +\u751f\u6210\u7684\u5217\u88681 +\u751f\u6210\u7684\u5217\u88682 -\u3001*\u3001+`\u53ef\u4ee5\u751f\u6210\u5217\u8868\u7684\u7b26\u53f7,`-\u3001*\u3001+`\u540e\u8981\u52a0\u4e0a`\u7a7a\u683c`\u624d\u4f1a\u751f\u6548\uff0c\u5b50\u5217\u8868\u524d\u9762\u8981\u52a0\u4e0a`Tab`\u952e,\u751f\u6210\u5b50\u5217\u8868\u7684\u5173\u952e\u5c31\u662f\u52a0\u4e0a`Tab \u6807\u8bb0\uff1a - -\u751f\u6210\u7684\u5217\u8868 - \u5b50\u5217\u88681(\u524d\u9762\u6709\u4e00\u4e2aTab) - \u6211(\u524d\u9762\u6709\u4e00\u4e2aTab) - \u5f88(\u524d\u9762\u6709\u4e24\u4e2aTab) - \u597d(\u524d\u9762\u6709\u4e09\u4e2aTab) - \u770b(\u524d\u9762\u6709\u56db\u4e2aTab) - \u4e0d\u597d\u770b - \u5b50\u5217\u88682 * *\u751f\u6210\u7684\u5217\u88681 * *\u751f\u6210\u7684\u5217\u88682 + +\u751f\u6210\u7684\u5217\u88681 + +\u751f\u6210\u7684\u5217\u88682","title":"1\u3001\u65e0\u5e8f\u7684\u5217\u8868"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#2","text":"\u6709\u5e8f\u5217\u8868\u4e00(\u6587\u5b57\u524d\u9762\u6709\u7a7a\u683c\u54e6) (1).\u6211\u662f\u5b50\u5217\u8868\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5c42\u7ea7\u6548\u679c \u6709\u5e8f\u5217\u8868\u4e8c \u6709\u5e8f\u5217\u8868\u4e09 \u6570\u5b57\u52a0\u4e0a . \u518d\u52a0\u4e0a \u7a7a\u683c \uff0c\u5c31\u53d8\u6210\u4e86\u6709\u5e8f\u7684\u5217\u8868\u3002 \u6807\u8bb0\uff1a 1. \u6709\u5e8f\u5217\u8868\u4e00(\u6587\u5b57\u524d\u9762\u6709\u7a7a\u683c\u54e6) (1).\u6211\u662f\u5b50\u5217\u8868\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5c42\u7ea7\u6548\u679c 2. \u6709\u5e8f\u5217\u8868\u4e8c 3. \u6709\u5e8f\u5217\u8868\u4e09","title":"2\u3001\u6709\u5e8f\u7684\u5217\u8868"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#3","text":"1.\u6709\u5e8f\u5217\u8868\u4e00 1.1 \u6211\u662f\u5b50\u5217\u8868\uff0c\u6211\u6709\u5c42\u7ea7\u6548\u679c 1.2 2.\u6709\u5e8f\u5217\u8868\u4e8c 3.\u6709\u5e8f\u5217\u8868\u4e09 \u54c8\u54c8\uff0c\u8fd9\u662f\u6211\u81ea\u5df1\u60f3\u51fa\u6765\u7684\uff0c\u65e0\u5e8f\u5217\u8868\u4e0a\u52a0\u4e0a\u6570\u5b57\uff1b\u5982\u679c\u771f\u7684\u662f\u8981\u6570\u5b57\u533a\u5206\u5c31\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002 \u6807\u8bb0 \uff1a - 1 . \u6709\u5e8f\u5217\u8868\u4e00 - 1 . 1 \u6211\u662f\u5b50\u5217\u8868 \uff0c \u6211\u6709\u5c42\u7ea7\u6548\u679c - 1 . 2 - 2 . \u6709\u5e8f\u5217\u8868\u4e8c - 3 . \u6709\u5e8f\u5217\u8868\u4e09","title":"3\u3001\u6709\u5e8f\u6709\u5c42\u7ea7\u5217\u8868"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_12","text":"\u661f\u671f 1 2 3 4 5 6 7 \u65e9\u9910 \u9999\u8549\u725b\u5976\u71d5\u9ea6\u7ca5 \u76ae\u86cb\u7626\u8089\u7ca5 \u8702\u871c\u5c0f\u86cb\u7cd5 \u704c\u6c64\u5305 \u5357\u74dc\u997c \u8089\u672b\u86cb\u7fb9 \u8c46\u6d46\u6cb9\u6761 \u4e2d\u9910 \u7206\u7092\u9e21\u809d \u7b0b\u5e72\u7092\u8089 \u7ba9\u535c\u7092\u8089 \u5241\u6912\u9c7c\u5934 \u8471\u6cb9\u86cf\u5b50 \u98ce\u5473\u8e44\u7b4b \u73cd\u73e0\u4e38\u5b50 \u665a\u9910 \u725b\u8089\u7802\u9505 \u867e\u76ae\u7092\u6d77\u5e26 \u725b\u8089\u7092\u897f\u82b9 \u829d\u9ebb\u8c46\u8150 \u9999\u83c7\u7092\u8089 \u571f\u8c46\u4e1d\u997c \u53c9\u70e7\u8089 \u6807\u8bb0\uff1a | \u661f\u671f | 1 | 2 | 3 | 4 | 5 | 6 | 7 | |---|---|---|---|---|---|---|---| | \u65e9\u9910 | \u9999\u8549\u725b\u5976\u71d5\u9ea6\u7ca5 | \u76ae\u86cb\u7626\u8089\u7ca5 | \u8702\u871c\u5c0f\u86cb\u7cd5 | \u704c\u6c64\u5305 | \u5357\u74dc\u997c | \u8089\u672b\u86cb\u7fb9 | \u8c46\u6d46\u6cb9\u6761 | | \u4e2d\u9910 | \u7206\u7092\u9e21\u809d | \u7b0b\u5e72\u7092\u8089 | \u7ba9\u535c\u7092\u8089 | \u5241\u6912\u9c7c\u5934 | \u8471\u6cb9\u86cf\u5b50 | \u98ce\u5473\u8e44\u7b4b | \u73cd\u73e0\u4e38\u5b50 | | \u665a\u9910 | \u725b\u8089\u7802\u9505 | \u867e\u76ae\u7092\u6d77\u5e26 | \u725b\u8089\u7092\u897f\u82b9 | \u829d\u9ebb\u8c46\u8150 | \u9999\u83c7\u7092\u8089 | \u571f\u8c46\u4e1d\u997c | \u53c9\u70e7\u8089 |","title":"\u8868\u683c"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_13","text":"Markdown \u4f7f\u7528\u4e86\u5f88\u591a\u7279\u6b8a\u7b26\u53f7\u6765\u8868\u793a\u7279\u5b9a\u7684\u610f\u4e49\uff0c\u5982\u679c\u9700\u8981\u663e\u793a\u7279\u5b9a\u7684\u7b26\u53f7\u5219\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26\uff0cMarkdown \u4f7f\u7528\u53cd\u659c\u6760\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff1a **\u6587\u672c\u52a0\u7c97** \\*\\* \u6b63\u5e38\u663e\u793a\u661f\u53f7 \\*\\* \u6587\u672c\u52a0\u7c97 ** \u6b63\u5e38\u663e\u793a\u661f\u53f7 **","title":"\u8f6c\u4e49"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_14","text":"\u4ee3\u7801\u5757\u53ef\u80fd\u7531\u4e8e\u7f51\u7ad9\u7684\u652f\u6301\u4e0d\u540c\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u6548\u679c\uff0c\u4f46\u662f\u4ee3\u7801\u5757\u6709\u4e09\u79cd\u4e66\u5199\u7684\u65b9\u5f0f","title":"\u4ee3\u7801\u5757"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#1tab","text":"\u4ee3\u7801\u533a\u5757\u4f7f\u7528 4 \u4e2a\u7a7a\u683c \u6216\u8005\u4e00\u4e2a \u5236\u8868\u7b26\uff08Tab \u952e\uff09 \u3002 \u5b9e\u4f8b\u5982\u4e0b\uff1a \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a","title":"1\u3001Tab\u4ee3\u7801\u5757"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_15","text":"","title":""},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#2_1","text":"\u4f60\u4e5f\u53ef\u4ee5\u7528 ``` \u5305\u88f9\u4e00\u6bb5\u4ee3\u7801\uff0c\u5e76\u6307\u5b9a\u4e00\u79cd\u8bed\u8a00\uff08\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\uff09\uff0c\u6280\u672f\u4eba\u7f16\u5199\u793a\u4f8b\u4ee3\u7801\u7684\u5fc5\u5907\u6807\u7b7e \u6807\u8bb0 \u200b ``` \u52a0\u5f3a\u7684\u975e\u7279\u5b9a\u8bed\u8a00\u7684\u4ee3\u7801\u5757 HTML JS C# JAVA \u200b``` \u52a0\u5f3a\u7684\u975e\u7279\u5b9a\u8bed\u8a00\u7684\u4ee3\u7801\u5757 HTML JS C# JAVA \u7279\u5b9a\u7684\u7684\u4ee3\u7801\u5757\u4e5f\u53ef\u80fd\u7531\u4e8e\u7f51\u7ad9\u7684\u652f\u6301\u4e0d\u540c\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u989c\u8272\u9ad8\u4eae\u6548\u679c\uff0c\u4e5f\u5c31\u662f\u52a0\u4e0a\u4ee3\u7801\u5757\u7684\u540d\u5b57\u5982 ```java \u200b``` java public static void main ( String [] args ){ System . out . println ( \"\u8fd9\u662fjava\u8bed\u8a00\u4ee3\u7801\u5757\" ); } \u200b``` \u6548\u679c public static void main ( String [] args ){ System . out . println ( \"\u8fd9\u662fjava\u8bed\u8a00\u4ee3\u7801\u5757\" ); }","title":"2\u3001\u52a0\u5f3a\u4ee3\u7801\u5757"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#3_1","text":"\u5176\u5b83\u6269\u5c55\u683c\u5f0f\u5757,\u5982 ```flow \uff0c\u8fd9\u662f\u6d41\u7a0b\u56fe\u7684\u4ee3\u7801\u5757\uff0c\u76f4\u63a5\u751f\u6210\u6d41\u7a0b\u56fe(\u9700\u8981\u7b2c\u4e09\u65b9\u652f\u6301) \u6d41\u7a0b\u56fe\u6837\u4f8b ```flow st=>start: \u5f00\u59cb\u6846 op=>operation: \u5904\u7406\u6846 cond=>condition: \u5224\u65ad\u6846(\u662f\u6216\u5426?) sub1=>subroutine: \u5b50\u6d41\u7a0b io=>inputoutput: \u8f93\u5165\u8f93\u51fa\u6846 e=>end: \u7ed3\u675f\u6846 st->op->cond cond(yes)->io->e cond(no)->sub1(right)->op ``` st=>start: \u5f00\u59cb\u6846 op=>operation: \u5904\u7406\u6846 cond=>condition: \u5224\u65ad\u6846(\u662f\u6216\u5426?) sub1=>subroutine: \u5b50\u6d41\u7a0b io=>inputoutput: \u8f93\u5165\u8f93\u51fa\u6846 e=>end: \u7ed3\u675f\u6846 st->op->cond cond(yes)->io->e cond(no)->sub1(right)->op UML\u6807\u51c6\u65f6\u5e8f\u56fe\u6837\u4f8b ```mermaid %% \u65f6\u5e8f\u56fe\u4f8b\u5b50,-> \u76f4\u7ebf\uff0c-->\u865a\u7ebf\uff0c->>\u5b9e\u7ebf\u7bad\u5934 sequenceDiagram participant \u5f20\u4e09 participant \u674e\u56db \u5f20\u4e09->\u738b\u4e94: \u738b\u4e94\u4f60\u597d\u5417\uff1f loop \u5065\u5eb7\u68c0\u67e5 \u738b\u4e94->\u738b\u4e94: \u4e0e\u75be\u75c5\u6218\u6597 end Note right of \u738b\u4e94: \u5408\u7406 \u98df\u7269 <br/>\u770b\u533b\u751f... \u674e\u56db-->>\u5f20\u4e09: \u5f88\u597d! \u738b\u4e94->\u674e\u56db: \u4f60\u600e\u4e48\u6837? \u674e\u56db-->\u738b\u4e94: \u5f88\u597d! ``` %% \u65f6\u5e8f\u56fe\u4f8b\u5b50,-> \u76f4\u7ebf\uff0c-->\u865a\u7ebf\uff0c->>\u5b9e\u7ebf\u7bad\u5934 sequenceDiagram participant \u5f20\u4e09 participant \u674e\u56db \u5f20\u4e09->\u738b\u4e94: \u738b\u4e94\u4f60\u597d\u5417\uff1f loop \u5065\u5eb7\u68c0\u67e5 \u738b\u4e94->\u738b\u4e94: \u4e0e\u75be\u75c5\u6218\u6597 end Note right of \u738b\u4e94: \u5408\u7406 \u98df\u7269 <br/>\u770b\u533b\u751f... \u674e\u56db-->>\u5f20\u4e09: \u5f88\u597d! \u738b\u4e94->\u674e\u56db: \u4f60\u600e\u4e48\u6837? \u674e\u56db-->\u738b\u4e94: \u5f88\u597d! UML\u65f6\u5e8f\u56fe\u6e90\u7801\u590d\u6742\u6837\u4f8b\uff1a \u200b```sequence Title: \u6807\u9898\uff1a\u590d\u6742\u4f7f\u7528 \u5bf9\u8c61A->\u5bf9\u8c61B: \u5bf9\u8c61B\u4f60\u597d\u5417?\uff08\u8bf7\u6c42\uff09 Note right of \u5bf9\u8c61B: \u5bf9\u8c61B\u7684\u63cf\u8ff0 Note left of \u5bf9\u8c61A: \u5bf9\u8c61A\u7684\u63cf\u8ff0(\u63d0\u793a) \u5bf9\u8c61B-->\u5bf9\u8c61A: \u6211\u5f88\u597d(\u54cd\u5e94) \u5bf9\u8c61B->\u5c0f\u4e09: \u4f60\u597d\u5417 \u5c0f\u4e09-->>\u5bf9\u8c61A: \u5bf9\u8c61B\u627e\u6211\u4e86 \u5bf9\u8c61A->\u5bf9\u8c61B: \u4f60\u771f\u7684\u597d\u5417\uff1f Note over \u5c0f\u4e09,\u5bf9\u8c61B: \u6211\u4eec\u662f\u670b\u53cb participant C Note right of C: \u6ca1\u4eba\u966a\u6211\u73a9 \u200b``` Title: \u6807\u9898\uff1a\u590d\u6742\u4f7f\u7528 \u5bf9\u8c61A->\u5bf9\u8c61B: \u5bf9\u8c61B\u4f60\u597d\u5417?\uff08\u8bf7\u6c42\uff09 Note right of \u5bf9\u8c61B: \u5bf9\u8c61B\u7684\u63cf\u8ff0 Note left of \u5bf9\u8c61A: \u5bf9\u8c61A\u7684\u63cf\u8ff0(\u63d0\u793a) \u5bf9\u8c61B-->\u5bf9\u8c61A: \u6211\u5f88\u597d(\u54cd\u5e94) \u5bf9\u8c61B->\u5c0f\u4e09: \u4f60\u597d\u5417 \u5c0f\u4e09-->>\u5bf9\u8c61A: \u5bf9\u8c61B\u627e\u6211\u4e86 \u5bf9\u8c61A->\u5bf9\u8c61B: \u4f60\u771f\u7684\u597d\u5417\uff1f Note over \u5c0f\u4e09,\u5bf9\u8c61B: \u6211\u4eec\u662f\u670b\u53cb participant C Note right of C: \u6ca1\u4eba\u966a\u6211\u73a9 \u7518\u7279\u56fe\u6837\u4f8b ```mermaid %% \u8bed\u6cd5\u793a\u4f8b gantt dateFormat YYYY-MM-DD title \u8f6f\u4ef6\u5f00\u53d1\u7518\u7279\u56fe section \u8bbe\u8ba1 \u9700\u6c42 :done, des1, 2014-01-06,2014-01-08 \u539f\u578b :active, des2, 2014-01-09, 3d UI\u8bbe\u8ba1 : des3, after des2, 5d \u672a\u6765\u4efb\u52a1 : des4, after des3, 5d section \u5f00\u53d1 \u5b66\u4e60\u51c6\u5907\u7406\u89e3\u9700\u6c42 :crit, done, 2014-01-06,24h \u8bbe\u8ba1\u6846\u67b6 :crit, done, after des2, 2d \u5f00\u53d1 :crit, active, 3d \u672a\u6765\u4efb\u52a1 :crit, 5d \u800d :2d section \u6d4b\u8bd5 \u529f\u80fd\u6d4b\u8bd5 :active, a1, after des3, 3d \u538b\u529b\u6d4b\u8bd5 :after a1 , 20h \u6d4b\u8bd5\u62a5\u544a : 48h ``` %% \u8bed\u6cd5\u793a\u4f8b gantt dateFormat YYYY-MM-DD title \u8f6f\u4ef6\u5f00\u53d1\u7518\u7279\u56fe section \u8bbe\u8ba1 \u9700\u6c42 :done, des1, 2014-01-06,2014-01-08 \u539f\u578b :active, des2, 2014-01-09, 3d UI\u8bbe\u8ba1 : des3, after des2, 5d \u672a\u6765\u4efb\u52a1 : des4, after des3, 5d section \u5f00\u53d1 \u5b66\u4e60\u51c6\u5907\u7406\u89e3\u9700\u6c42 :crit, done, 2014-01-06,24h \u8bbe\u8ba1\u6846\u67b6 :crit, done, after des2, 2d \u5f00\u53d1 :crit, active, 3d \u672a\u6765\u4efb\u52a1 :crit, 5d \u800d :2d section \u6d4b\u8bd5 \u529f\u80fd\u6d4b\u8bd5 :active, a1, after des3, 3d \u538b\u529b\u6d4b\u8bd5 :after a1 , 20h \u6d4b\u8bd5\u62a5\u544a : 48h \u66f4\u591a\u8bed\u6cd5\u53c2\u8003\uff1a \u6d41\u7a0b\u56fe\u8bed\u6cd5\u53c2\u8003 \u7279\u5b9a\u7684\u4ee3\u7801\u5757\u80fd\u751f\u6210\u5f88\u591a\u56fe\u5f62\u5982 \u5e8f\u5217\u56fe \u3001 \u7518\u7279\u56fe \u7b49\u7b49\uff0c\u8bf7\u770b Cmd Markdown \u3001 mdadvance","title":"3\u3001\u6269\u5c55\u4ee3\u7801\u5757"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/00Markdown%E6%95%99%E7%A8%8B.html#_16","text":"\u5f53\u4f60\u9700\u8981\u5728\u7f16\u8f91\u5668\u4e2d\u63d2\u5165\u6570\u5b66\u516c\u5f0f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u7f8e\u5143\u7b26 $$ \u5305\u88f9 TeX \u6216 LaTeX \u683c\u5f0f\u7684\u6570\u5b66\u516c\u5f0f\u6765\u5b9e\u73b0\u3002\u63d0\u4ea4\u540e\uff0c\u95ee\u7b54\u548c\u6587\u7ae0\u9875\u4f1a\u6839\u636e\u9700\u8981\u52a0\u8f7d Mathjax \u5bf9\u6570\u5b66\u516c\u5f0f\u8fdb\u884c\u6e32\u67d3\u3002\u5982\uff1a $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} \u672c\u6587\u53c2\u8003\u5f15\u7528\u7f51\u5740\uff1a https://www.jianshu.com/p/9219979a33e1 https://www.runoob.com/markdown","title":"\u516c\u5f0f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html","text":"MkDocs\u4ecb\u7ecd \u00b6 \u6587\u6863\u4f7f\u7528\u8bf4\u660e\u8bf7\u53c2\u8003 mkdocs.org . \u4f7f\u7528\u547d\u4ee4 \u00b6 mkdocs new [dir-name] - \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee mkdocs serve - \u542f\u52a8\u4e00\u4e2a\u70ed\u52a0\u8f7d\u7684\u6587\u6863\u670d\u52a1 mkdocs build - \u6784\u5efamk\u6587\u6863,\u751f\u6210\u9759\u6001\u6587\u4ef6 mkdocs -h - \u4f7f\u7528\u5e2e\u52a9 \u76ee\u5f55\u7ed3\u6784 \u00b6 mkdocs.yml # \u5168\u5c40\u914d\u7f6e\u6587\u4ef6 docs/ index.md # \u6587\u6863\u9996\u9875 ... # \u5176\u5b83\u6587\u4ef6\uff0c\u5305\u62ec\u9759\u6001\u8d44\u6e90 \u90e8\u7f72\u6587\u6863 \u00b6 Deploying your docs \u00b6 A basic guide to deploying your docs to various hosting providers GitHub Pages \u00b6 If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites: Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying. Project Pages \u00b6 Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command. Organization and User Pages \u00b6 User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command. Custom Domains \u00b6 GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains . Read the Docs \u00b6 Read the Docs offers free documentation hosting. You can import your docs using any major version control system, including Mercurial, Git, Subversion, and Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository. Note To benefit from all of the features offered by Read the Docs, you will need to use the Read the Docs theme which ships with MkDocs. The various themes which may be referenced in Read the Docs' documentation are Sphinx specific themes and will not work with MkDocs. Other Providers \u00b6 Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\". 404 Pages \u00b6 When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"MkDocs\u4ecb\u7ecd"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#mkdocs","text":"\u6587\u6863\u4f7f\u7528\u8bf4\u660e\u8bf7\u53c2\u8003 mkdocs.org .","title":"MkDocs\u4ecb\u7ecd"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#_1","text":"mkdocs new [dir-name] - \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee mkdocs serve - \u542f\u52a8\u4e00\u4e2a\u70ed\u52a0\u8f7d\u7684\u6587\u6863\u670d\u52a1 mkdocs build - \u6784\u5efamk\u6587\u6863,\u751f\u6210\u9759\u6001\u6587\u4ef6 mkdocs -h - \u4f7f\u7528\u5e2e\u52a9","title":"\u4f7f\u7528\u547d\u4ee4"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#_2","text":"mkdocs.yml # \u5168\u5c40\u914d\u7f6e\u6587\u4ef6 docs/ index.md # \u6587\u6863\u9996\u9875 ... # \u5176\u5b83\u6587\u4ef6\uff0c\u5305\u62ec\u9759\u6001\u8d44\u6e90","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#_3","text":"","title":"\u90e8\u7f72\u6587\u6863"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#deploying-your-docs","text":"A basic guide to deploying your docs to various hosting providers","title":"Deploying your docs"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#github-pages","text":"If you host the source code for a project on GitHub , you can easily use GitHub Pages to host the documentation for your project. There are two basic types of GitHub Pages sites: Project Pages sites, and User and Organization Pages sites. They are nearly identical but have some important differences, which require a different work flow when deploying.","title":"GitHub Pages"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#project-pages","text":"Project Pages sites are simpler as the site files get deployed to a branch within the project repository ( gh-pages by default). After you checkout the primary working branch (usually master ) of the git repository where you maintain the source documentation for your project, run the following command: mkdocs gh-deploy That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub. Use mkdocs gh-deploy --help to get a full list of options available for the gh-deploy command. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command.","title":"Project Pages"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#organization-and-user-pages","text":"User and Organization Pages sites are not tied to a specific project, and the site files are deployed to the master branch in a dedicated repository named with the GitHub account name. Therefore, you need working copies of two repositories on our local system. For example, consider the following file structure: my-project/ mkdocs.yml docs/ orgname.github.io/ After making and verifying updates to your project you need to change directories to the orgname.github.io repository and call the mkdocs gh-deploy command from there: cd ../orgname.github.io/ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Note that you need to explicitly point to the mkdocs.yml configuration file as it is no longer in the current working directory. You also need to inform the deploy script to commit to the master branch. You may override the default with the remote_branch configuration setting, but if you forget to change directories before running the deploy script, it will commit to the master branch of your project, which you probably don't want. Be aware that you will not be able to review the built site before it is pushed to GitHub. Therefore, you may want to verify any changes you make to the docs beforehand by using the build or serve commands and reviewing the built files locally. Warning You should never edit files in your pages repository by hand if you're using the gh-deploy command because you will lose your work the next time you run the command.","title":"Organization and User Pages"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#custom-domains","text":"GitHub Pages includes support for using a Custom Domain for your site. In addition to the steps documented by GitHub, you need to take one additional step so that MkDocs will work with your custom domain. You need to add a CNAME file to the root of your docs_dir . The file must contain a single bare domain or subdomain on a single line (see MkDocs' own CNAME file as an example). You may create the file manually, or use GitHub's web interface to set up the custom domain (under Settings / Custom Domain). If you use the web interface, GitHub will create the CNAME file for you and save it to the root of your \"pages\" branch. So that the file does not get removed the next time you deploy, you need to copy the file to your docs_dir . With the file properly included in your docs_dir , MkDocs will include the file in your built site and push it to your \"pages\" branch each time you run the gh-deploy command. If you are having problems getting a custom domain to work, see GitHub's documentation on Troubleshooting custom domains .","title":"Custom Domains"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#read-the-docs","text":"Read the Docs offers free documentation hosting. You can import your docs using any major version control system, including Mercurial, Git, Subversion, and Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions on their site to arrange the files in your repository properly, create an account and point it at your publicly hosted repository. If properly configured, your documentation will update each time you push commits to your public repository. Note To benefit from all of the features offered by Read the Docs, you will need to use the Read the Docs theme which ships with MkDocs. The various themes which may be referenced in Read the Docs' documentation are Sphinx specific themes and will not work with MkDocs.","title":"Read the Docs"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#other-providers","text":"Any hosting provider which can serve static files can be used to serve documentation generated by MkDocs. While it would be impossible to document how to upload the docs to every hosting provider out there, the following guidelines should provide some general assistance. When you build your site (using the mkdocs build command), all of the files are written to the directory assigned to the site_dir configuration option (defaults to \"site\" ) in your mkdocs.yaml config file. Generally, you will simply need to copy the contents of that directory to the root directory of your hosting provider's server. Depending on your hosting provider's setup, you may need to use a graphical or command line ftp , ssh or scp client to transfer the files. For example, a typical set of commands from the command line might look something like this: mkdocs build scp -r ./site user@host:/path/to/server/root Of course, you will need to replace user with the username you have with your hosting provider and host with the appropriate domain name. Additionally, you will need to adjust the /path/to/server/root to match the configuration of your hosts' file system. See your host's documentation for specifics. You will likely want to search their documentation for \"ftp\" or \"uploading site\".","title":"Other Providers"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/01Mkdocs%E4%BB%8B%E7%BB%8D.html#404-pages","text":"When MkDocs builds the documentation it will include a 404.html file in the build directory . This file will be automatically used when deploying to GitHub but only on a custom domain. Other web servers may be configured to use it but the feature won't always be available. See the documentation for your server of choice for more information.","title":"404 Pages"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html","text":"MkDocs\u5b98\u7f51 \u00b6 Project documentation with Markdown. https://www.mkdocs.org/ Overview \u00b6 MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info. Host anywhere \u00b6 MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose. Great themes available \u00b6 There's a stack of good looking themes available for MkDocs. Choose between the built in themes: mkdocs and readthedocs , select one of the 3 rd party themes listed on the MkDocs Themes wiki page, or build your own . Preview your site as you work \u00b6 The built-in dev-server allows you to preview your documentation as you're writing it. It will even auto-reload and refresh your browser whenever you save your changes. Easy to customize \u00b6 Get your project documentation looking just the way you want it by customizing the theme and/or installing some plugins . Installation \u00b6 Install with a Package Manager \u00b6 If you have and use a package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may want to search for a \"MkDocs\" package and, if a recent version is available, install it with your package manager (check your system's documentation for details). That's it, you're done! Skip down to Getting Started . If your package manager does not have a recent \"MkDocs\" package, you can still use your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs . Manual Installation \u00b6 In order to manually install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip . You can check if you have these already installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) MkDocs supports Python versions 3.5, 3.6, 3.7, 3.8, and pypy3. Installing Python \u00b6 Install Python by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default). Installing pip \u00b6 If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py Installing MkDocs \u00b6 Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0.15.3 Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ). Getting Started \u00b6 Getting started is super easy. mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files. Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum , and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml . Change the site_name setting to MkLorum and save the file. site_name: MkLorum Your browser should immediately reload, and you'll see your new site name take effect. Adding pages \u00b6 Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name: MkLorum nav: - Home: index.md - About: about.md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search , Previous , and Next items on the right. Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part! Theming our documentation \u00b6 Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name: MkLorum nav: - Home: index.md - About: about.md theme: readthedocs Save your changes, and you'll see the ReadTheDocs theme being used. Changing the Favicon Icon \u00b6 By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in your docs_dir and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon. Building the site \u00b6 That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. After some time, files may be removed from the documentation but they will still reside in the site directory. To remove those stale files, just run mkdocs with the --clean switch. mkdocs build --clean Other Commands and Options \u00b6 There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help Deploying \u00b6 The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. GitHub project pages and Amazon S3 may be good hosting options, depending upon your needs. Upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page. Getting help \u00b6 To get help with MkDocs, please use the discussion group , GitHub issues or the MkDocs IRC channel #mkdocs on freenode.","title":"MkDocs\u5b98\u7f51"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#mkdocs","text":"Project documentation with Markdown. https://www.mkdocs.org/","title":"MkDocs\u5b98\u7f51"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#overview","text":"MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info.","title":"Overview"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#host-anywhere","text":"MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.","title":"Host anywhere"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#great-themes-available","text":"There's a stack of good looking themes available for MkDocs. Choose between the built in themes: mkdocs and readthedocs , select one of the 3 rd party themes listed on the MkDocs Themes wiki page, or build your own .","title":"Great themes available"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#preview-your-site-as-you-work","text":"The built-in dev-server allows you to preview your documentation as you're writing it. It will even auto-reload and refresh your browser whenever you save your changes.","title":"Preview your site as you work"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#easy-to-customize","text":"Get your project documentation looking just the way you want it by customizing the theme and/or installing some plugins .","title":"Easy to customize"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#installation","text":"","title":"Installation"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#install-with-a-package-manager","text":"If you have and use a package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may want to search for a \"MkDocs\" package and, if a recent version is available, install it with your package manager (check your system's documentation for details). That's it, you're done! Skip down to Getting Started . If your package manager does not have a recent \"MkDocs\" package, you can still use your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs .","title":"Install with a Package Manager"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#manual-installation","text":"In order to manually install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip . You can check if you have these already installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) MkDocs supports Python versions 3.5, 3.6, 3.7, 3.8, and pypy3.","title":"Manual Installation"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#installing-python","text":"Install Python by downloading an installer appropriate for your system from python.org and running it. Note If you are installing Python on Windows, be sure to check the box to have Python added to your PATH if the installer offers such an option (it's normally off by default).","title":"Installing Python"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py","title":"Installing pip"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#installing-mkdocs","text":"Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0.15.3 Note If you would like manpages installed for MkDocs, the click-man tool can generate and install them for you. Simply run the following two commands: pip install click-man click-man --target path/to/man/pages mkdocs See the click-man documentation for an explanation of why manpages are not automatically generated and installed by pip. Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ).","title":"Installing MkDocs"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#getting-started","text":"Getting started is super easy. mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files. Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed: The dev-server also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory, or theme directory changes. Open the docs/index.md document in your text editor of choice, change the initial heading to MkLorum , and save your changes. Your browser will auto-reload and you should see your updated documentation immediately. Now try editing the configuration file: mkdocs.yml . Change the site_name setting to MkLorum and save the file. site_name: MkLorum Your browser should immediately reload, and you'll see your new site name take effect.","title":"Getting Started"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#adding-pages","text":"Now add a second page to your documentation: curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md As our documentation site will include some navigation headers, you may want to edit the configuration file and add some information about the order, title, and nesting of each page in the navigation header by adding a nav setting: site_name: MkLorum nav: - Home: index.md - About: about.md Save your changes and you'll now see a navigation bar with Home and About items on the left as well as Search , Previous , and Next items on the right. Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on any page. Notice that the search results include every occurrence of the search term on the site and links directly to the section of the page in which the search term appears. You get all of that with no effort or configuration on your part!","title":"Adding pages"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#theming-our-documentation","text":"Now change the configuration file to alter how the documentation is displayed by changing the theme. Edit the mkdocs.yml file and add a theme setting: site_name: MkLorum nav: - Home: index.md - About: about.md theme: readthedocs Save your changes, and you'll see the ReadTheDocs theme being used.","title":"Theming our documentation"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#changing-the-favicon-icon","text":"By default, MkDocs uses the MkDocs favicon icon. To use a different icon, create an img subdirectory in your docs_dir and copy your custom favicon.ico file to that directory. MkDocs will automatically detect and use that file as your favicon icon.","title":"Changing the Favicon Icon"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#building-the-site","text":"That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. After some time, files may be removed from the documentation but they will still reside in the site directory. To remove those stale files, just run mkdocs with the --clean switch. mkdocs build --clean","title":"Building the site"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#other-commands-and-options","text":"There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help","title":"Other Commands and Options"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#deploying","text":"The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. GitHub project pages and Amazon S3 may be good hosting options, depending upon your needs. Upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page.","title":"Deploying"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/02MkDocs%E5%AE%98%E7%BD%91.html#getting-help","text":"To get help with MkDocs, please use the discussion group , GitHub issues or the MkDocs IRC channel #mkdocs on freenode.","title":"Getting help"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html","text":"MkDoc Configuration \u00b6 Guide to all available configuration settings. https://www.mkdocs.org/user-guide/configuration/ Introduction \u00b6 Project settings are always configured by using a YAML configuration file in the project directory named mkdocs.yml . As a minimum this configuration file must contain the site_name setting. All other settings are optional. Project information \u00b6 site_name \u00b6 This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable. site_url \u00b6 Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header. default : null repo_url \u00b6 When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null repo_name \u00b6 When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url . edit_uri \u00b6 Path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null site_description \u00b6 Set the site description. This will add a meta tag to the generated HTML header. default : null site_author \u00b6 Set the name of the author. This will add a meta tag to the generated HTML header. default : null copyright \u00b6 Set the copyright information to be included in the documentation by the theme. default : null google_analytics \u00b6 Set the Google analytics tracking configuration. google_analytics: ['UA-36723568-3', 'mkdocs.org'] default : null remote_branch \u00b6 Set the remote branch to commit to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages remote_name \u00b6 Set the remote name to push to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : origin Documentation layout \u00b6 nav \u00b6 This setting is used to determine the format and layout of the global navigation for the site. A minimal navigation configuration could look like this: nav: - 'index.md' - 'about.md' All paths must be relative to the mkdocs.yml configuration file. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. See the section about [Meta-Data] on how MkDocs determines the page title of a document. nav: - Introduction: 'index.md' - 'about.md' - 'Issue Tracker': 'https://example.com/' In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use an appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: '../' - 'User Guide': 'user-guide.md' - 'Bug Tracker': '/bugs/' In the above example, two different styles of external links are used. First note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link which steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. Index files will always be listed first within a sub-section. Build directories \u00b6 theme \u00b6 Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit styling your docs . An example set of key/value pairs might look something like this: theme: name: mkdocs custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined: name: \u00b6 The string name of a known installed theme. For a list of available themes visit styling your docs . custom_dir: \u00b6 A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. See styling your docs for details if you would like to tweak an existing theme. See custom themes if you would like to build your own theme from the ground up. static_templates: \u00b6 A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the custom_dir defined in the theme configuration. (theme specific keywords) \u00b6 Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs' docs_dir \u00b6 The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs' site_dir \u00b6 The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' Note: If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories. extra_css \u00b6 Set a list of CSS files in your docs_dir to be included by the theme. For example, the following example will include the extra.css file within the css subdirectory in your docs_dir . extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list). extra_javascript \u00b6 Set a list of JavaScript files in your docs_dir to be included by the theme. See the example in extra_css for usage. default : [] (an empty list). extra_templates \u00b6 Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the variables that are available to templates. See the example in extra_css for usage. default : [] (an empty list). extra \u00b6 A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key value mapping. Preview controls \u00b6 use_directory_urls \u00b6 This setting controls the style used for linking to pages within the documentation. The following table demonstrates how the URLs used on the site differ when setting use_directory_urls to true or false . Source file use_directory_urls: true use_directory_urls: false index.md / /index.html api-guide.md /api-guide/ /api-guide.html about/license.md /about/license/ /about/license.html The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it creates links that point directly to the target file rather than the target directory . default : true strict \u00b6 Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. default : false dev_addr \u00b6 Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev-addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000' Formatting options \u00b6 markdown_extensions \u00b6 MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: True Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: True separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: True - sane_lists See Also: The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various third party extensions . Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list). plugins \u00b6 A list of plugins (with optional configuration settings) to use when building the site . See the Plugins documentation for full details. If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: [] default : ['search'] (the \"search\" plugin included with MkDocs). Search \u00b6 A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin: separator \u00b6 A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+' min_search_length \u00b6 An integer value that defines the minimum length for a search query. By default searches shorter than 3 chars in length are ignored as search result quality with short search terms is poor. However, for some use cases (such as documentation about Message Queues which might generate searches for 'MQ') it may be preferable to set a shorter limit. plugins: - search: min_search_length: 2 default : 3 lang \u00b6 A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: ar : Arabic da : Danish nl : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian ja : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish vi : Vietnamese You may contribute additional languages . Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally it is best to keep each instance of MkDocs to a single language. Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : ['en'] prebuild_index \u00b6 Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, check that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). There are two options for prebuilding the index: Using Node.js setting prebuild_index to True or node . This option requires that Node.js be installed and the command node be on the system path. If this feature is enabled and fails for any reason, a warning is issued. You may use the --strict flag when building to cause such a failure to raise an error instead. Using Lunr.py setting prebuild_index to python . Lunr.py is installed as part of mkdocs and guarantees compatibility with Lunr.js even on languages other than english. If you find substantial inconsistencies or problems please report it on Lunr.py's issues and fall back to the Node.js version. Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False","title":"MkDoc Configuration"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#mkdoc-configuration","text":"Guide to all available configuration settings. https://www.mkdocs.org/user-guide/configuration/","title":"MkDoc Configuration"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#introduction","text":"Project settings are always configured by using a YAML configuration file in the project directory named mkdocs.yml . As a minimum this configuration file must contain the site_name setting. All other settings are optional.","title":"Introduction"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#project-information","text":"","title":"Project information"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#site_name","text":"This is a required setting , and should be a string that is used as the main title for the project documentation. For example: site_name: Marshmallow Generator When rendering the theme this setting will be passed as the site_name context variable.","title":"site_name"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#site_url","text":"Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header. default : null","title":"site_url"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#repo_url","text":"When set, provides a link to your repository (GitHub, Bitbucket, GitLab, ...) on each page. repo_url: https://github.com/example/repository/ default : null","title":"repo_url"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#repo_name","text":"When set, provides the name for the link to your repository on each page. default : 'GitHub' , 'Bitbucket' or 'GitLab' if the repo_url matches those domains, otherwise the hostname from the repo_url .","title":"repo_name"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#edit_uri","text":"Path from the base repo_url to the docs directory when directly viewing a page, accounting for specifics of the repository host (e.g. GitHub, Bitbucket, etc), the branch, and the docs directory itself. MkDocs concatenates repo_url and edit_uri , and appends the input path of the page. When set, and if your theme supports it, provides a link directly to the page in your source repository. This makes it easier to find and edit the source for the page. If repo_url is not set, this option is ignored. On some themes, setting this option may cause an edit link to be used in place of a repository link. Other themes may show both links. The edit_uri supports query ('?') and fragment ('#') characters. For repository hosts that use a query or a fragment to access the files, the edit_uri might be set as follows. (Note the ? and # in the URI...) # Query string example edit_uri: '?query=root/path/docs/' # Hash fragment example edit_uri: '#root/path/docs/' For other repository hosts, simply specify the relative path to the docs directory. # Query string example edit_uri: root/path/docs/ Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. default : edit/master/docs/ for GitHub and GitLab repos or src/default/docs/ for a Bitbucket repo, if repo_url matches those domains, otherwise null","title":"edit_uri"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#site_description","text":"Set the site description. This will add a meta tag to the generated HTML header. default : null","title":"site_description"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#site_author","text":"Set the name of the author. This will add a meta tag to the generated HTML header. default : null","title":"site_author"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#copyright","text":"Set the copyright information to be included in the documentation by the theme. default : null","title":"copyright"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#google_analytics","text":"Set the Google analytics tracking configuration. google_analytics: ['UA-36723568-3', 'mkdocs.org'] default : null","title":"google_analytics"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#remote_branch","text":"Set the remote branch to commit to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : gh-pages","title":"remote_branch"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#remote_name","text":"Set the remote name to push to when using gh-deploy to deploy to Github Pages. This option can be overridden by a command line option in gh-deploy . default : origin","title":"remote_name"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#documentation-layout","text":"","title":"Documentation layout"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#nav","text":"This setting is used to determine the format and layout of the global navigation for the site. A minimal navigation configuration could look like this: nav: - 'index.md' - 'about.md' All paths must be relative to the mkdocs.yml configuration file. See the section on configuring pages and navigation for a more detailed breakdown, including how to create sub-sections. Navigation items may also include links to external sites. While titles are optional for internal links, they are required for external links. An external link may be a full URL or a relative URL. Any path which is not found in the files is assumed to be an external link. See the section about [Meta-Data] on how MkDocs determines the page title of a document. nav: - Introduction: 'index.md' - 'about.md' - 'Issue Tracker': 'https://example.com/' In the above example, the first two items point to local files while the third points to an external site. However, sometimes the MkDocs site is hosted in a subdirectory of a project's site and you may want to link to other parts of the same site without including the full domain. In that case, you may use an appropriate relative URL. site_url: https://example.com/foo/ nav: - Home: '../' - 'User Guide': 'user-guide.md' - 'Bug Tracker': '/bugs/' In the above example, two different styles of external links are used. First note that the site_url indicates that the MkDocs site is hosted in the /foo/ subdirectory of the domain. Therefore, the Home navigation item is a relative link which steps up one level to the server root and effectively points to https://example.com/ . The Bug Tracker item uses an absolute path from the server root and effectively points to https://example.com/bugs/ . Of course, the User Guide points to a local MkDocs page. default : By default nav will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs_dir and its sub-directories. Index files will always be listed first within a sub-section.","title":"nav"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#build-directories","text":"","title":"Build directories"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#theme","text":"Sets the theme and theme specific configuration of your documentation site. May be either a string or a set of key/value pairs. If a string, it must be the string name of a known installed theme. For a list of available themes visit styling your docs . An example set of key/value pairs might look something like this: theme: name: mkdocs custom_dir: my_theme_customizations/ static_templates: - sitemap.html include_sidebar: false If a set of key/value pairs, the following nested keys can be defined:","title":"theme"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#name","text":"The string name of a known installed theme. For a list of available themes visit styling your docs .","title":"name:"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#custom_dir","text":"A directory containing a custom theme. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. See styling your docs for details if you would like to tweak an existing theme. See custom themes if you would like to build your own theme from the ground up.","title":"custom_dir:"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#static_templates","text":"A list of templates to render as static pages. The templates must be located in either the theme's template directory or in the custom_dir defined in the theme configuration.","title":"static_templates:"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#theme-specific-keywords","text":"Any additional keywords supported by the theme can also be defined. See the documentation for the theme you are using for details. default : 'mkdocs'","title":"(theme specific keywords)"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#docs_dir","text":"The directory containing the documentation source markdown files. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'docs'","title":"docs_dir"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#site_dir","text":"The directory where the output HTML and other files are created. This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path from the root of your local file system. default : 'site' Note: If you are using source code control you will normally want to ensure that your build output files are not committed into the repository, and only keep the source files under version control. For example, if using git you might add the following line to your .gitignore file: site/ If you're using another source code control tool, you'll want to check its documentation on how to ignore specific directories.","title":"site_dir"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#extra_css","text":"Set a list of CSS files in your docs_dir to be included by the theme. For example, the following example will include the extra.css file within the css subdirectory in your docs_dir . extra_css: - css/extra.css - css/second_extra.css default : [] (an empty list).","title":"extra_css"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#extra_javascript","text":"Set a list of JavaScript files in your docs_dir to be included by the theme. See the example in extra_css for usage. default : [] (an empty list).","title":"extra_javascript"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#extra_templates","text":"Set a list of templates in your docs_dir to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about custom themes and specifically the section about the variables that are available to templates. See the example in extra_css for usage. default : [] (an empty list).","title":"extra_templates"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#extra","text":"A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes. For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this: extra: version: 1.0 default : By default extra will be an empty key value mapping.","title":"extra"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#preview-controls","text":"","title":"Preview controls"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#use_directory_urls","text":"This setting controls the style used for linking to pages within the documentation. The following table demonstrates how the URLs used on the site differ when setting use_directory_urls to true or false . Source file use_directory_urls: true use_directory_urls: false index.md / /index.html api-guide.md /api-guide/ /api-guide.html about/license.md /about/license/ /about/license.html The default style of use_directory_urls: true creates more user friendly URLs, and is usually what you'll want to use. The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it creates links that point directly to the target file rather than the target directory . default : true","title":"use_directory_urls"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#strict","text":"Determines how warnings are handled. Set to true to halt processing when a warning is raised. Set to false to print a warning and continue processing. default : false","title":"strict"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#dev_addr","text":"Determines the address used when running mkdocs serve . Must be of the format IP:PORT . Allows a custom default to be set without the need to pass it through the --dev-addr option every time the mkdocs serve command is called. default : '127.0.0.1:8000'","title":"dev_addr"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#formatting-options","text":"","title":"Formatting options"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#markdown_extensions","text":"MkDocs uses the Python Markdown library to translate Markdown files into HTML. Python Markdown supports a variety of extensions that customize how pages are formatted. This setting lets you enable a list of extensions beyond the ones that MkDocs uses by default ( meta , toc , tables , and fenced_code ). For example, to enable the SmartyPants typography extension , use: markdown_extensions: - smarty Some extensions provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given extension supports. See the documentation for the extension you are using to determine what options they support. For example, to enable permalinks in the (included) toc extension, use: markdown_extensions: - toc: permalink: True Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single extension, each option must be defined on a separate line: markdown_extensions: - toc: permalink: True separator: \"_\" Add an additional item to the list for each extension. If you have no configuration options to set for a specific extension, then simply omit options for that extension: markdown_extensions: - smarty - toc: permalink: True - sane_lists See Also: The Python-Markdown documentation provides a list of extensions which are available out-of-the-box. For a list of configuration options available for a given extension, see the documentation for that extension. You may also install and use various third party extensions . Consult the documentation provided by those extensions for installation instructions and available configuration options. default : [] (an empty list).","title":"markdown_extensions"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#plugins","text":"A list of plugins (with optional configuration settings) to use when building the site . See the Plugins documentation for full details. If the plugins config setting is defined in the mkdocs.yml config file, then any defaults (such as search ) are ignored and you need to explicitly re-enable the defaults if you would like to continue using them: plugins: - search - your_other_plugin To completely disable all plugins, including any defaults, set the plugins setting to an empty list: plugins: [] default : ['search'] (the \"search\" plugin included with MkDocs).","title":"plugins"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#search","text":"A search plugin is provided by default with MkDocs which uses lunr.js as a search engine. The following config options are available to alter the behavior of the search plugin:","title":"Search"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#separator","text":"A regular expression which matches the characters used as word separators when building the index. By default whitespace and the hyphen ( - ) are used. To add the dot ( . ) as a word separator you might do this: plugins: - search: separator: '[\\s\\-\\.]+' default : '[\\s\\-]+'","title":"separator"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#min_search_length","text":"An integer value that defines the minimum length for a search query. By default searches shorter than 3 chars in length are ignored as search result quality with short search terms is poor. However, for some use cases (such as documentation about Message Queues which might generate searches for 'MQ') it may be preferable to set a shorter limit. plugins: - search: min_search_length: 2 default : 3","title":"min_search_length"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#lang","text":"A list of languages to use when building the search index as identified by their ISO 639-1 language codes. With Lunr Languages , the following languages are supported: ar : Arabic da : Danish nl : Dutch en : English fi : Finnish fr : French de : German hu : Hungarian it : Italian ja : Japanese no : Norwegian pt : Portuguese ro : Romanian ru : Russian es : Spanish sv : Swedish th : Thai tr : Turkish vi : Vietnamese You may contribute additional languages . Warning While search does support using multiple languages together, it is best not to add additional languages unless you really need them. Each additional language adds significant bandwidth requirements and uses more browser resources. Generally it is best to keep each instance of MkDocs to a single language. Note Lunr Languages does not currently include support for Chinese or other Asian languages. However, some users have reported decent results using Japanese. default : ['en']","title":"lang"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/03MkDocConfigration.html#prebuild_index","text":"Optionally generates a pre-built index of all pages, which provides some performance improvements for larger sites. Before enabling, check that the theme you are using explicitly supports using a prebuilt index (the builtin themes do). There are two options for prebuilding the index: Using Node.js setting prebuild_index to True or node . This option requires that Node.js be installed and the command node be on the system path. If this feature is enabled and fails for any reason, a warning is issued. You may use the --strict flag when building to cause such a failure to raise an error instead. Using Lunr.py setting prebuild_index to python . Lunr.py is installed as part of mkdocs and guarantees compatibility with Lunr.js even on languages other than english. If you find substantial inconsistencies or problems please report it on Lunr.py's issues and fall back to the Node.js version. Note On smaller sites, using a pre-built index is not recommended as it creates a significant increase is bandwidth requirements with little to no noticeable improvement to your users. However, for larger sites (hundreds of pages), the bandwidth increase is relatively small and your users will notice a significant improvement in search performance. default : False","title":"prebuild_index"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html","text":"Material for MkDocs Getting started \u00b6 https://squidfunk.github.io/mkdocs-material Installation \u00b6 While there are several ways of installing Material fo r MkDocs, the recommended methods are either by using pip \u2013 the Python package manager \u2013 or by pulling the official Docker image . with pip recommended \u00b6 Material for MkDocs can be installed with pip : pip install mkdocs-material Note that this will automatically install compatible versions of MkDocs , Markdown , Pygments and PyMdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. Installation in a virtual environment The best way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . Don't know what this is or how to set it up? We recommend to start by reading a tutorial on virtual environments for Python. Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you could be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and Material for MkDocs through pip , so both packages end up in different locations. MkDocs only checks its install location for themes. with docker recommended \u00b6 The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. Start the development server in your project root \u2013 the folder where mkdocs.yml resides \u2014 with: Unix docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows #docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material docker run -d --name demo-mkdocs --restart always -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material with git \u00b6 Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . Configuration \u00b6 Depending on your installation method, you can now add the following lines to mkdocs.yml in your project root. If you installed Material for MkDocs using a package manager, add: theme : name : material If you cloned Material for MkDocs from GitHub add: theme : name : null custom_dir : mkdocs-material/material MkDocs includes a development server, so you can preview your changes as you write your documentation. The development server can be started with the following command: mkdocs serve Point your browser to http://localhost:8000 and your documentation should greet you in a new look. If you're starting from scratch, the following configuration can be used as a starting point: Example configuration This is an excerpt from the mkdocs.yml used to render these pages: # Project information site_name : Material for MkDocs site_description : A Material Design theme for MkDocs site_author : Martin Donath site_url : https://squidfunk.github.io/mkdocs-material/ # Repository repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material # Copyright copyright : Copyright &copy; 2016 - 2020 Martin Donath # Configuration theme : name : material language : en palette : primary : indigo accent : indigo font : text : Roboto code : Roboto Mono # Extras extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk # Google Analytics google_analytics : - UA-XXXXXXXX-X - auto # Extensions markdown_extensions : - admonition - codehilite : guess_lang : false - toc : permalink : true Feature flags \u00b6 These optional features are hidden behind flags and can be explicitly enabled in mkdocs.yml . Instant loading :hatching_chick: \u00b6 The (still experimental) instant loading feature will intercept clicks on all internal links and dispatch them directly via XHR without a full page reload. It can be enabled from mkdocs.yml with: theme : features : - instant The resulting page is parsed and injected and all event handlers and components are automatically rebound. This means that Material for MkDocs behaves like a Single Page Application , which is especially useful for large documentation sites that come with a huge search index, as the search index will now remain intact in-between document switches. Tabs \u00b6 The tabs feature will render top-level subsections in another navigational layer below the header on big screens (but leave them untouched on mobile). It can be enabled from mkdocs.yml with: theme : features : - tabs Note that all top-level pages (i.e. all top-level entries that directly refer to an *.md file) defined inside the nav entry of mkdocs.yml will be grouped under the first tab which will receive the title of the first page. This means that there will effectively be no collapsible subsections for the first tab, as each subsection is rendered as another tab. If you want more fine-grained control, i.e., collapsible subsections for the first tab, you can move all top-level pages into a subsection , so that the top-level is entirely made up of subsections. Note that tabs are only shown for larger screens, so make sure that navigation is plausible on mobile devices. As an example, see the mkdocs.yml used to render these pages. Language \u00b6 Default: en Material for MkDocs supports internationalization (i18n) and provides translations for all template variables and labels. You can set the language from mkdocs.yml with: theme : language : en The following language codes are supported: .md-language-list { -webkit-columns: 2; -moz-columns: 2; columns: 2; } .md-language-list li { -webkit-column-break-inside: avoid; page-break-inside: avoid; break-inside: avoid; } af / Afrikaans ar / Arabic bn / Bengali (Bangla) ca / Catalan cs / Czech da / Danish de / German en / English es / Spanish et / Estonian fa / Persian (Farsi) fi / Finnish fr / French gl / Galician gr / Greek he / Hebrew hi / Hindi hr / Croatian hu / Hungarian id / Indonesian it / Italian ja / Japanese kr / Korean my / Burmese nl / Dutch nn / Norwegian (Nynorsk) no / Norwegian pl / Polish pt / Portuguese ro / Romanian ru / Russian sh / Serbo-Croatian si / Slovenian sk / Slovak sr / Serbian sv / Swedish th / Thai tr / Turkish uk / Ukrainian vi / Vietnamese zh / Chinese (Simplified) zh-Hant / Chinese (Traditional) zh-TW / Chinese (Taiwanese) Add language While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is inferred from the selected language, but can also be set with: theme : direction : rtl Color scheme \u00b6 Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set from mkdocs.yml : theme : palette : scheme : slate Click on a color name to change the color scheme of the theme: .md-typeset button[data-md-color-scheme] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-scheme]:hover { opacity: 0.75; } .md-typeset button[data-md-color-scheme] > code { display: block; color: var(--md-primary-bg-color); background-color: var(--md-primary-fg-color); } default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { var attr = \"data-md-color-scheme\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) }) The color scheme can also be set based on user preference , which makes use of the prefers-color-scheme media query. This can be done by adding the following to mkdocs.yml : theme : palette : scheme : preference Color palette \u00b6 The Material Design color palette comes with 20 hues, all of which are included with Material for MkDocs. Primary and accent colors can be set from the project root's mkdocs.yml : theme : palette : primary : indigo accent : indigo If the colors are set with these configuration options, an additional CSS file that includes the hues of the color palette is automatically included and linked from the template. Custom colors with CSS variables Material for MkDocs defines all colors as CSS variables. If you want to customize the colors beyond the palette (e.g. to use your brand's colors), you can add an additional stylesheet and override the defaults: : root { /* Default color shades */ -- md-default-fg-color : ... ; -- md-default-fg-color--light : ... ; -- md-default-fg-color--lighter : ... ; -- md-default-fg-color--lightest : ... ; -- md-default-bg-color : ... ; -- md-default-bg-color--light : ... ; -- md-default-bg-color--lighter : ... ; -- md-default-bg-color--lightest : ... ; /* Primary color shades */ -- md-primary-fg-color : ... ; -- md-primary-fg-color--light : ... ; -- md-primary-fg-color--dark : ... ; -- md-primary-bg-color : ... ; -- md-primary-bg-color--light : ... ; /* Accent color shades */ -- md-accent-fg-color : ... ; -- md-accent-fg-color--transparent : ... ; -- md-accent-bg-color : ... ; -- md-accent-bg-color--light : ... ; } : root > * { /* Code block color shades */ -- md-code-bg-color : ... ; -- md-code-fg-color : ... ; } Primary color \u00b6 Default: indigo Click on a color name to change the primary color of the theme: .md-typeset button[data-md-color-primary] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-primary]:hover { opacity: 0.75; } .md-typeset button[data-md-color-primary] > code { display: block; color: var(--md-primary-bg-color); background-color: var(--md-primary-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { var attr = \"data-md-color-primary\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) }) Accent color \u00b6 Default: indigo Click on a color name to change the accent color of the theme: .md-typeset button[data-md-color-accent] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-accent]:hover { opacity: 0.75; } .md-typeset button[data-md-color-accent] > code { display: block; color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { var attr = \"data-md-color-accent\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) }) Fonts \u00b6 Default: Roboto and Roboto Mono The Roboto font family is the default font included with the theme, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can be changed to any valid webfont, like for example the Ubuntu font family : theme : font : text : Ubuntu code : Ubuntu Mono The text font will be loaded in weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use Google Fonts for data privacy reasons, just set font to false : theme : font : false Icons \u00b6 Default: material/library and fontawesome/brands/git-alt Material for MkDocs uses icons in several places. Currently, the following icons can be changed from mkdocs.yml : the logo icon, the repository icon and the social link icons . While the social link icons are tied to the respective entries, the other icons can be changed by referencing a valid path (without the trailing .svg ) relative to the .icons folder which comes with the theme: theme : icon : logo : material/library repo : fontawesome/brands/git-alt All icons are directly inlined as *.svg files, so no further requests will be made. Icon sets which are bundled with Material for MkDocs: Material Design icons ( material ): 5.1k icons FontAwesome icons ( fontawesome ): 1.6k icons GitHub's Octicons ( octicons ): 200 icons You can use all those icons directly from :fontawesome-brands-markdown: Markdown ! Logo \u00b6 Default: icon set through theme.icon.logo If you want to replace the icon in the header (screen) and drawer (mobile) with your brand's logo, you can place an image file in your docs folder and use the following option in mkdocs.yml : theme : logo : images/logo.svg Ideally, the image should be a square with a minimum resolution of 96x96, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header and drawer. Favicon \u00b6 Default: assets/images/favicon.png The default favicon can be changed with: theme : favicon : images/favicon.png Extras \u00b6 Adding a source repository \u00b6 To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material The name of the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for GitHub and GitLab, the number of stars and forks is shown. Note that the repository icon can be explicitly set through theme.icon.repo . Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not. Adding social links \u00b6 Social accounts can be linked in the footer of the documentation using the icons which are bundled with the theme. Note that each icon must point to a valid path (without the trailing .svg ) relative to the .icons folder which comes with the theme: extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk By default, the link title will be set to the domain name, e.g. github.com . If you want to set a discernable name, e.g., to improve your Lighthouse score, you can set the name attribute on each social link. Adding a Web App Manifest \u00b6 A Web App Manifest is a simple JSON file that tells the browser about your web application and how it should behave when installed on the user's mobile device or desktop. You can specify such a manifest in mkdocs.yml : extra : manifest : manifest.webmanifest Integrations \u00b6 Google Analytics \u00b6 MkDocs makes it easy to integrate site tracking with Google Analytics. To enable tracking, which is disabled by default, you must add your tracking identifier to mkdocs.yml : google_analytics : - UA-XXXXXXXX-X - auto Besides basic page views, site search can also be tracked to better understand how people use your documentation and what they expect to find. To enable search tracking: Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab. Scroll down and enable site search settings Set the query parameter to q . Disqus \u00b6 Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in mkdocs.yml : extra : disqus : your-shortname The comments section is inserted on every page, except the index page . The necessary JavaScript is automatically included. Requirements Note that site_url must be set in mkdocs.yml for the Disqus integration to load properly. Disqus can also be enabled or disabled for specific pages using Metadata . Extensions \u00b6 Markdown comes with several very useful extensions, the following of which are not enabled by default but highly recommended, so enabling them should definitely be a good idea: markdown_extensions : - admonition - codehilite : guess_lang : false - toc : permalink : true See the following list of extensions supported by Material for MkDocs including some more information on configuration and usage: [Admonition][25] [Codehilite][26] [Footnotes][27] [Metadata][28] [Permalinks][29] [PyMdown Extensions][30] Plugins \u00b6 MkDocs' plugin architecture makes it possible to add pre- or post-processing steps that sit between the theme and your documentation. For more information, see the following list of plugins tested and supported by Material for MkDocs including more information regarding installation and usage: [Search][31] (enabled by default) [Minification][32] [Revision date][33] [Awesome pages][34] For further reference, the MkDocs wiki contains a list of all [available plugins][35].","title":"Material for MkDocs Getting started"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#material-for-mkdocs-getting-started","text":"https://squidfunk.github.io/mkdocs-material","title":"Material for MkDocs Getting started"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#installation","text":"While there are several ways of installing Material fo r MkDocs, the recommended methods are either by using pip \u2013 the Python package manager \u2013 or by pulling the official Docker image .","title":"Installation"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#with-pip-recommended","text":"Material for MkDocs can be installed with pip : pip install mkdocs-material Note that this will automatically install compatible versions of MkDocs , Markdown , Pygments and PyMdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. Installation in a virtual environment The best way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . Don't know what this is or how to set it up? We recommend to start by reading a tutorial on virtual environments for Python. Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you could be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and Material for MkDocs through pip , so both packages end up in different locations. MkDocs only checks its install location for themes.","title":"with pip recommended"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#with-docker-recommended","text":"The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. Start the development server in your project root \u2013 the folder where mkdocs.yml resides \u2014 with: Unix docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows #docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material docker run -d --name demo-mkdocs --restart always -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material","title":"with docker recommended"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#with-git","text":"Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material .","title":"with git"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#configuration","text":"Depending on your installation method, you can now add the following lines to mkdocs.yml in your project root. If you installed Material for MkDocs using a package manager, add: theme : name : material If you cloned Material for MkDocs from GitHub add: theme : name : null custom_dir : mkdocs-material/material MkDocs includes a development server, so you can preview your changes as you write your documentation. The development server can be started with the following command: mkdocs serve Point your browser to http://localhost:8000 and your documentation should greet you in a new look. If you're starting from scratch, the following configuration can be used as a starting point: Example configuration This is an excerpt from the mkdocs.yml used to render these pages: # Project information site_name : Material for MkDocs site_description : A Material Design theme for MkDocs site_author : Martin Donath site_url : https://squidfunk.github.io/mkdocs-material/ # Repository repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material # Copyright copyright : Copyright &copy; 2016 - 2020 Martin Donath # Configuration theme : name : material language : en palette : primary : indigo accent : indigo font : text : Roboto code : Roboto Mono # Extras extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk # Google Analytics google_analytics : - UA-XXXXXXXX-X - auto # Extensions markdown_extensions : - admonition - codehilite : guess_lang : false - toc : permalink : true","title":"Configuration"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#feature-flags","text":"These optional features are hidden behind flags and can be explicitly enabled in mkdocs.yml .","title":"Feature flags"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#instant-loading-hatching_chick","text":"The (still experimental) instant loading feature will intercept clicks on all internal links and dispatch them directly via XHR without a full page reload. It can be enabled from mkdocs.yml with: theme : features : - instant The resulting page is parsed and injected and all event handlers and components are automatically rebound. This means that Material for MkDocs behaves like a Single Page Application , which is especially useful for large documentation sites that come with a huge search index, as the search index will now remain intact in-between document switches.","title":"Instant loading :hatching_chick:"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#tabs","text":"The tabs feature will render top-level subsections in another navigational layer below the header on big screens (but leave them untouched on mobile). It can be enabled from mkdocs.yml with: theme : features : - tabs Note that all top-level pages (i.e. all top-level entries that directly refer to an *.md file) defined inside the nav entry of mkdocs.yml will be grouped under the first tab which will receive the title of the first page. This means that there will effectively be no collapsible subsections for the first tab, as each subsection is rendered as another tab. If you want more fine-grained control, i.e., collapsible subsections for the first tab, you can move all top-level pages into a subsection , so that the top-level is entirely made up of subsections. Note that tabs are only shown for larger screens, so make sure that navigation is plausible on mobile devices. As an example, see the mkdocs.yml used to render these pages.","title":"Tabs"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#language","text":"Default: en Material for MkDocs supports internationalization (i18n) and provides translations for all template variables and labels. You can set the language from mkdocs.yml with: theme : language : en The following language codes are supported: .md-language-list { -webkit-columns: 2; -moz-columns: 2; columns: 2; } .md-language-list li { -webkit-column-break-inside: avoid; page-break-inside: avoid; break-inside: avoid; } af / Afrikaans ar / Arabic bn / Bengali (Bangla) ca / Catalan cs / Czech da / Danish de / German en / English es / Spanish et / Estonian fa / Persian (Farsi) fi / Finnish fr / French gl / Galician gr / Greek he / Hebrew hi / Hindi hr / Croatian hu / Hungarian id / Indonesian it / Italian ja / Japanese kr / Korean my / Burmese nl / Dutch nn / Norwegian (Nynorsk) no / Norwegian pl / Polish pt / Portuguese ro / Romanian ru / Russian sh / Serbo-Croatian si / Slovenian sk / Slovak sr / Serbian sv / Swedish th / Thai tr / Turkish uk / Ukrainian vi / Vietnamese zh / Chinese (Simplified) zh-Hant / Chinese (Traditional) zh-TW / Chinese (Taiwanese) Add language While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is inferred from the selected language, but can also be set with: theme : direction : rtl","title":"Language"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#color-scheme","text":"Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set from mkdocs.yml : theme : palette : scheme : slate Click on a color name to change the color scheme of the theme: .md-typeset button[data-md-color-scheme] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-scheme]:hover { opacity: 0.75; } .md-typeset button[data-md-color-scheme] > code { display: block; color: var(--md-primary-bg-color); background-color: var(--md-primary-fg-color); } default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { var attr = \"data-md-color-scheme\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) }) The color scheme can also be set based on user preference , which makes use of the prefers-color-scheme media query. This can be done by adding the following to mkdocs.yml : theme : palette : scheme : preference","title":"Color scheme"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#color-palette","text":"The Material Design color palette comes with 20 hues, all of which are included with Material for MkDocs. Primary and accent colors can be set from the project root's mkdocs.yml : theme : palette : primary : indigo accent : indigo If the colors are set with these configuration options, an additional CSS file that includes the hues of the color palette is automatically included and linked from the template. Custom colors with CSS variables Material for MkDocs defines all colors as CSS variables. If you want to customize the colors beyond the palette (e.g. to use your brand's colors), you can add an additional stylesheet and override the defaults: : root { /* Default color shades */ -- md-default-fg-color : ... ; -- md-default-fg-color--light : ... ; -- md-default-fg-color--lighter : ... ; -- md-default-fg-color--lightest : ... ; -- md-default-bg-color : ... ; -- md-default-bg-color--light : ... ; -- md-default-bg-color--lighter : ... ; -- md-default-bg-color--lightest : ... ; /* Primary color shades */ -- md-primary-fg-color : ... ; -- md-primary-fg-color--light : ... ; -- md-primary-fg-color--dark : ... ; -- md-primary-bg-color : ... ; -- md-primary-bg-color--light : ... ; /* Accent color shades */ -- md-accent-fg-color : ... ; -- md-accent-fg-color--transparent : ... ; -- md-accent-bg-color : ... ; -- md-accent-bg-color--light : ... ; } : root > * { /* Code block color shades */ -- md-code-bg-color : ... ; -- md-code-fg-color : ... ; }","title":"Color palette"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#primary-color","text":"Default: indigo Click on a color name to change the primary color of the theme: .md-typeset button[data-md-color-primary] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-primary]:hover { opacity: 0.75; } .md-typeset button[data-md-color-primary] > code { display: block; color: var(--md-primary-bg-color); background-color: var(--md-primary-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { var attr = \"data-md-color-primary\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) })","title":"Primary color"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#accent-color","text":"Default: indigo Click on a color name to change the accent color of the theme: .md-typeset button[data-md-color-accent] { cursor: pointer; transition: opacity 250ms; } .md-typeset button[data-md-color-accent]:hover { opacity: 0.75; } .md-typeset button[data-md-color-accent] > code { display: block; color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { var attr = \"data-md-color-accent\" button.addEventListener(\"click\", function() { document.body.setAttribute(attr, this.getAttribute(attr)) }) })","title":"Accent color"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#fonts","text":"Default: Roboto and Roboto Mono The Roboto font family is the default font included with the theme, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can be changed to any valid webfont, like for example the Ubuntu font family : theme : font : text : Ubuntu code : Ubuntu Mono The text font will be loaded in weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use Google Fonts for data privacy reasons, just set font to false : theme : font : false","title":"Fonts"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#icons","text":"Default: material/library and fontawesome/brands/git-alt Material for MkDocs uses icons in several places. Currently, the following icons can be changed from mkdocs.yml : the logo icon, the repository icon and the social link icons . While the social link icons are tied to the respective entries, the other icons can be changed by referencing a valid path (without the trailing .svg ) relative to the .icons folder which comes with the theme: theme : icon : logo : material/library repo : fontawesome/brands/git-alt All icons are directly inlined as *.svg files, so no further requests will be made. Icon sets which are bundled with Material for MkDocs: Material Design icons ( material ): 5.1k icons FontAwesome icons ( fontawesome ): 1.6k icons GitHub's Octicons ( octicons ): 200 icons You can use all those icons directly from :fontawesome-brands-markdown: Markdown !","title":"Icons"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#logo","text":"Default: icon set through theme.icon.logo If you want to replace the icon in the header (screen) and drawer (mobile) with your brand's logo, you can place an image file in your docs folder and use the following option in mkdocs.yml : theme : logo : images/logo.svg Ideally, the image should be a square with a minimum resolution of 96x96, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header and drawer.","title":"Logo"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#favicon","text":"Default: assets/images/favicon.png The default favicon can be changed with: theme : favicon : images/favicon.png","title":"Favicon"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#extras","text":"","title":"Extras"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#adding-a-source-repository","text":"To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material The name of the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for GitHub and GitLab, the number of stars and forks is shown. Note that the repository icon can be explicitly set through theme.icon.repo . Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not.","title":"Adding a source repository"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#adding-social-links","text":"Social accounts can be linked in the footer of the documentation using the icons which are bundled with the theme. Note that each icon must point to a valid path (without the trailing .svg ) relative to the .icons folder which comes with the theme: extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk By default, the link title will be set to the domain name, e.g. github.com . If you want to set a discernable name, e.g., to improve your Lighthouse score, you can set the name attribute on each social link.","title":"Adding social links"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#adding-a-web-app-manifest","text":"A Web App Manifest is a simple JSON file that tells the browser about your web application and how it should behave when installed on the user's mobile device or desktop. You can specify such a manifest in mkdocs.yml : extra : manifest : manifest.webmanifest","title":"Adding a Web App Manifest"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#integrations","text":"","title":"Integrations"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#google-analytics","text":"MkDocs makes it easy to integrate site tracking with Google Analytics. To enable tracking, which is disabled by default, you must add your tracking identifier to mkdocs.yml : google_analytics : - UA-XXXXXXXX-X - auto Besides basic page views, site search can also be tracked to better understand how people use your documentation and what they expect to find. To enable search tracking: Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab. Scroll down and enable site search settings Set the query parameter to q .","title":"Google Analytics"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#disqus","text":"Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in mkdocs.yml : extra : disqus : your-shortname The comments section is inserted on every page, except the index page . The necessary JavaScript is automatically included. Requirements Note that site_url must be set in mkdocs.yml for the Disqus integration to load properly. Disqus can also be enabled or disabled for specific pages using Metadata .","title":"Disqus"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#extensions","text":"Markdown comes with several very useful extensions, the following of which are not enabled by default but highly recommended, so enabling them should definitely be a good idea: markdown_extensions : - admonition - codehilite : guess_lang : false - toc : permalink : true See the following list of extensions supported by Material for MkDocs including some more information on configuration and usage: [Admonition][25] [Codehilite][26] [Footnotes][27] [Metadata][28] [Permalinks][29] [PyMdown Extensions][30]","title":"Extensions"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/04Material%20for%20MkDocs%20Getting%20started.html#plugins","text":"MkDocs' plugin architecture makes it possible to add pre- or post-processing steps that sit between the theme and your documentation. For more information, see the following list of plugins tested and supported by Material for MkDocs including more information regarding installation and usage: [Search][31] (enabled by default) [Minification][32] [Revision date][33] [Awesome pages][34] For further reference, the MkDocs wiki contains a list of all [available plugins][35].","title":"Plugins"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/05%E6%90%AD%E5%BB%BAGitPages.html","text":"\u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2(\u542b\u652f\u6301\u7684markdown\u8bed\u6cd5) \u00b6 https://github.com/cyent/markdown-with-mkdocs-material https://cyent.github.io/markdown-with-mkdocs-material/ \u672c\u6587\u4e3b\u9898 \u00b6 mkdocs-material\u5165\u95e8\uff0c\u5305\u62ec\u5b89\u88c5\u3001\u8fd0\u884c\u3001\u53d1\u5e03\u81f3github-pages\u53ca\u4e2a\u4eba\u7ad9\u70b9 markdown\u8bed\u6cd5\uff0c\u5305\u62ec\u4f20\u7edf\u8bed\u6cd5\u548cmkdocs-material\u652f\u6301\u7684\u6269\u5c55\u8bed\u6cd5 mkdocs-material\u662f\u4ec0\u4e48 \u00b6 \u7b26\u5408google material ui\u89c4\u8303\u7684\u9759\u6001\u6587\u6863\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u4f7f\u7528markdown\u8fdb\u884c\u6587\u6863\u4e66\u5199 mkdocs python\u7f16\u5199\u7684markdown\u89e3\u91ca\u5668\u3001\u7f16\u8bd1\u5668\uff0c\u5e26\u6709\u672c\u5730cli\u5de5\u5177 \u81ea\u5e26\u57fa\u4e8eTornado\u7684\u5c0f\u578bhttp\u670d\u52a1\uff0c\u7528\u4e8e\u672c\u5730\u8c03\u8bd5 \u5185\u7f6e\u4e00\u952e\u5f0f\u53d1\u5e03\u81f3GitHub Pages \u5185\u7f6emkdocs\u98ce\u683c\u3001readthedocs\u98ce\u683c\u7684\u4e3b\u9898\uff0c\u5e76\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301\u8c03\u7528python\u6a21\u5757\u5b9e\u73b0\u8bed\u6cd5\u53ca\u6e32\u67d3\u7684\u6269\u5c55 mkdocs-material python\u6a21\u5757\uff0c\u7b26\u5408google material ui\u89c4\u8303\u7684mkdocs\u81ea\u5b9a\u4e49\u4e3b\u9898 \u9488\u5bf9\u7279\u5b9a\u8bed\u6cd5\u3001\u529f\u80fd\u505a\u4e86\u6e32\u67d3\u4f18\u5316 \u6839\u636e\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u9875\u9762\u5c3a\u5bf8\u81ea\u52a8\u7f29\u653e\uff0c\u5bf9PC\u3001\u79fb\u52a8\u8bbe\u5907\u90fd\u53cb\u597d \u4e30\u5bcc\u7684\u9875\u9762\u914d\u8272\uff0c\u591a\u8fbe19\u79cd\u4e3b\u4f53\u914d\u8272\u548c16\u79cd\u60ac\u505c\u94fe\u63a5\u6587\u5b57\u914d\u8272 \u6700\u4f73\u5b9e\u8df5: \u5efa\u8bae\u4ec5\u4f7f\u7528 mkdocs-material \u5b98\u7f51\u652f\u6301\u7684\u8bed\u6cd5\u3001\u529f\u80fd\uff0c\u8fd9\u6837\u4e0d\u4f1a\u6709\u6e32\u67d3\u65b9\u9762\u7684\u5f02\u5e38\uff0c\u9664\u975e\u81ea\u5df1\u5bf9mkdocs\u3001mkdocs-material\u3001html\u3001js\u3001css\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002 \u672c\u6587\u6240\u6709\u9610\u8ff0\u7684\u8bed\u6cd5\u5747\u662fmkdocs-material\u5b98\u7f51\u63a8\u8350\u7684\u3002 \u5199\u5728\u524d\u9762 \u00b6 \u672c\u6587\u5927\u90e8\u5206\u5185\u5bb9\u5747\u662f\u4e2a\u4eba\u7406\u89e3\uff0c\u4e0d\u4fdd\u8bc1\u51c6\u786e\u6027\u3002 \u672c\u6587\u4e3b\u8981\u662f\u9610\u8ff0markdown\u8bed\u6cd5\uff0c\u56e0\u6b64\u5173\u4e8emkdocs-material\u7684\u9ad8\u7ea7\u914d\u7f6e\u3001python markdown\u548cpymdowx\u6a21\u5757\u6240\u652f\u6301\u7684markdown\u8bed\u6cd5\u4e0d\u5728\u672c\u6587\u9610\u8ff0\u8303\u56f4\u3002\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u5230\u76f8\u5e94\u5b98\u7f51\u4e86\u89e3\uff0c\u5177\u4f53\u5982\u4e0b: mkdocs mkdocs-material python markdown pymdownx","title":"\u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2(\u542b\u652f\u6301\u7684markdown\u8bed\u6cd5)"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/05%E6%90%AD%E5%BB%BAGitPages.html#mkdocs-materialmarkdown","text":"https://github.com/cyent/markdown-with-mkdocs-material https://cyent.github.io/markdown-with-mkdocs-material/","title":"\u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2(\u542b\u652f\u6301\u7684markdown\u8bed\u6cd5)"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/05%E6%90%AD%E5%BB%BAGitPages.html#_1","text":"mkdocs-material\u5165\u95e8\uff0c\u5305\u62ec\u5b89\u88c5\u3001\u8fd0\u884c\u3001\u53d1\u5e03\u81f3github-pages\u53ca\u4e2a\u4eba\u7ad9\u70b9 markdown\u8bed\u6cd5\uff0c\u5305\u62ec\u4f20\u7edf\u8bed\u6cd5\u548cmkdocs-material\u652f\u6301\u7684\u6269\u5c55\u8bed\u6cd5","title":"\u672c\u6587\u4e3b\u9898"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/05%E6%90%AD%E5%BB%BAGitPages.html#mkdocs-material","text":"\u7b26\u5408google material ui\u89c4\u8303\u7684\u9759\u6001\u6587\u6863\u7f51\u7ad9\u751f\u6210\u5668\uff0c\u4f7f\u7528markdown\u8fdb\u884c\u6587\u6863\u4e66\u5199 mkdocs python\u7f16\u5199\u7684markdown\u89e3\u91ca\u5668\u3001\u7f16\u8bd1\u5668\uff0c\u5e26\u6709\u672c\u5730cli\u5de5\u5177 \u81ea\u5e26\u57fa\u4e8eTornado\u7684\u5c0f\u578bhttp\u670d\u52a1\uff0c\u7528\u4e8e\u672c\u5730\u8c03\u8bd5 \u5185\u7f6e\u4e00\u952e\u5f0f\u53d1\u5e03\u81f3GitHub Pages \u5185\u7f6emkdocs\u98ce\u683c\u3001readthedocs\u98ce\u683c\u7684\u4e3b\u9898\uff0c\u5e76\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301\u8c03\u7528python\u6a21\u5757\u5b9e\u73b0\u8bed\u6cd5\u53ca\u6e32\u67d3\u7684\u6269\u5c55 mkdocs-material python\u6a21\u5757\uff0c\u7b26\u5408google material ui\u89c4\u8303\u7684mkdocs\u81ea\u5b9a\u4e49\u4e3b\u9898 \u9488\u5bf9\u7279\u5b9a\u8bed\u6cd5\u3001\u529f\u80fd\u505a\u4e86\u6e32\u67d3\u4f18\u5316 \u6839\u636e\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u9875\u9762\u5c3a\u5bf8\u81ea\u52a8\u7f29\u653e\uff0c\u5bf9PC\u3001\u79fb\u52a8\u8bbe\u5907\u90fd\u53cb\u597d \u4e30\u5bcc\u7684\u9875\u9762\u914d\u8272\uff0c\u591a\u8fbe19\u79cd\u4e3b\u4f53\u914d\u8272\u548c16\u79cd\u60ac\u505c\u94fe\u63a5\u6587\u5b57\u914d\u8272 \u6700\u4f73\u5b9e\u8df5: \u5efa\u8bae\u4ec5\u4f7f\u7528 mkdocs-material \u5b98\u7f51\u652f\u6301\u7684\u8bed\u6cd5\u3001\u529f\u80fd\uff0c\u8fd9\u6837\u4e0d\u4f1a\u6709\u6e32\u67d3\u65b9\u9762\u7684\u5f02\u5e38\uff0c\u9664\u975e\u81ea\u5df1\u5bf9mkdocs\u3001mkdocs-material\u3001html\u3001js\u3001css\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002 \u672c\u6587\u6240\u6709\u9610\u8ff0\u7684\u8bed\u6cd5\u5747\u662fmkdocs-material\u5b98\u7f51\u63a8\u8350\u7684\u3002","title":"mkdocs-material\u662f\u4ec0\u4e48"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/05%E6%90%AD%E5%BB%BAGitPages.html#_2","text":"\u672c\u6587\u5927\u90e8\u5206\u5185\u5bb9\u5747\u662f\u4e2a\u4eba\u7406\u89e3\uff0c\u4e0d\u4fdd\u8bc1\u51c6\u786e\u6027\u3002 \u672c\u6587\u4e3b\u8981\u662f\u9610\u8ff0markdown\u8bed\u6cd5\uff0c\u56e0\u6b64\u5173\u4e8emkdocs-material\u7684\u9ad8\u7ea7\u914d\u7f6e\u3001python markdown\u548cpymdowx\u6a21\u5757\u6240\u652f\u6301\u7684markdown\u8bed\u6cd5\u4e0d\u5728\u672c\u6587\u9610\u8ff0\u8303\u56f4\u3002\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u5230\u76f8\u5e94\u5b98\u7f51\u4e86\u89e3\uff0c\u5177\u4f53\u5982\u4e0b: mkdocs mkdocs-material python markdown pymdownx","title":"\u5199\u5728\u524d\u9762"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html","text":"\u6b22\u8fce\u4f7f\u7528 Cmd Markdown \u7f16\u8f91\u9605\u8bfb\u5668 \u00b6 \u6211\u4eec\u7406\u89e3\u60a8\u9700\u8981\u66f4\u4fbf\u6377\u66f4\u9ad8\u6548\u7684\u5de5\u5177\u8bb0\u5f55\u601d\u60f3\uff0c\u6574\u7406\u7b14\u8bb0\u3001\u77e5\u8bc6\uff0c\u5e76\u5c06\u5176\u4e2d\u627f\u8f7d\u7684\u4ef7\u503c\u4f20\u64ad\u7ed9\u4ed6\u4eba\uff0c Cmd Markdown \u662f\u6211\u4eec\u7ed9\u51fa\u7684\u7b54\u6848 \u2014\u2014 \u6211\u4eec\u4e3a\u8bb0\u5f55\u601d\u60f3\u548c\u5206\u4eab\u77e5\u8bc6\u63d0\u4f9b\u66f4\u4e13\u4e1a\u7684\u5de5\u5177\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Cmd Markdown\uff1a \u6574\u7406\u77e5\u8bc6\uff0c\u5b66\u4e60\u7b14\u8bb0 \u53d1\u5e03\u65e5\u8bb0\uff0c\u6742\u6587\uff0c\u6240\u89c1\u6240\u60f3 \u64b0\u5199\u53d1\u5e03\u6280\u672f\u6587\u7a3f\uff08\u4ee3\u7801\u652f\u6301\uff09 \u64b0\u5199\u53d1\u5e03\u5b66\u672f\u8bba\u6587\uff08LaTeX \u516c\u5f0f\u652f\u6301\uff09 \u9664\u4e86\u60a8\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a Cmd Markdown \u5728\u7ebf\u7248\u672c\uff0c\u60a8\u8fd8\u53ef\u4ee5\u524d\u5f80\u4ee5\u4e0b\u7f51\u5740\u4e0b\u8f7d\uff1a Windows/Mac/Linux \u5168\u5e73\u53f0\u5ba2\u6237\u7aef \u00b6 \u8bf7\u4fdd\u7559\u6b64\u4efd Cmd Markdown \u7684\u6b22\u8fce\u7a3f\u517c\u4f7f\u7528\u8bf4\u660e\uff0c\u5982\u9700\u64b0\u5199\u65b0\u7a3f\u4ef6\uff0c\u70b9\u51fb\u9876\u90e8\u5de5\u5177\u680f\u53f3\u4fa7\u7684 \u65b0\u6587\u7a3f \u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e Ctrl+Alt+N \u3002 \u4ec0\u4e48\u662f Markdown \u00b6 Markdown \u662f\u4e00\u79cd\u65b9\u4fbf\u8bb0\u5fc6\u3001\u4e66\u5199\u7684\u7eaf\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bb0\u7b26\u53f7\u4ee5\u6700\u5c0f\u7684\u8f93\u5165\u4ee3\u4ef7\u751f\u6210\u6781\u5bcc\u8868\u73b0\u529b\u7684\u6587\u6863\uff1a\u8b6c\u5982\u60a8\u6b63\u5728\u9605\u8bfb\u7684\u8fd9\u4efd\u6587\u6863\u3002\u5b83\u4f7f\u7528\u7b80\u5355\u7684\u7b26\u53f7\u6807\u8bb0\u4e0d\u540c\u7684\u6807\u9898\uff0c\u5206\u5272\u4e0d\u540c\u7684\u6bb5\u843d\uff0c \u7c97\u4f53 \u6216\u8005 \u659c\u4f53 \u67d0\u4e9b\u6587\u5b57\uff0c\u66f4\u68d2\u7684\u662f\uff0c\u5b83\u8fd8\u53ef\u4ee5 1. \u5236\u4f5c\u4e00\u4efd\u5f85\u529e\u4e8b\u5b9c Todo \u5217\u8868 \u00b6 \u652f\u6301\u4ee5 PDF \u683c\u5f0f\u5bfc\u51fa\u6587\u7a3f \u6539\u8fdb Cmd \u6e32\u67d3\u7b97\u6cd5\uff0c\u4f7f\u7528\u5c40\u90e8\u6e32\u67d3\u6280\u672f\u63d0\u9ad8\u6e32\u67d3\u6548\u7387 \u65b0\u589e Todo \u5217\u8868\u529f\u80fd \u4fee\u590d LaTex \u516c\u5f0f\u6e32\u67d3\u95ee\u9898 \u65b0\u589e LaTex \u516c\u5f0f\u7f16\u53f7\u529f\u80fd 2. \u4e66\u5199\u4e00\u4e2a\u8d28\u80fd\u5b88\u6052\u516c\u5f0f 1 \u00b6 E=mc^2 E=mc^2 3. \u9ad8\u4eae\u4e00\u6bb5\u4ee3\u7801 2 \u00b6 @requires_authorization class SomeClass : pass if __name__ == '__main__' : # A comment print 'hello world' 4. \u9ad8\u6548\u7ed8\u5236 \u6d41\u7a0b\u56fe \u00b6 st=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op 5. \u9ad8\u6548\u7ed8\u5236 \u5e8f\u5217\u56fe \u00b6 Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks! 6. \u9ad8\u6548\u7ed8\u5236 \u7518\u7279\u56fe \u00b6 title \u9879\u76ee\u5f00\u53d1\u6d41\u7a0b section \u9879\u76ee\u786e\u5b9a \u9700\u6c42\u5206\u6790 :a1, 2016-06-22, 3d \u53ef\u884c\u6027\u62a5\u544a :after a1, 5d \u6982\u5ff5\u9a8c\u8bc1 : 5d section \u9879\u76ee\u5b9e\u65bd \u6982\u8981\u8bbe\u8ba1 :2016-07-05 , 5d \u8be6\u7ec6\u8bbe\u8ba1 :2016-07-08, 10d \u7f16\u7801 :2016-07-15, 10d \u6d4b\u8bd5 :2016-07-22, 5d section \u53d1\u5e03\u9a8c\u6536 \u53d1\u5e03: 2d \u9a8c\u6536: 3d 7. \u7ed8\u5236\u8868\u683c \u00b6 \u9879\u76ee \u4ef7\u683c \u6570\u91cf \u8ba1\u7b97\u673a $1600 5 \u624b\u673a $12 12 \u7ba1\u7ebf $1 234 8. \u66f4\u8be6\u7ec6\u8bed\u6cd5\u8bf4\u660e \u00b6 \u60f3\u8981\u67e5\u770b\u66f4\u8be6\u7ec6\u7684\u8bed\u6cd5\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u51c6\u5907\u7684 Cmd Markdown \u7b80\u660e\u8bed\u6cd5\u624b\u518c \uff0c\u8fdb\u9636\u7528\u6237\u53ef\u4ee5\u53c2\u8003 Cmd Markdown \u9ad8\u9636\u8bed\u6cd5\u624b\u518c \u4e86\u89e3\u66f4\u591a\u9ad8\u7ea7\u529f\u80fd\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u4e0d\u540c\u4e8e\u5176\u5b83 \u6240\u89c1\u5373\u6240\u5f97 \u7684\u7f16\u8f91\u5668\uff1a\u4f60\u53ea\u9700\u4f7f\u7528\u952e\u76d8\u4e13\u6ce8\u4e8e\u4e66\u5199\u6587\u672c\u5185\u5bb9\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u5370\u5237\u7ea7\u7684\u6392\u7248\u683c\u5f0f\uff0c\u7701\u5374\u5728\u952e\u76d8\u548c\u5de5\u5177\u680f\u4e4b\u95f4\u6765\u56de\u5207\u6362\uff0c\u8c03\u6574\u5185\u5bb9\u548c\u683c\u5f0f\u7684\u9ebb\u70e6\u3002 Markdown \u5728\u6d41\u7545\u7684\u4e66\u5199\u548c\u5370\u5237\u7ea7\u7684\u9605\u8bfb\u4f53\u9a8c\u4e4b\u95f4\u627e\u5230\u4e86\u5e73\u8861\u3002 \u76ee\u524d\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u6280\u672f\u5206\u4eab\u7f51\u7ad9 GitHub \u548c \u6280\u672f\u95ee\u7b54\u7f51\u7ad9 StackOverFlow \u7684\u5fa1\u7528\u4e66\u5199\u683c\u5f0f\u3002 \u4ec0\u4e48\u662f Cmd Markdown \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u5de5\u5177\u4e66\u5199 Markdown\uff0c\u4f46\u662f Cmd Markdown \u662f\u8fd9\u4e2a\u661f\u7403\u4e0a\u6211\u4eec\u5df2\u77e5\u7684\u3001\u6700\u597d\u7684 Markdown \u5de5\u5177\u2014\u2014\u6ca1\u6709\u4e4b\u4e00 \uff1a\uff09\u56e0\u4e3a\u6df1\u4fe1\u6587\u5b57\u7684\u529b\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u548c\u4f60\u4e00\u6837\uff0c\u5bf9\u6d41\u7545\u4e66\u5199\uff0c\u5206\u4eab\u601d\u60f3\u548c\u77e5\u8bc6\uff0c\u4ee5\u53ca\u9605\u8bfb\u4f53\u9a8c\u6709\u6781\u81f4\u7684\u8ffd\u6c42\uff0c\u6211\u4eec\u628a\u5bf9\u4e8e\u8fd9\u4e9b\u8bc9\u6c42\u7684\u56de\u5e94\u6574\u5408\u5728 Cmd Markdown\uff0c\u5e76\u4e14\u4e00\u6b21\uff0c\u4e24\u6b21\uff0c\u4e09\u6b21\uff0c\u4e43\u81f3\u65e0\u6570\u6b21\u5730\u63d0\u5347\u8fd9\u4e2a\u5de5\u5177\u7684\u4f53\u9a8c\uff0c\u6700\u7ec8\u5c06\u5b83\u6f14\u5316\u6210\u4e00\u4e2a \u7f16\u8f91/\u53d1\u5e03/\u9605\u8bfb Markdown \u7684\u5728\u7ebf\u5e73\u53f0\u2014\u2014\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u4efb\u4f55\u7cfb\u7edf/\u8bbe\u5907\u4e0a\u7ba1\u7406\u8fd9\u91cc\u7684\u6587\u5b57\u3002 1. \u5b9e\u65f6\u540c\u6b65\u9884\u89c8 \u00b6 \u6211\u4eec\u5c06 Cmd Markdown \u7684\u4e3b\u754c\u9762\u4e00\u5206\u4e3a\u4e8c\uff0c\u5de6\u8fb9\u4e3a \u7f16\u8f91\u533a \uff0c\u53f3\u8fb9\u4e3a \u9884\u89c8\u533a \uff0c\u5728\u7f16\u8f91\u533a\u7684\u64cd\u4f5c\u4f1a\u5b9e\u65f6\u5730\u6e32\u67d3\u5230\u9884\u89c8\u533a\u65b9\u4fbf\u67e5\u770b\u6700\u7ec8\u7684\u7248\u9762\u6548\u679c\uff0c\u5e76\u4e14\u5982\u679c\u4f60\u5728\u5176\u4e2d\u4e00\u4e2a\u533a\u62d6\u52a8\u6eda\u52a8\u6761\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u7b97\u6cd5\u628a\u53e6\u4e00\u4e2a\u533a\u7684\u6eda\u52a8\u6761\u540c\u6b65\u5230\u7b49\u4ef7\u7684\u4f4d\u7f6e\uff0c\u8d85\u9177\uff01 2. \u7f16\u8f91\u5de5\u5177\u680f \u00b6 \u4e5f\u8bb8\u60a8\u8fd8\u662f\u4e00\u4e2a Markdown \u8bed\u6cd5\u7684\u65b0\u624b\uff0c\u5728\u60a8\u5b8c\u5168\u719f\u6089\u5b83\u4e4b\u524d\uff0c\u6211\u4eec\u5728 \u7f16\u8f91\u533a \u7684\u9876\u90e8\u653e\u7f6e\u4e86\u4e00\u4e2a\u5982\u4e0b\u56fe\u6240\u793a\u7684\u5de5\u5177\u680f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u9f20\u6807\u5728\u5de5\u5177\u680f\u4e0a\u8c03\u6574\u683c\u5f0f\uff0c\u4e0d\u8fc7\u6211\u4eec\u4ecd\u65e7\u9f13\u52b1\u4f60\u4f7f\u7528\u952e\u76d8\u6807\u8bb0\u683c\u5f0f\uff0c\u63d0\u9ad8\u4e66\u5199\u7684\u6d41\u7545\u5ea6\u3002 3. \u7f16\u8f91\u6a21\u5f0f \u00b6 \u5b8c\u5168\u5fc3\u65e0\u65c1\u9a9b\u7684\u65b9\u5f0f\u7f16\u8f91\u6587\u5b57\uff1a\u70b9\u51fb \u7f16\u8f91\u5de5\u5177\u680f \u6700\u53f3\u4fa7\u7684\u62c9\u4f38\u6309\u94ae\u6216\u8005\u6309\u4e0b Ctrl + M \uff0c\u5c06 Cmd Markdown \u5207\u6362\u5230\u72ec\u7acb\u7684\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e00\u4e2a\u6781\u5ea6\u7b80\u6d01\u7684\u5199\u4f5c\u73af\u5883\uff0c\u6240\u6709\u53ef\u80fd\u4f1a\u5f15\u8d77\u5206\u5fc3\u7684\u5143\u7d20\u90fd\u5df2\u7ecf\u88ab\u632a\u9664\uff0c\u8d85\u6e05\u723d\uff01 4. \u5b9e\u65f6\u7684\u4e91\u7aef\u6587\u7a3f \u00b6 \u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u5b89\u5168\uff0cCmd Markdown \u4f1a\u5c06\u60a8\u6bcf\u4e00\u6b21\u51fb\u952e\u7684\u5185\u5bb9\u4fdd\u5b58\u81f3\u4e91\u7aef\uff0c\u540c\u65f6\u5728 \u7f16\u8f91\u5de5\u5177\u680f \u7684\u6700\u53f3\u4fa7\u63d0\u793a \u5df2\u4fdd\u5b58 \u7684\u5b57\u6837\u3002\u65e0\u9700\u62c5\u5fc3\u6d4f\u89c8\u5668\u5d29\u6e83\uff0c\u673a\u5668\u6389\u7535\u6216\u8005\u5730\u9707\uff0c\u6d77\u5578\u2014\u2014\u5728\u7f16\u8f91\u7684\u8fc7\u7a0b\u4e2d\u968f\u65f6\u5173\u95ed\u6d4f\u89c8\u5668\u6216\u8005\u673a\u5668\uff0c\u4e0b\u4e00\u6b21\u56de\u5230 Cmd Markdown \u7684\u65f6\u5019\u7ee7\u7eed\u5199\u4f5c\u3002 5. \u79bb\u7ebf\u6a21\u5f0f \u00b6 \u5728\u7f51\u7edc\u73af\u5883\u4e0d\u7a33\u5b9a\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u6587\u5b57\u4e00\u6837\u5f88\u5b89\u5168\uff01\u5728\u60a8\u5199\u4f5c\u7684\u65f6\u5019\uff0c\u5982\u679c\u7535\u8111\u7a81\u7136\u5931\u53bb\u7f51\u7edc\u8fde\u63a5\uff0cCmd Markdown \u4f1a\u667a\u80fd\u5207\u6362\u81f3\u79bb\u7ebf\u6a21\u5f0f\uff0c\u5c06\u60a8\u540e\u7eed\u952e\u5165\u7684\u6587\u5b57\u4fdd\u5b58\u5728\u672c\u5730\uff0c\u76f4\u5230\u7f51\u7edc\u6062\u590d\u518d\u5c06\u4ed6\u4eec\u4f20\u9001\u81f3\u4e91\u7aef\uff0c\u5373\u4f7f\u5728\u7f51\u7edc\u6062\u590d\u524d\u5173\u95ed\u6d4f\u89c8\u5668\u6216\u8005\u7535\u8111\uff0c\u4e00\u6837\u6ca1\u6709\u95ee\u9898\uff0c\u7b49\u5230\u4e0b\u6b21\u5f00\u542f Cmd Markdown \u7684\u65f6\u5019\uff0c\u5979\u4f1a\u63d0\u9192\u60a8\u5c06\u79bb\u7ebf\u4fdd\u5b58\u7684\u6587\u5b57\u4f20\u9001\u81f3\u4e91\u7aef\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u5c3d\u6700\u5927\u7684\u52aa\u529b\u4fdd\u969c\u60a8\u6587\u5b57\u7684\u5b89\u5168\u3002 6. \u7ba1\u7406\u5de5\u5177\u680f \u00b6 \u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\u60a8\u7684\u6587\u7a3f\uff0c\u5728 \u9884\u89c8\u533a \u7684\u9876\u90e8\u653e\u7f6e\u4e86\u5982\u4e0b\u6240\u793a\u7684 \u7ba1\u7406\u5de5\u5177\u680f \uff1a \u901a\u8fc7\u7ba1\u7406\u5de5\u5177\u680f\u53ef\u4ee5\uff1a \u53d1\u5e03\uff1a\u5c06\u5f53\u524d\u7684\u6587\u7a3f\u751f\u6210\u56fa\u5b9a\u94fe\u63a5\uff0c\u5728\u7f51\u7edc\u4e0a\u53d1\u5e03\uff0c\u5206\u4eab \u65b0\u5efa\uff1a\u5f00\u59cb\u64b0\u5199\u4e00\u7bc7\u65b0\u7684\u6587\u7a3f \u5220\u9664\uff1a\u5220\u9664\u5f53\u524d\u7684\u6587\u7a3f \u5bfc\u51fa\uff1a\u5c06\u5f53\u524d\u7684\u6587\u7a3f\u8f6c\u5316\u4e3a Markdown \u6587\u672c\u6216\u8005 Html \u683c\u5f0f\uff0c\u5e76\u5bfc\u51fa\u5230\u672c\u5730 \u5217\u8868\uff1a\u6240\u6709\u65b0\u589e\u548c\u8fc7\u5f80\u7684\u6587\u7a3f\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u770b\u3001\u64cd\u4f5c \u6a21\u5f0f\uff1a\u5207\u6362 \u666e\u901a/Vim/Emacs \u7f16\u8f91\u6a21\u5f0f 7. \u9605\u8bfb\u5de5\u5177\u680f \u00b6 \u901a\u8fc7 \u9884\u89c8\u533a \u53f3\u4e0a\u89d2\u7684 \u9605\u8bfb\u5de5\u5177\u680f \uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6587\u7a3f\u7684\u76ee\u5f55\u5e76\u589e\u5f3a\u9605\u8bfb\u4f53\u9a8c\u3002 \u5de5\u5177\u680f\u4e0a\u7684\u4e94\u4e2a\u56fe\u6807\u4f9d\u6b21\u4e3a\uff1a \u76ee\u5f55\uff1a\u5feb\u901f\u5bfc\u822a\u5f53\u524d\u6587\u7a3f\u7684\u76ee\u5f55\u7ed3\u6784\u4ee5\u8df3\u8f6c\u5230\u611f\u5174\u8da3\u7684\u6bb5\u843d \u89c6\u56fe\uff1a\u4e92\u6362\u5de6\u8fb9\u7f16\u8f91\u533a\u548c\u53f3\u8fb9\u9884\u89c8\u533a\u7684\u4f4d\u7f6e \u4e3b\u9898\uff1a\u5185\u7f6e\u4e86\u9ed1\u767d\u4e24\u79cd\u6a21\u5f0f\u7684\u4e3b\u9898\uff0c\u8bd5\u8bd5 \u9ed1\u8272\u4e3b\u9898 \uff0c\u8d85\u70ab\uff01 \u9605\u8bfb\uff1a\u5fc3\u65e0\u65c1\u9a9b\u7684\u9605\u8bfb\u6a21\u5f0f\u63d0\u4f9b\u8d85\u4e00\u6d41\u7684\u9605\u8bfb\u4f53\u9a8c \u5168\u5c4f\uff1a\u7b80\u6d01\uff0c\u7b80\u6d01\uff0c\u518d\u7b80\u6d01\uff0c\u4e00\u4e2a\u5b8c\u5168\u6c89\u6d78\u5f0f\u7684\u5199\u4f5c\u548c\u9605\u8bfb\u73af\u5883 8. \u9605\u8bfb\u6a21\u5f0f \u00b6 \u5728 \u9605\u8bfb\u5de5\u5177\u680f \u70b9\u51fb \u6216\u8005\u6309\u4e0b Ctrl+Alt+M \u968f\u5373\u8fdb\u5165\u72ec\u7acb\u7684\u9605\u8bfb\u6a21\u5f0f\u754c\u9762\uff0c\u6211\u4eec\u5728\u7248\u9762\u6e32\u67d3\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\uff1a\u5b57\u4f53\uff0c\u5b57\u53f7\uff0c\u884c\u95f4\u8ddd\uff0c\u524d\u80cc\u666f\u8272\u90fd\u503e\u6ce8\u4e86\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u52aa\u529b\u63d0\u5347\u9605\u8bfb\u7684\u4f53\u9a8c\u548c\u54c1\u8d28\u3002 9. \u6807\u7b7e\u3001\u5206\u7c7b\u548c\u641c\u7d22 \u00b6 \u5728\u7f16\u8f91\u533a\u4efb\u610f\u884c\u9996\u4f4d\u7f6e\u8f93\u5165\u4ee5\u4e0b\u683c\u5f0f\u7684\u6587\u5b57\u53ef\u4ee5\u6807\u7b7e\u5f53\u524d\u6587\u6863\uff1a \u6807\u7b7e\uff1a \u672a\u5206\u7c7b \u6807\u7b7e\u4ee5\u540e\u7684\u6587\u7a3f\u5728\u3010\u6587\u4ef6\u5217\u8868\u3011\uff08Ctrl+Alt+F\uff09\u91cc\u4f1a\u6309\u7167\u6807\u7b7e\u5206\u7c7b\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u952e\u76d8\u6216\u8005\u9f20\u6807\u6d4f\u89c8\u67e5\u770b\uff0c\u6216\u8005\u5728\u3010\u6587\u4ef6\u5217\u8868\u3011\u7684\u641c\u7d22\u6587\u672c\u6846\u5185\u641c\u7d22\u6807\u9898\u5173\u952e\u5b57\u8fc7\u6ee4\u6587\u7a3f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 10. \u6587\u7a3f\u53d1\u5e03\u548c\u5206\u4eab \u00b6 \u5728\u60a8\u4f7f\u7528 Cmd Markdown \u8bb0\u5f55\uff0c\u521b\u4f5c\uff0c\u6574\u7406\uff0c\u9605\u8bfb\u6587\u7a3f\u7684\u540c\u65f6\uff0c\u6211\u4eec\u4e0d\u4ec5\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u6709\u529b\u7684\u5de5\u5177\uff0c\u66f4\u5e0c\u671b\u60a8\u7684\u601d\u60f3\u548c\u77e5\u8bc6\u901a\u8fc7\u8fd9\u4e2a\u5e73\u53f0\uff0c\u8fde\u540c\u4f18\u8d28\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5c06\u4ed6\u4eec\u5206\u4eab\u7ed9\u6709\u76f8\u540c\u5fd7\u8da3\u7684\u4eba\uff0c\u8fdb\u800c\u9f13\u52b1\u66f4\u591a\u7684\u4eba\u6765\u5230\u8fd9\u91cc\u8bb0\u5f55\u5206\u4eab\u4ed6\u4eec\u7684\u601d\u60f3\u548c\u77e5\u8bc6\uff0c\u5c1d\u8bd5\u70b9\u51fb (Ctrl+Alt+P) \u53d1\u5e03\u8fd9\u4efd\u6587\u6863\u7ed9\u597d\u53cb\u5427\uff01 \u518d\u4e00\u6b21\u611f\u8c22\u60a8\u82b1\u8d39\u65f6\u95f4\u9605\u8bfb\u8fd9\u4efd\u6b22\u8fce\u7a3f\uff0c\u70b9\u51fb (Ctrl+Alt+N) \u5f00\u59cb\u64b0\u5199\u65b0\u7684\u6587\u7a3f\u5427\uff01\u795d\u60a8\u5728\u8fd9\u91cc\u8bb0\u5f55\u3001\u9605\u8bfb\u3001\u5206\u4eab\u6109\u5feb\uff01 \u4f5c\u8005 @ghosert 2016 \u5e74 07\u6708 07\u65e5 \u652f\u6301 LaTeX \u7f16\u8f91\u663e\u793a\u652f\u6301\uff0c\u4f8b\u5982\uff1a \\sum_{i=1}^n a_i=0 \\sum_{i=1}^n a_i=0 \uff0c \u8bbf\u95ee MathJax \u53c2\u8003\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u3002 \u21a9 \u4ee3\u7801\u9ad8\u4eae\u529f\u80fd\u652f\u6301\u5305\u62ec Java, Python, JavaScript \u5728\u5185\u7684\uff0c \u56db\u5341\u4e00 \u79cd\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u3002 \u21a9","title":"\u6b22\u8fce\u4f7f\u7528 Cmd Markdown \u7f16\u8f91\u9605\u8bfb\u5668"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#cmd-markdown","text":"\u6211\u4eec\u7406\u89e3\u60a8\u9700\u8981\u66f4\u4fbf\u6377\u66f4\u9ad8\u6548\u7684\u5de5\u5177\u8bb0\u5f55\u601d\u60f3\uff0c\u6574\u7406\u7b14\u8bb0\u3001\u77e5\u8bc6\uff0c\u5e76\u5c06\u5176\u4e2d\u627f\u8f7d\u7684\u4ef7\u503c\u4f20\u64ad\u7ed9\u4ed6\u4eba\uff0c Cmd Markdown \u662f\u6211\u4eec\u7ed9\u51fa\u7684\u7b54\u6848 \u2014\u2014 \u6211\u4eec\u4e3a\u8bb0\u5f55\u601d\u60f3\u548c\u5206\u4eab\u77e5\u8bc6\u63d0\u4f9b\u66f4\u4e13\u4e1a\u7684\u5de5\u5177\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Cmd Markdown\uff1a \u6574\u7406\u77e5\u8bc6\uff0c\u5b66\u4e60\u7b14\u8bb0 \u53d1\u5e03\u65e5\u8bb0\uff0c\u6742\u6587\uff0c\u6240\u89c1\u6240\u60f3 \u64b0\u5199\u53d1\u5e03\u6280\u672f\u6587\u7a3f\uff08\u4ee3\u7801\u652f\u6301\uff09 \u64b0\u5199\u53d1\u5e03\u5b66\u672f\u8bba\u6587\uff08LaTeX \u516c\u5f0f\u652f\u6301\uff09 \u9664\u4e86\u60a8\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a Cmd Markdown \u5728\u7ebf\u7248\u672c\uff0c\u60a8\u8fd8\u53ef\u4ee5\u524d\u5f80\u4ee5\u4e0b\u7f51\u5740\u4e0b\u8f7d\uff1a","title":"\u6b22\u8fce\u4f7f\u7528 Cmd Markdown \u7f16\u8f91\u9605\u8bfb\u5668"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#windowsmaclinux","text":"\u8bf7\u4fdd\u7559\u6b64\u4efd Cmd Markdown \u7684\u6b22\u8fce\u7a3f\u517c\u4f7f\u7528\u8bf4\u660e\uff0c\u5982\u9700\u64b0\u5199\u65b0\u7a3f\u4ef6\uff0c\u70b9\u51fb\u9876\u90e8\u5de5\u5177\u680f\u53f3\u4fa7\u7684 \u65b0\u6587\u7a3f \u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e Ctrl+Alt+N \u3002","title":"Windows/Mac/Linux \u5168\u5e73\u53f0\u5ba2\u6237\u7aef"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#markdown","text":"Markdown \u662f\u4e00\u79cd\u65b9\u4fbf\u8bb0\u5fc6\u3001\u4e66\u5199\u7684\u7eaf\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bb0\u7b26\u53f7\u4ee5\u6700\u5c0f\u7684\u8f93\u5165\u4ee3\u4ef7\u751f\u6210\u6781\u5bcc\u8868\u73b0\u529b\u7684\u6587\u6863\uff1a\u8b6c\u5982\u60a8\u6b63\u5728\u9605\u8bfb\u7684\u8fd9\u4efd\u6587\u6863\u3002\u5b83\u4f7f\u7528\u7b80\u5355\u7684\u7b26\u53f7\u6807\u8bb0\u4e0d\u540c\u7684\u6807\u9898\uff0c\u5206\u5272\u4e0d\u540c\u7684\u6bb5\u843d\uff0c \u7c97\u4f53 \u6216\u8005 \u659c\u4f53 \u67d0\u4e9b\u6587\u5b57\uff0c\u66f4\u68d2\u7684\u662f\uff0c\u5b83\u8fd8\u53ef\u4ee5","title":"\u4ec0\u4e48\u662f Markdown"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#1-todo","text":"\u652f\u6301\u4ee5 PDF \u683c\u5f0f\u5bfc\u51fa\u6587\u7a3f \u6539\u8fdb Cmd \u6e32\u67d3\u7b97\u6cd5\uff0c\u4f7f\u7528\u5c40\u90e8\u6e32\u67d3\u6280\u672f\u63d0\u9ad8\u6e32\u67d3\u6548\u7387 \u65b0\u589e Todo \u5217\u8868\u529f\u80fd \u4fee\u590d LaTex \u516c\u5f0f\u6e32\u67d3\u95ee\u9898 \u65b0\u589e LaTex \u516c\u5f0f\u7f16\u53f7\u529f\u80fd","title":"1. \u5236\u4f5c\u4e00\u4efd\u5f85\u529e\u4e8b\u5b9c Todo \u5217\u8868"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#2-1","text":"E=mc^2 E=mc^2","title":"2. \u4e66\u5199\u4e00\u4e2a\u8d28\u80fd\u5b88\u6052\u516c\u5f0f1"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#3-2","text":"@requires_authorization class SomeClass : pass if __name__ == '__main__' : # A comment print 'hello world'","title":"3. \u9ad8\u4eae\u4e00\u6bb5\u4ee3\u78012"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#4","text":"st=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op","title":"4. \u9ad8\u6548\u7ed8\u5236 \u6d41\u7a0b\u56fe"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#5","text":"Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!","title":"5. \u9ad8\u6548\u7ed8\u5236 \u5e8f\u5217\u56fe"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#6","text":"title \u9879\u76ee\u5f00\u53d1\u6d41\u7a0b section \u9879\u76ee\u786e\u5b9a \u9700\u6c42\u5206\u6790 :a1, 2016-06-22, 3d \u53ef\u884c\u6027\u62a5\u544a :after a1, 5d \u6982\u5ff5\u9a8c\u8bc1 : 5d section \u9879\u76ee\u5b9e\u65bd \u6982\u8981\u8bbe\u8ba1 :2016-07-05 , 5d \u8be6\u7ec6\u8bbe\u8ba1 :2016-07-08, 10d \u7f16\u7801 :2016-07-15, 10d \u6d4b\u8bd5 :2016-07-22, 5d section \u53d1\u5e03\u9a8c\u6536 \u53d1\u5e03: 2d \u9a8c\u6536: 3d","title":"6. \u9ad8\u6548\u7ed8\u5236 \u7518\u7279\u56fe"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#7","text":"\u9879\u76ee \u4ef7\u683c \u6570\u91cf \u8ba1\u7b97\u673a $1600 5 \u624b\u673a $12 12 \u7ba1\u7ebf $1 234","title":"7. \u7ed8\u5236\u8868\u683c"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#8","text":"\u60f3\u8981\u67e5\u770b\u66f4\u8be6\u7ec6\u7684\u8bed\u6cd5\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u51c6\u5907\u7684 Cmd Markdown \u7b80\u660e\u8bed\u6cd5\u624b\u518c \uff0c\u8fdb\u9636\u7528\u6237\u53ef\u4ee5\u53c2\u8003 Cmd Markdown \u9ad8\u9636\u8bed\u6cd5\u624b\u518c \u4e86\u89e3\u66f4\u591a\u9ad8\u7ea7\u529f\u80fd\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u4e0d\u540c\u4e8e\u5176\u5b83 \u6240\u89c1\u5373\u6240\u5f97 \u7684\u7f16\u8f91\u5668\uff1a\u4f60\u53ea\u9700\u4f7f\u7528\u952e\u76d8\u4e13\u6ce8\u4e8e\u4e66\u5199\u6587\u672c\u5185\u5bb9\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u5370\u5237\u7ea7\u7684\u6392\u7248\u683c\u5f0f\uff0c\u7701\u5374\u5728\u952e\u76d8\u548c\u5de5\u5177\u680f\u4e4b\u95f4\u6765\u56de\u5207\u6362\uff0c\u8c03\u6574\u5185\u5bb9\u548c\u683c\u5f0f\u7684\u9ebb\u70e6\u3002 Markdown \u5728\u6d41\u7545\u7684\u4e66\u5199\u548c\u5370\u5237\u7ea7\u7684\u9605\u8bfb\u4f53\u9a8c\u4e4b\u95f4\u627e\u5230\u4e86\u5e73\u8861\u3002 \u76ee\u524d\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u6280\u672f\u5206\u4eab\u7f51\u7ad9 GitHub \u548c \u6280\u672f\u95ee\u7b54\u7f51\u7ad9 StackOverFlow \u7684\u5fa1\u7528\u4e66\u5199\u683c\u5f0f\u3002","title":"8. \u66f4\u8be6\u7ec6\u8bed\u6cd5\u8bf4\u660e"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#cmd-markdown_1","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u5de5\u5177\u4e66\u5199 Markdown\uff0c\u4f46\u662f Cmd Markdown \u662f\u8fd9\u4e2a\u661f\u7403\u4e0a\u6211\u4eec\u5df2\u77e5\u7684\u3001\u6700\u597d\u7684 Markdown \u5de5\u5177\u2014\u2014\u6ca1\u6709\u4e4b\u4e00 \uff1a\uff09\u56e0\u4e3a\u6df1\u4fe1\u6587\u5b57\u7684\u529b\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u548c\u4f60\u4e00\u6837\uff0c\u5bf9\u6d41\u7545\u4e66\u5199\uff0c\u5206\u4eab\u601d\u60f3\u548c\u77e5\u8bc6\uff0c\u4ee5\u53ca\u9605\u8bfb\u4f53\u9a8c\u6709\u6781\u81f4\u7684\u8ffd\u6c42\uff0c\u6211\u4eec\u628a\u5bf9\u4e8e\u8fd9\u4e9b\u8bc9\u6c42\u7684\u56de\u5e94\u6574\u5408\u5728 Cmd Markdown\uff0c\u5e76\u4e14\u4e00\u6b21\uff0c\u4e24\u6b21\uff0c\u4e09\u6b21\uff0c\u4e43\u81f3\u65e0\u6570\u6b21\u5730\u63d0\u5347\u8fd9\u4e2a\u5de5\u5177\u7684\u4f53\u9a8c\uff0c\u6700\u7ec8\u5c06\u5b83\u6f14\u5316\u6210\u4e00\u4e2a \u7f16\u8f91/\u53d1\u5e03/\u9605\u8bfb Markdown \u7684\u5728\u7ebf\u5e73\u53f0\u2014\u2014\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u4efb\u4f55\u7cfb\u7edf/\u8bbe\u5907\u4e0a\u7ba1\u7406\u8fd9\u91cc\u7684\u6587\u5b57\u3002","title":"\u4ec0\u4e48\u662f Cmd Markdown"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#1","text":"\u6211\u4eec\u5c06 Cmd Markdown \u7684\u4e3b\u754c\u9762\u4e00\u5206\u4e3a\u4e8c\uff0c\u5de6\u8fb9\u4e3a \u7f16\u8f91\u533a \uff0c\u53f3\u8fb9\u4e3a \u9884\u89c8\u533a \uff0c\u5728\u7f16\u8f91\u533a\u7684\u64cd\u4f5c\u4f1a\u5b9e\u65f6\u5730\u6e32\u67d3\u5230\u9884\u89c8\u533a\u65b9\u4fbf\u67e5\u770b\u6700\u7ec8\u7684\u7248\u9762\u6548\u679c\uff0c\u5e76\u4e14\u5982\u679c\u4f60\u5728\u5176\u4e2d\u4e00\u4e2a\u533a\u62d6\u52a8\u6eda\u52a8\u6761\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u7b97\u6cd5\u628a\u53e6\u4e00\u4e2a\u533a\u7684\u6eda\u52a8\u6761\u540c\u6b65\u5230\u7b49\u4ef7\u7684\u4f4d\u7f6e\uff0c\u8d85\u9177\uff01","title":"1. \u5b9e\u65f6\u540c\u6b65\u9884\u89c8"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#2","text":"\u4e5f\u8bb8\u60a8\u8fd8\u662f\u4e00\u4e2a Markdown \u8bed\u6cd5\u7684\u65b0\u624b\uff0c\u5728\u60a8\u5b8c\u5168\u719f\u6089\u5b83\u4e4b\u524d\uff0c\u6211\u4eec\u5728 \u7f16\u8f91\u533a \u7684\u9876\u90e8\u653e\u7f6e\u4e86\u4e00\u4e2a\u5982\u4e0b\u56fe\u6240\u793a\u7684\u5de5\u5177\u680f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u9f20\u6807\u5728\u5de5\u5177\u680f\u4e0a\u8c03\u6574\u683c\u5f0f\uff0c\u4e0d\u8fc7\u6211\u4eec\u4ecd\u65e7\u9f13\u52b1\u4f60\u4f7f\u7528\u952e\u76d8\u6807\u8bb0\u683c\u5f0f\uff0c\u63d0\u9ad8\u4e66\u5199\u7684\u6d41\u7545\u5ea6\u3002","title":"2. \u7f16\u8f91\u5de5\u5177\u680f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#3","text":"\u5b8c\u5168\u5fc3\u65e0\u65c1\u9a9b\u7684\u65b9\u5f0f\u7f16\u8f91\u6587\u5b57\uff1a\u70b9\u51fb \u7f16\u8f91\u5de5\u5177\u680f \u6700\u53f3\u4fa7\u7684\u62c9\u4f38\u6309\u94ae\u6216\u8005\u6309\u4e0b Ctrl + M \uff0c\u5c06 Cmd Markdown \u5207\u6362\u5230\u72ec\u7acb\u7684\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e00\u4e2a\u6781\u5ea6\u7b80\u6d01\u7684\u5199\u4f5c\u73af\u5883\uff0c\u6240\u6709\u53ef\u80fd\u4f1a\u5f15\u8d77\u5206\u5fc3\u7684\u5143\u7d20\u90fd\u5df2\u7ecf\u88ab\u632a\u9664\uff0c\u8d85\u6e05\u723d\uff01","title":"3. \u7f16\u8f91\u6a21\u5f0f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#4_1","text":"\u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u5b89\u5168\uff0cCmd Markdown \u4f1a\u5c06\u60a8\u6bcf\u4e00\u6b21\u51fb\u952e\u7684\u5185\u5bb9\u4fdd\u5b58\u81f3\u4e91\u7aef\uff0c\u540c\u65f6\u5728 \u7f16\u8f91\u5de5\u5177\u680f \u7684\u6700\u53f3\u4fa7\u63d0\u793a \u5df2\u4fdd\u5b58 \u7684\u5b57\u6837\u3002\u65e0\u9700\u62c5\u5fc3\u6d4f\u89c8\u5668\u5d29\u6e83\uff0c\u673a\u5668\u6389\u7535\u6216\u8005\u5730\u9707\uff0c\u6d77\u5578\u2014\u2014\u5728\u7f16\u8f91\u7684\u8fc7\u7a0b\u4e2d\u968f\u65f6\u5173\u95ed\u6d4f\u89c8\u5668\u6216\u8005\u673a\u5668\uff0c\u4e0b\u4e00\u6b21\u56de\u5230 Cmd Markdown \u7684\u65f6\u5019\u7ee7\u7eed\u5199\u4f5c\u3002","title":"4. \u5b9e\u65f6\u7684\u4e91\u7aef\u6587\u7a3f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#5_1","text":"\u5728\u7f51\u7edc\u73af\u5883\u4e0d\u7a33\u5b9a\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u6587\u5b57\u4e00\u6837\u5f88\u5b89\u5168\uff01\u5728\u60a8\u5199\u4f5c\u7684\u65f6\u5019\uff0c\u5982\u679c\u7535\u8111\u7a81\u7136\u5931\u53bb\u7f51\u7edc\u8fde\u63a5\uff0cCmd Markdown \u4f1a\u667a\u80fd\u5207\u6362\u81f3\u79bb\u7ebf\u6a21\u5f0f\uff0c\u5c06\u60a8\u540e\u7eed\u952e\u5165\u7684\u6587\u5b57\u4fdd\u5b58\u5728\u672c\u5730\uff0c\u76f4\u5230\u7f51\u7edc\u6062\u590d\u518d\u5c06\u4ed6\u4eec\u4f20\u9001\u81f3\u4e91\u7aef\uff0c\u5373\u4f7f\u5728\u7f51\u7edc\u6062\u590d\u524d\u5173\u95ed\u6d4f\u89c8\u5668\u6216\u8005\u7535\u8111\uff0c\u4e00\u6837\u6ca1\u6709\u95ee\u9898\uff0c\u7b49\u5230\u4e0b\u6b21\u5f00\u542f Cmd Markdown \u7684\u65f6\u5019\uff0c\u5979\u4f1a\u63d0\u9192\u60a8\u5c06\u79bb\u7ebf\u4fdd\u5b58\u7684\u6587\u5b57\u4f20\u9001\u81f3\u4e91\u7aef\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u5c3d\u6700\u5927\u7684\u52aa\u529b\u4fdd\u969c\u60a8\u6587\u5b57\u7684\u5b89\u5168\u3002","title":"5. \u79bb\u7ebf\u6a21\u5f0f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#6_1","text":"\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\u60a8\u7684\u6587\u7a3f\uff0c\u5728 \u9884\u89c8\u533a \u7684\u9876\u90e8\u653e\u7f6e\u4e86\u5982\u4e0b\u6240\u793a\u7684 \u7ba1\u7406\u5de5\u5177\u680f \uff1a \u901a\u8fc7\u7ba1\u7406\u5de5\u5177\u680f\u53ef\u4ee5\uff1a \u53d1\u5e03\uff1a\u5c06\u5f53\u524d\u7684\u6587\u7a3f\u751f\u6210\u56fa\u5b9a\u94fe\u63a5\uff0c\u5728\u7f51\u7edc\u4e0a\u53d1\u5e03\uff0c\u5206\u4eab \u65b0\u5efa\uff1a\u5f00\u59cb\u64b0\u5199\u4e00\u7bc7\u65b0\u7684\u6587\u7a3f \u5220\u9664\uff1a\u5220\u9664\u5f53\u524d\u7684\u6587\u7a3f \u5bfc\u51fa\uff1a\u5c06\u5f53\u524d\u7684\u6587\u7a3f\u8f6c\u5316\u4e3a Markdown \u6587\u672c\u6216\u8005 Html \u683c\u5f0f\uff0c\u5e76\u5bfc\u51fa\u5230\u672c\u5730 \u5217\u8868\uff1a\u6240\u6709\u65b0\u589e\u548c\u8fc7\u5f80\u7684\u6587\u7a3f\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u770b\u3001\u64cd\u4f5c \u6a21\u5f0f\uff1a\u5207\u6362 \u666e\u901a/Vim/Emacs \u7f16\u8f91\u6a21\u5f0f","title":"6. \u7ba1\u7406\u5de5\u5177\u680f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#7_1","text":"\u901a\u8fc7 \u9884\u89c8\u533a \u53f3\u4e0a\u89d2\u7684 \u9605\u8bfb\u5de5\u5177\u680f \uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6587\u7a3f\u7684\u76ee\u5f55\u5e76\u589e\u5f3a\u9605\u8bfb\u4f53\u9a8c\u3002 \u5de5\u5177\u680f\u4e0a\u7684\u4e94\u4e2a\u56fe\u6807\u4f9d\u6b21\u4e3a\uff1a \u76ee\u5f55\uff1a\u5feb\u901f\u5bfc\u822a\u5f53\u524d\u6587\u7a3f\u7684\u76ee\u5f55\u7ed3\u6784\u4ee5\u8df3\u8f6c\u5230\u611f\u5174\u8da3\u7684\u6bb5\u843d \u89c6\u56fe\uff1a\u4e92\u6362\u5de6\u8fb9\u7f16\u8f91\u533a\u548c\u53f3\u8fb9\u9884\u89c8\u533a\u7684\u4f4d\u7f6e \u4e3b\u9898\uff1a\u5185\u7f6e\u4e86\u9ed1\u767d\u4e24\u79cd\u6a21\u5f0f\u7684\u4e3b\u9898\uff0c\u8bd5\u8bd5 \u9ed1\u8272\u4e3b\u9898 \uff0c\u8d85\u70ab\uff01 \u9605\u8bfb\uff1a\u5fc3\u65e0\u65c1\u9a9b\u7684\u9605\u8bfb\u6a21\u5f0f\u63d0\u4f9b\u8d85\u4e00\u6d41\u7684\u9605\u8bfb\u4f53\u9a8c \u5168\u5c4f\uff1a\u7b80\u6d01\uff0c\u7b80\u6d01\uff0c\u518d\u7b80\u6d01\uff0c\u4e00\u4e2a\u5b8c\u5168\u6c89\u6d78\u5f0f\u7684\u5199\u4f5c\u548c\u9605\u8bfb\u73af\u5883","title":"7. \u9605\u8bfb\u5de5\u5177\u680f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#8_1","text":"\u5728 \u9605\u8bfb\u5de5\u5177\u680f \u70b9\u51fb \u6216\u8005\u6309\u4e0b Ctrl+Alt+M \u968f\u5373\u8fdb\u5165\u72ec\u7acb\u7684\u9605\u8bfb\u6a21\u5f0f\u754c\u9762\uff0c\u6211\u4eec\u5728\u7248\u9762\u6e32\u67d3\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\uff1a\u5b57\u4f53\uff0c\u5b57\u53f7\uff0c\u884c\u95f4\u8ddd\uff0c\u524d\u80cc\u666f\u8272\u90fd\u503e\u6ce8\u4e86\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u52aa\u529b\u63d0\u5347\u9605\u8bfb\u7684\u4f53\u9a8c\u548c\u54c1\u8d28\u3002","title":"8. \u9605\u8bfb\u6a21\u5f0f"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#9","text":"\u5728\u7f16\u8f91\u533a\u4efb\u610f\u884c\u9996\u4f4d\u7f6e\u8f93\u5165\u4ee5\u4e0b\u683c\u5f0f\u7684\u6587\u5b57\u53ef\u4ee5\u6807\u7b7e\u5f53\u524d\u6587\u6863\uff1a \u6807\u7b7e\uff1a \u672a\u5206\u7c7b \u6807\u7b7e\u4ee5\u540e\u7684\u6587\u7a3f\u5728\u3010\u6587\u4ef6\u5217\u8868\u3011\uff08Ctrl+Alt+F\uff09\u91cc\u4f1a\u6309\u7167\u6807\u7b7e\u5206\u7c7b\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u952e\u76d8\u6216\u8005\u9f20\u6807\u6d4f\u89c8\u67e5\u770b\uff0c\u6216\u8005\u5728\u3010\u6587\u4ef6\u5217\u8868\u3011\u7684\u641c\u7d22\u6587\u672c\u6846\u5185\u641c\u7d22\u6807\u9898\u5173\u952e\u5b57\u8fc7\u6ee4\u6587\u7a3f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"9. \u6807\u7b7e\u3001\u5206\u7c7b\u548c\u641c\u7d22"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/06CMD%20Markdown.html#10","text":"\u5728\u60a8\u4f7f\u7528 Cmd Markdown \u8bb0\u5f55\uff0c\u521b\u4f5c\uff0c\u6574\u7406\uff0c\u9605\u8bfb\u6587\u7a3f\u7684\u540c\u65f6\uff0c\u6211\u4eec\u4e0d\u4ec5\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u6709\u529b\u7684\u5de5\u5177\uff0c\u66f4\u5e0c\u671b\u60a8\u7684\u601d\u60f3\u548c\u77e5\u8bc6\u901a\u8fc7\u8fd9\u4e2a\u5e73\u53f0\uff0c\u8fde\u540c\u4f18\u8d28\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5c06\u4ed6\u4eec\u5206\u4eab\u7ed9\u6709\u76f8\u540c\u5fd7\u8da3\u7684\u4eba\uff0c\u8fdb\u800c\u9f13\u52b1\u66f4\u591a\u7684\u4eba\u6765\u5230\u8fd9\u91cc\u8bb0\u5f55\u5206\u4eab\u4ed6\u4eec\u7684\u601d\u60f3\u548c\u77e5\u8bc6\uff0c\u5c1d\u8bd5\u70b9\u51fb (Ctrl+Alt+P) \u53d1\u5e03\u8fd9\u4efd\u6587\u6863\u7ed9\u597d\u53cb\u5427\uff01 \u518d\u4e00\u6b21\u611f\u8c22\u60a8\u82b1\u8d39\u65f6\u95f4\u9605\u8bfb\u8fd9\u4efd\u6b22\u8fce\u7a3f\uff0c\u70b9\u51fb (Ctrl+Alt+N) \u5f00\u59cb\u64b0\u5199\u65b0\u7684\u6587\u7a3f\u5427\uff01\u795d\u60a8\u5728\u8fd9\u91cc\u8bb0\u5f55\u3001\u9605\u8bfb\u3001\u5206\u4eab\u6109\u5feb\uff01 \u4f5c\u8005 @ghosert 2016 \u5e74 07\u6708 07\u65e5 \u652f\u6301 LaTeX \u7f16\u8f91\u663e\u793a\u652f\u6301\uff0c\u4f8b\u5982\uff1a \\sum_{i=1}^n a_i=0 \\sum_{i=1}^n a_i=0 \uff0c \u8bbf\u95ee MathJax \u53c2\u8003\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u3002 \u21a9 \u4ee3\u7801\u9ad8\u4eae\u529f\u80fd\u652f\u6301\u5305\u62ec Java, Python, JavaScript \u5728\u5185\u7684\uff0c \u56db\u5341\u4e00 \u79cd\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u3002 \u21a9","title":"10. \u6587\u7a3f\u53d1\u5e03\u548c\u5206\u4eab"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html","text":"\u9644\u5f55\uff1a\u521b\u59cb\u4eba John Gruber \u535a\u5ba2 Markdown \u57fa\u7840\u8bed\u6cd5\u8bf4\u660e--Basics \u00b6 GETTING THE GIST OF MARKDOWN\u2019S FORMATTING SYNTAX \u00b6 This page offers a brief overview of what it\u2019s like to use Markdown. The syntax page provides complete, detailed documentation for every feature, but Markdown should be very easy to pick up simply by looking at a few examples of it in action. The examples on this page are written in a before/after style, showing example syntax and the HTML output produced by Markdown. It\u2019s also helpful to simply try Markdown out; the Dingus is a web application that allows you type your own Markdown-formatted text and translate it to XHTML. NOTE: This document is itself written using Markdown; you can see the source for it by adding \u2018.text\u2019 to the URL . PARAGRAPHS, HEADERS, BLOCKQUOTES \u00b6 A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line\u2009\u2014\u2009a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs. Markdown offers two styles of headers: Setext and atx . Setext-style headers for <h1> and <h2> are created by \u201cunderlining\u201d with equal signs ( = ) and hyphens ( - ), respectively. To create an atx-style header, you put 1-6 hash marks ( # ) at the beginning of the line\u2009\u2014\u2009the number of hashes equals the resulting HTML header level. Blockquotes are indicated using email-style \u2018 > \u2019 angle brackets. Markdown: A First Level Header \u00b6 A Second Level Header \u00b6 Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back. Header 3 \u00b6 This is a blockquote. This is the second paragraph in the blockquote. This is an H2 in a blockquote \u00b6 A First Level Header ==================== A Second Level Header --------------------- Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back. ### Header 3 > This is a blockquote. > > This is the second paragraph in the blockquote. > > ## This is an H2 in a blockquote Output: <h1>A First Level Header</h1> <h2>A Second Level Header</h2> <p>Now is the time for all good men to come to the aid of their country. This is just a regular paragraph.</p> <p>The quick brown fox jumped over the lazy dog's back.</p> <h3>Header 3</h3> <blockquote> <p>This is a blockquote.</p> <p>This is the second paragraph in the blockquote.</p> <h2>This is an H2 in a blockquote</h2> </blockquote> PHRASE EMPHASIS \u00b6 Markdown uses asterisks and underscores to indicate spans of emphasis. Markdown: Some of these words are emphasized . Some of these words are emphasized also . Use two asterisks for strong emphasis . Or, if you prefer, use two underscores instead . Some of these words *are emphasized*. Some of these words _are emphasized also_. Use two asterisks for **strong emphasis**. Or, if you prefer, __use two underscores instead__. Output: <p>Some of these words <em>are emphasized</em>. Some of these words <em>are emphasized also</em>.</p> <p>Use two asterisks for <strong>strong emphasis</strong>. Or, if you prefer, <strong>use two underscores instead</strong>.</p> LISTS \u00b6 Unordered (bulleted) lists use asterisks, pluses, and hyphens ( * , + , and - ) as list markers. These three markers are interchangable; this: Candy. Gum. Booze. * Candy. * Gum. * Booze. this: Candy. Gum. Booze. + Candy. + Gum. + Booze. and this: Candy. Gum. Booze. - Candy. - Gum. - Booze. all produce the same output: <ul> <li>Candy.</li> <li>Gum.</li> <li>Booze.</li> </ul> Ordered (numbered) lists use regular numbers, followed by periods, as list markers: Red Green Blue 1. Red 2. Green 3. Blue Output: <ol> <li>Red</li> <li>Green</li> <li>Blue</li> </ol> If you put blank lines between items, you\u2019ll get <p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab: A list item. With multiple paragraphs. Another item in the list. * A list item. With multiple paragraphs. * Another item in the list. Output: <ul> <li><p>A list item.</p> <p>With multiple paragraphs.</p></li> <li><p>Another item in the list.</p></li> </ul> LINKS \u00b6 Markdown supports two styles for creating links: inline and reference . With both styles, you use square brackets to delimit the text you want to turn into a link. Inline-style links use parentheses immediately after the link text. For example: This is an example link . This is an [example link](http://example.com/). Output: <p>This is an <a href=\"http://example.com/\"> example link</a>.</p> Optionally, you may include a title attribute in the parentheses: This is an example link . This is an [example link](http://example.com/ \"With a Title\"). Output: <p>This is an <a href=\"http://example.com/\" title=\"With a Title\"> example link</a>.</p> Reference-style links allow you to refer to your links by names, which you define elsewhere in your document: I get 10 times more traffic from Google than from Yahoo or MSN . I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. [1]: http://google.com/ \"Google\" [2]: http://search.yahoo.com/ \"Yahoo Search\" [3]: http://search.msn.com/ \"MSN Search\" Output: <p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p> The title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive: I start my morning with a cup of coffee and The New York Times . I start my morning with a cup of coffee and [The New York Times][NY Times]. [ny times]: http://www.nytimes.com/ Output: <p>I start my morning with a cup of coffee and <a href=\"http://www.nytimes.com/\">The New York Times</a>.</p> IMAGES \u00b6 Image syntax is very much like link syntax. Inline (titles are optional): ![alt text](/path/to/img.jpg \"Title\") Reference-style: ![alt text][id] [id]: /path/to/img.jpg \"Title\" Both of the above examples produce the same output: < img src = \"/path/to/img.jpg\" alt = \"alt text\" title = \"Title\" /> CODE \u00b6 In a regular paragraph, you can create code span by wrapping text in backtick quotes. Any ampersands ( & ) and angle brackets ( < or > ) will automatically be translated into HTML entities. This makes it easy to use Markdown to write about HTML example code: I strongly recommend against using any <blink> tags. I wish SmartyPants used named entities like &mdash; instead of decimal-encoded entites like &#8212; . I strongly recommend against using any `<blink>` tags. I wish SmartyPants used named entities like `&mdash;` instead of decimal-encoded entites like `&#8212;`. Output: <p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p> <p>I wish SmartyPants used named entities like <code>&amp;mdash;</code> instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p> To specify an entire block of pre-formatted code, indent every line of the block by 4 spaces or 1 tab. Just like with code spans, & , < , and > characters will be escaped automatically. Markdown: If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: <blockquote> <p>For example.</p> </blockquote> Output: <p>If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes:</p> <pre><code>&lt;blockquote&gt; &lt;p&gt;For example.&lt;/p&gt; &lt;/blockquote&gt; </code></pre>","title":"\u9644\u5f55\uff1a\u521b\u59cb\u4eba John Gruber \u7684 Markdown \u57fa\u7840\u8bed\u6cd5\u8bf4\u660e"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#john-gruber-markdown-basics","text":"","title":"\u9644\u5f55\uff1a\u521b\u59cb\u4eba John Gruber \u535a\u5ba2 Markdown \u57fa\u7840\u8bed\u6cd5\u8bf4\u660e--Basics"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#getting-the-gist-of-markdowns-formatting-syntax","text":"This page offers a brief overview of what it\u2019s like to use Markdown. The syntax page provides complete, detailed documentation for every feature, but Markdown should be very easy to pick up simply by looking at a few examples of it in action. The examples on this page are written in a before/after style, showing example syntax and the HTML output produced by Markdown. It\u2019s also helpful to simply try Markdown out; the Dingus is a web application that allows you type your own Markdown-formatted text and translate it to XHTML. NOTE: This document is itself written using Markdown; you can see the source for it by adding \u2018.text\u2019 to the URL .","title":"GETTING THE GIST OF MARKDOWN\u2019S FORMATTING SYNTAX"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#paragraphs-headers-blockquotes","text":"A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line\u2009\u2014\u2009a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs. Markdown offers two styles of headers: Setext and atx . Setext-style headers for <h1> and <h2> are created by \u201cunderlining\u201d with equal signs ( = ) and hyphens ( - ), respectively. To create an atx-style header, you put 1-6 hash marks ( # ) at the beginning of the line\u2009\u2014\u2009the number of hashes equals the resulting HTML header level. Blockquotes are indicated using email-style \u2018 > \u2019 angle brackets. Markdown:","title":"PARAGRAPHS, HEADERS, BLOCKQUOTES"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#a-first-level-header","text":"","title":"A First Level Header"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#a-second-level-header","text":"Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back.","title":"A Second Level Header"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#header-3","text":"This is a blockquote. This is the second paragraph in the blockquote.","title":"Header 3"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#this-is-an-h2-in-a-blockquote","text":"A First Level Header ==================== A Second Level Header --------------------- Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back. ### Header 3 > This is a blockquote. > > This is the second paragraph in the blockquote. > > ## This is an H2 in a blockquote Output: <h1>A First Level Header</h1> <h2>A Second Level Header</h2> <p>Now is the time for all good men to come to the aid of their country. This is just a regular paragraph.</p> <p>The quick brown fox jumped over the lazy dog's back.</p> <h3>Header 3</h3> <blockquote> <p>This is a blockquote.</p> <p>This is the second paragraph in the blockquote.</p> <h2>This is an H2 in a blockquote</h2> </blockquote>","title":"This is an H2 in a blockquote"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#phrase-emphasis","text":"Markdown uses asterisks and underscores to indicate spans of emphasis. Markdown: Some of these words are emphasized . Some of these words are emphasized also . Use two asterisks for strong emphasis . Or, if you prefer, use two underscores instead . Some of these words *are emphasized*. Some of these words _are emphasized also_. Use two asterisks for **strong emphasis**. Or, if you prefer, __use two underscores instead__. Output: <p>Some of these words <em>are emphasized</em>. Some of these words <em>are emphasized also</em>.</p> <p>Use two asterisks for <strong>strong emphasis</strong>. Or, if you prefer, <strong>use two underscores instead</strong>.</p>","title":"PHRASE EMPHASIS"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#lists","text":"Unordered (bulleted) lists use asterisks, pluses, and hyphens ( * , + , and - ) as list markers. These three markers are interchangable; this: Candy. Gum. Booze. * Candy. * Gum. * Booze. this: Candy. Gum. Booze. + Candy. + Gum. + Booze. and this: Candy. Gum. Booze. - Candy. - Gum. - Booze. all produce the same output: <ul> <li>Candy.</li> <li>Gum.</li> <li>Booze.</li> </ul> Ordered (numbered) lists use regular numbers, followed by periods, as list markers: Red Green Blue 1. Red 2. Green 3. Blue Output: <ol> <li>Red</li> <li>Green</li> <li>Blue</li> </ol> If you put blank lines between items, you\u2019ll get <p> tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab: A list item. With multiple paragraphs. Another item in the list. * A list item. With multiple paragraphs. * Another item in the list. Output: <ul> <li><p>A list item.</p> <p>With multiple paragraphs.</p></li> <li><p>Another item in the list.</p></li> </ul>","title":"LISTS"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#links","text":"Markdown supports two styles for creating links: inline and reference . With both styles, you use square brackets to delimit the text you want to turn into a link. Inline-style links use parentheses immediately after the link text. For example: This is an example link . This is an [example link](http://example.com/). Output: <p>This is an <a href=\"http://example.com/\"> example link</a>.</p> Optionally, you may include a title attribute in the parentheses: This is an example link . This is an [example link](http://example.com/ \"With a Title\"). Output: <p>This is an <a href=\"http://example.com/\" title=\"With a Title\"> example link</a>.</p> Reference-style links allow you to refer to your links by names, which you define elsewhere in your document: I get 10 times more traffic from Google than from Yahoo or MSN . I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. [1]: http://google.com/ \"Google\" [2]: http://search.yahoo.com/ \"Yahoo Search\" [3]: http://search.msn.com/ \"MSN Search\" Output: <p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p> The title attribute is optional. Link names may contain letters, numbers and spaces, but are not case sensitive: I start my morning with a cup of coffee and The New York Times . I start my morning with a cup of coffee and [The New York Times][NY Times]. [ny times]: http://www.nytimes.com/ Output: <p>I start my morning with a cup of coffee and <a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>","title":"LINKS"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#images","text":"Image syntax is very much like link syntax. Inline (titles are optional): ![alt text](/path/to/img.jpg \"Title\") Reference-style: ![alt text][id] [id]: /path/to/img.jpg \"Title\" Both of the above examples produce the same output: < img src = \"/path/to/img.jpg\" alt = \"alt text\" title = \"Title\" />","title":"IMAGES"},{"location":"%E6%96%87%E6%A1%A3%E9%99%84%E5%BD%95/%E9%99%84%E5%BD%95%EF%BC%9A%E5%88%9B%E5%A7%8B%E4%BA%BA%20John%20Gruber%20%E7%9A%84%20Markdown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html#code","text":"In a regular paragraph, you can create code span by wrapping text in backtick quotes. Any ampersands ( & ) and angle brackets ( < or > ) will automatically be translated into HTML entities. This makes it easy to use Markdown to write about HTML example code: I strongly recommend against using any <blink> tags. I wish SmartyPants used named entities like &mdash; instead of decimal-encoded entites like &#8212; . I strongly recommend against using any `<blink>` tags. I wish SmartyPants used named entities like `&mdash;` instead of decimal-encoded entites like `&#8212;`. Output: <p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p> <p>I wish SmartyPants used named entities like <code>&amp;mdash;</code> instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p> To specify an entire block of pre-formatted code, indent every line of the block by 4 spaces or 1 tab. Just like with code spans, & , < , and > characters will be escaped automatically. Markdown: If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: <blockquote> <p>For example.</p> </blockquote> Output: <p>If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes:</p> <pre><code>&lt;blockquote&gt; &lt;p&gt;For example.&lt;/p&gt; &lt;/blockquote&gt; </code></pre>","title":"CODE"}]}